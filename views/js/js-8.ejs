<%- include ../head %>
  <body>
 
    <%- include navbar %>

    <div class="container">
      <div class="row">
        <div class="col-sm-3">

        <%- include left %>

        </div>
        <div class="col-sm-9">
          <div class="panel panel-primary">
          <div class="panel-heading">
            <i class="glyphicon glyphicon-book"></i> タイマーを扱うメソッド</div>
          <div class="panel-body">
<h4>setIntervalメソッド</h4>
<p>setIntervalメソッドは、第1引数で指定した関数内の処理を、第2引数で指定したミリ秒ごとに実行します。</p>
  <p>
  <a href="https://developer.mozilla.org/ja/docs/Web/API/window.setInterval" target="_blank" class="btn btn-default">
  <i class="glyphicon glyphicon-info-sign"></i> 参考: setInterval
  </a>
  </p>
<pre class="prettyprint">
window.setInterval(function(){
    var date = new Date();
    console.log(date.getTime());
},1000);
</pre>
<h4>clearIntervalメソッド</h4>
  <p>clearIntervalメソッドは、setIntervalメソッドの戻り値を格納した変数を引数にとり、setIntervalメソッドを中断することができます。</p>
  <p>
  <a href="https://developer.mozilla.org/ja/docs/Web/API/window.clearInterval" target="_blank" class="btn btn-default">
  <i class="glyphicon glyphicon-info-sign"></i> 参考: setInterval
  </a>
  </p>
<pre class="prettyprint">
var counter = 0
var timer = window.setInterval(function(){
    counter++;
    var date = new Date();
    console.log(date.getTime());

    if(counter >= 10){
      clearInterval(timer);
    }
},1000);
</pre>
</pre>
<h4>setTimeoutメソッド</h4>
  <p>setTimeoutメソッドは第1引数で指定した関数の処理を、第2引数で指定したミリ秒後に実行します。ただし、setIntervalメソッドと異なり、そのままでは一定時間後に1度実行されるだけになります。</p>
  <p>
  <a href="https://developer.mozilla.org/ja/docs/Web/API/window.setTimeout" target="_blank" class="btn btn-default">
  <i class="glyphicon glyphicon-info-sign"></i> 参考: setTimeout
  </a>
  </p>
<pre class="prettyprint">
window.setTimeout(function(){
    var date = new Date();
    console.log(date.getTime());
},1000);
</pre>
<h4>setTimeoutメソッドをループする</h4>
<p>setIntervalメソッドは負荷がかかるため、一般的にはsetTimeoutメソッドをループして使うことが多いです。以下のように、関数内でsetIntervalメソッドを処理して、初回の関数を実行すると、setTimeoutメソッドがループします。</p>

<pre class="prettyprint">
//初回の実行
getTimestamp();

function getTimestamp(){
    var date = new Date();
    console.log(date.getTime());

    //2回目移行の実行
    window.setTimeout(function(){
        getTimestamp();
    },1000);
}
</pre>

<h4>即時関数でsetTimeoutメソッドを初回実行する</h4>

<pre class="prettyprint">
//初回の実行
(function getTimestamp(){
  var date = new Date();
  console.log(date.getTime());

  //2回目移行の実行
  window.setTimeout(function(){
      getTimestamp();
  },1000);
})();
</pre>

<h4>clearTimeoutメソッド</h4>
<p>
  <a href="https://developer.mozilla.org/ja/docs/Web/API/window.clearTimeout" target="_blank" class="btn btn-default">
  <i class="glyphicon glyphicon-info-sign"></i> 参考: setTimeout
  </a>
  </p>
<pre>
</pre>

<p>参考：タイマー系メソッドは、windowオブジェクトのメソッドとして定義されているため、Node.jsのメソッドではありません。ただし、Node.jsは、独自のTimers APIでタイマー系メソッドを実装しています。</p>
  <p>
<a href="http://nodejs.org/api/timers.html" target="_blank" class="btn btn-default">
  <i class="glyphicon glyphicon-info-sign"></i> 参考: Timers
  </a>
  </p>


          </div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <div id="footer"><%= title %></div>
 
    <script src="http://code.jquery.com/jquery.js"></script>
    <script src="js/google-code-prettify/prettify.js"></script>
    <script>prettyPrint();</script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/list-counter.js"></script>
  </body>
</html>