extends ../../layout

block link
    link(href='../../css/bootstrap.min.css',rel='stylesheet',media='screen')
    link(href='../../js/dtree/dtree.css', rel='stylesheet', media='screen')
    link(href='../../css/style.css',rel='stylesheet',media='screen')
    link(href='../../js/google-code-prettify/prettify.css',rel='stylesheet',media='screen')

block content
    include navbar
    .container
      .row
        .col-sm-3
          include left
        .col-sm-9
          .panel.panel-primary
            .panel-heading プラグインの実装
            .panel-body
                .alert.alert-info Android向けのCordovaプラグインを実装する
                p アプリの要件によっては、自分が利用したいネイティブの機能のCordovaプラグインがあるとは限りません。また、機能面に限らずパフォーマンスや原理的にHTML5の実装が難しい場合などにも、Cordovaプラグインを実装して、特定の画面のみをネイティブで記述するというようなことが必要になります。
                p Cordovaフレームワークでは、あらかじめ誰でもプラグインを実装できるように設計されています。簡単なプラグインであれば短時間ですぐに実装できます。
                p まず、Androidプロジェクト向けのCordovaプラグインを実装する手順を紹介します。
                ol
                    li config.xmlを編集して、プラグインに関する情報を追加する
                    li Javaでプラグインのコードを記述する
                    li JavaScriptからプラグインのコードを呼び出す
                p これらの作業は、Android用のプロジェクトであるplatforms/androidディレクトリ以下で行います。ネイティブ側のコードをJavaで記述するので、Eclipseを起動してAndroidのプロジェクトを開いてください。
                .alert.alert-info config.xmlを編集して、プラグインに関する情報を追加する
                p Cordovaでプラグインを実装するには、まずCordovaフレームワークが実行時に参照する設定ファイルであるconfig.xmlにプラグインに関する情報を追加します。Androidプロジェクトの場合には、config.xmlはres/xml/config.xmlにあります。
                p config.xmlに登録する情報は、プラグイン名とAndroid用のプラグインのコードを記述するクラス名の2つです。JavaScriptからはここで指定したプラグイン名を用いてプラグインを呼び出します。ここでは、プラグイン名を「MyFirstPlugin」、クラス名を「com.example.hello.MyFirstPlugin」にします。res/xml/config.xmlを開いて、widget要素に以下のようにfeature要素を追加してください。
                pre
                    :code
                        <feature name="MyFirstPlugin">
                            <param name="android-package" value="com.example.hello.MyFirstPlugin"
                        </feature>
                .alert.alert-info Javaでプラグインのコードを記述する
                p Androidのプロジェクトでは、com.example.hello.MyfirstPluginというクラスを作成します。config.xmlに追加したプラグインのクラス名と同じクラス名です。プラグインを実装するクラスはCordovaPluginクラスを継承する必要があります。
                p Eclipseの画面の左にあるPacakge Explorerからsrcディレクトリを開き、com.example.helloパッケージを右クリックして表示されるメニューで[New]→[Class]を選択してください。
                p 新しいクラス作成ダイアログが表示されるので、[Name]欄にクラス名として「MyFirstPlugin」、[SupperClass]欄に親クラス名として「CordovaPlugin」を指定します。
                p [Finish]ボタンを押すと、MyFirstPluginクラスが作成されます。これを開いて、以下のように記述してください。
                figure
                    figcaption MyFirstPlugin.javaの基本形
                    pre
                        :code
                            package com.example.hello;

                            import org.apache.cordova.CallbackContext;
                            import org.apache.cordova.CordovaPlugin;
                            import org.json.JSONArray;
                            import org.json.JSONException;

                            public class MyFirstPlugin extends CordovaPlugin{
                                @Override
                                public boolean execute(String action, JSON args, CallbackContext callbackContext) throws JSON Exception {
                                    return true;
                                }
                            }
                p AndroidのCordovaプラグインのJavaの部分は、このコードが基本になります。executeメソッド内に、JavaScriptから呼び出せるネイティブの処理を記述します。JavaScriptからMyFirstPluginを呼び出すと、Cordova内部のブリッジ機構によりこのexecuteメソッドが呼び出されます。executeメソッドのシグネチャは以下のようになっています。
                pre
                    :code
                        public boolean execute(String action.JSONArray args, CallbackContext callbackContext) throws JSONException
                p action引数には
                .alert.alert-info JavaScriptからプラグインのコードを呼び出す
                .alert.alert-info Android向けのプラグイン開発の詳細
                p 
                .alert.alert-info iOS向けのCordovaプラグインを実装する
                p 
                .alert.alert-info cordovaコマンドからインストールできるプラグインを実装する
                p 
