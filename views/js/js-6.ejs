<%- include ../head %>
  <body>
 
    <%- include navbar %>

    <div class="container">
      <div class="row">
        <div class="col-sm-3">

        <%- include left %>

        </div>
        <div class="col-sm-9">
          <div class="panel panel-primary">
          <div class="panel-heading">
            <i class="glyphicon glyphicon-book"></i> 関数</div>
          <div class="panel-body">
<h4>関数の基本形</h4>

<pre>
function 関数名(){
  ...実行する処理...
}

関数名(引数);
</pre>
<pre class="prettyprint">
function sayHello(){
  alert('Hello');
}

sayHello();
sayHello();
sayHello();
</pre>

<p>JavaScriptでは関数の定義を実行処理の後に記述しても実行できます。</p>

</pre>
<pre class="prettyprint">
sayHello();
sayHello();
sayHello();

function sayHello(){
  alert('Hello');
}
</pre>

<hr>

<h4>引数のある関数</h4>

<pre>
function 関数名(引数の指定){
  ...実行する処理...
}

関数名(引数)
</pre>

<pre class="prettyprint">
function sayHello(name){
  alert('Hello, ' + name + '. How are you?');
}

sayHello('Taro');
sayHello('Hanako');
</pre>

<hr>
<h4>戻り値のある関数</h4>
<pre class="prettyprint">
function taxPrice(val){
  return val * 0.05;
}

var price = 15000;
var tax = taxPrice(price);
alert('金額：' + price + '　税額：' + tax);
</pre>

<hr>
<h4>関数を値として使う</h4>
<p>関数リテラルを変数に代入することで、変数を関数として実行できます。</p>
<pre>
var 変数 = function(引数){ ... }
</pre>

<pre class="prettyprint">
var getTax = function(val){
  return val * 0.05;
}

var price = 15000;
var tax = getTax(price);
alert('金額：' + price + '　税額：' + tax);
</pre>

<pre>
var 変数 = 関数;

function 関数(){
  ...処理...
}
</pre>

<pre class="prettyprint">
var doGetTax = getTax;
doGetTax(0.05);

function getTax(val){
  var price = 15000;
  var tax = val * 0.05;
  alert('金額：' + price + '　税額：' + tax);
}
</pre>
<p>ただし、変数に関数を代入する場合、関数の定義が後にくるとエラーになるので注しましょう。</p>
<pre class="prettyprint">
var price = 15000;
var tax = <mark>getTax(price)</mark>; //=> 関数getTaxはundefinedとなりエラーとなります
alert('金額：' + price + '　税額：' + tax);

var <mark>getTax</mark> = function(val){
  return val * 0.05;
}
</pre>
<hr>

<h4>変数のスコープ</h4>
<pre class="prettyprint">
var getTax = function(val){
  <mark>var ritsu</mark> = 0.05; //=> 関数内でのみ利用できる変数
  return val * ritsu;
}

var price = 15000;
<mark>ritsu</mark> = 0.1; //=> 関数内で宣言されたritsuを上書きできない
var tax = getTax(price);
alert('金額：' + price + '　税額：' + tax);
</pre>

<pre class="prettyprint">
<mark>var ritsu</mark> = 0.05; //=> 関数外で宣言された変数

var getTax = function(val){

  return val * <mark>ritsu</mark>; //=> 関数外で宣言された変数retsuを利用
}

var price = 15000;
ritsu = 0.1;
var tax = getTax(price);
alert('金額：' + price + '　税額：' + tax);
</pre>

<hr>

<h4>無名（匿名）関数 = 関数リテラル</h4>
<pre>

var getTax = <mark>function(val){
  return val * 0.05;
}</mark>

var price = 15000;
var tax = getTax(price);
alert('金額：' + price + '　税額：' + tax);
</pre>

<hr>

<h4>即時関数</h4>
<p>(無名関数)(引数の指定)</p>
<pre class="prettyprint">
(function(val){
  var price = val;
  var tax = val * 0.05;
  alert('金額：' + price + '　税額：' + tax);
})(15000);
</pre>

<p>JavaScriptでは関数内で定義された変数がローカルスコープとなりますが、関数外で定義した変数はすべて、windowオブジェクトのスコープ内での変数となり、他のjsファイルやライブラリーなどと、変数名が競合することがあります。そのため、script要素内の処理は以下のように、すべて即時関数内で実行するとよいでしょう。</p>

<pre class="prettyprint">
<mark>(function(){</mark>
  var getTax = function(val){
    return val * 0.05;
  }

  var price = 15000;
  var tax = getTax(price);
  alert('金額：' + price + '　税額：' + tax);
<mark>})();</mark>
</pre>

<hr>
<p>参考：(コンストラクタ).プロパティ、(コンストラクタ).メソッド</p>
<pre class="prettyprint">
var date = new Date();
date.getTime();
</pre>
<pre>
(new Date()).getTime();
</pre>
          </div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <div id="footer"><%= title %></div>
 
    <script src="http://code.jquery.com/jquery.js"></script>
    <script src="js/google-code-prettify/prettify.js"></script>
    <script>prettyPrint();</script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/list-counter.js"></script>
  </body>
</html>