extends ../../layout

block link
    link(href='../../css/bootstrap.min.css',rel='stylesheet',media='screen')
    link(href='../../js/dtree/dtree.css', rel='stylesheet', media='screen')
    link(href='../../css/style.css',rel='stylesheet',media='screen')
    link(href='../../js/google-code-prettify/prettify.css',rel='stylesheet',media='screen')

block content
    include navbar
    .container
      .row
        .col-sm-3
          include left
        .col-sm-9
          .panel.panel-primary
            .panel-heading アプリの設定
            .panel-body
                p Cordovaを用いたアプリには、アプリや特定のプラットフォームでの挙動の詳細詳細を設定する様々なパラメータが存在します。
                p アプリの設定は、wwwディレクトリ以下のconfig.xmlファイルを編集して行います。このconfig.xmlに記述した設定は、cordovaコマンドラインツールにより、各プラットフォーム特有のプロジェクトのconfig.xmlに反映されます。
                p ここではconfig.xmlの基本的な構造やその設定項目を説明します。併せて、プラットフォームごとに異なるアプリのアイコンやスプラッシュスクリーンの設定についても説明します。
                .alert.alert-info config.xmlの構造
                p Cordovaが参照するconfig.xmlのスキーマは、W3Cの策定する以下の仕様に基づいています。
                ul
                    li URL Packaged Web App（Widgets） - Packaging and XML Configuration （Second Edition）<br><a href="http://www.w3.org/TR/widgets/" target="_blank">http://www.w3.org/TR/widgets/</a>
                p この仕様は、汎用的なWebアプリをパッケージ化する際のメタデータを記述する設定ファイルのスキーマを定めています。config.xmlは、具体的には以下のように構造化されています。
                pre
                    :code
                        <widgets>
                            <name></name>
                            <preference />
                            <feature>
                                <param />
                            </feature>
                            <access />
                            <content />
                        </widgets>
                h4 preference要素
                p Cordovaフレームワークでは、実行時のフレームワークの挙動を設定で変更できます。name属性の名前、value属性には設定の値を記述します。
                h4 access要素
                p アプリ内で許可するドメインをホワイトリスト形式で記述します。この要素に記述されていないドメインでホストされているHTMLは読み込めません。
                h4 feature要素
                p Cordovaフレームワークでは、端末のあるネイティブ機能へのアクセスをプラグインが提供します。Cordovaフレームワークは、実行時にこのfeature要素を見て、どのプラグインが有効になっているかを知ります。feature要素では、アプリが利用するプラグイン名とそれに対応するネイティブ側のプラグインのクラス名を指定します。
                p この設定は、後述するcordova pluginコマンドによって自動的に挿入されるので、多くの場合、開発者が記述する必要はありません。
                h4 content要素
                p この要素では、Cordovaを用いたハイブリッドアプリが最初に読み込むHTMLのパスを指定します。デフォルトでは、index.htmlが読み込まれます。
                pre
                    :code
                        <content src="hoge.html" />
                .alert.alert-info アプリに関する設定
                p www/config.xmlを編集して、アプリに関する基本的な情報を設定します。
                p アプリの識別子は、widget要素のid属性で指定します。Androidアプリでは、アプリの識別子がアプリケーションのパッケージ名として利用されます。iOSでは、AppIDとして利用されます。アプリの識別子は、逆ドメイン形式で記述します。アプリのバージョンは、widget要素のversion属性で指定します。。
                pre
                    :code
                        <widget id="com.example.hellohello" version="0.0.1" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">
                p アプリ名は、widget要素以下にname要素を用いて記述します。アプリ名は、iOS用のプロジェクトではプロジェクト名としても利用されます。
                pre
                    :code
                        <name>HelloWorldApp</name>
                p Cordovaフレームワーク用の設定値は、widget要素以下にpreference要素を用いて設定します。例えば、iOSのCordovaフレームワークで利用できる"DisallowOverscroll"この設定は、後述するcordova以下のように記述します。
                pre
                    :code
                        <preference name="DisallowOverscroll" value="true" />
                p アプリに関する設定では、他にもアプリの概要を記述するdescription要素と、アプリの開発者について記述するauthor要素がありますが、これらはiOSとAndroidのプロジェクトではあまり利用されていないようです。
                .alert.alert-info 設定を反映させる
                p ここでいったん設定を反映する手順を確認します。www/config.xmlを編集して変更した設定を、プラットフォーム別のプロジェクトに反映します。
                pre
                    :code
                        $ cordova prepare -d
                p このコマンドを実行すると、プロジェクトの情報やコンテンツが、platformsディレクトリ以下の各プラットフォーム向けのプロジェクトに反映されます。
                p config.xmlは、各プラットフォーム向けのプロジェクトディレクトリ以下にもあります。各プラットフォームのCordovaフレームワークが実際に実行時に読み込んでいる設定ファイルはそのconfig.xmlです。
                p iOSのプロジェクトでは、platforms/ios/（アプリ名）/config.xmlにあります。Androidのプロジェクトでは、platforms/android/res/xml/config.xmlにあります。
                .alert.alert-info Android特有の設定項目
                p Androidアプリで利用できる設定項目は以下のようになります。
                ul
                    li loadingDialog<br>アプリの読み込み中に、ネイティブのロード中を表すダイアログを表示します。フォーマットは、「タイトル、読み込み中・・・」です。
                    li loadingPageDialog<br>HTMLのページを読み込んでいるときに、ネイティブのロード中を表すダイアログを表示します。遷移してHTMLを読み込むたびに表示されます。フォーマットは、loadingDialog設定と同様です。
                    li errorURL<br>アプリのエラーページを設定します。Androidプロジェクトのwwwディレクトリからのパスを指定します。
                    li backgroundColor<br>アプリの背景色を指定します。4バイトの16進数をサポートしています。最初の1バイトはアルファ値で、残りの3バイトは標準的なRGB値です。例えば、00000000は透明な黒です。真っ白にするにはffffffffです。
                    li loadUrlTimeoutValue<br>Cordovaがアプリを読み込む際に、タイムアウトエラーを投げるのをどれくらい待つかを設定します。
                    li keepRunning<br>アプリがバックグラウンドに回ってもCordovaを実行し続けるかどうかを設定します。trueかfalseを指定します。デフォルトはtrueです。
                    li splashscreen<br>res/drawableディレクトリ以下の画像を拡張子なしで指定します。
                    li disallowOverscroll（boolian、defaults to false）：<br>Androidでオーバースクロールするときに、画面の端が光るような表現が用いられます。この設定では、オーバースクロール時の表現をなくすかどうかを設定します。trueかfalseを指定します。デフォルトはfalseです。
                .alert.alert-info iOS特有の設定項目
                p iOSアプリで利用される設定項目は以下のようになります。
                ul
                    li DisallowOverscrill<br>WebViewをオーバースクロールさせたくない場合にtrueを設定します。trueかfalseを指定します。デフォルトはfalseです。
                    li TopActivityIndicator<br>ステータスバーに表示されるインジケータの種類を設定します。このインジケータは、アプリがネットワーク通信するときなどに表示されます。Cordovaでは、ページの読み込み中には、このインジケーターが表示されます。執筆時の最新のCordova 3.0.6にはバグがあり、このインジケータは表示されません。有効な値は、whiteLargeとwhiteとgrayです。デフォルトはgrayです。
                    li EnableVierportScale<br>metaタグによるviewportのスケールを有効にしない場合にtrueを設定します。trueにすると、metaタグのviewportでスケールが有効になりません。trueかfalseを指定します。デフォルトはfalseです。
                    li AutoHideSplashScreen<br>アプリの起動時に表示するスプラッシュスクリーンを消すタイミングをJavaScriptから指定するときにはfalseを指定します。trueかfalseを指定します。デフォルトはtrueです。
                    li FadeSplashScreen<br>スプラッシュスクリーンを表示・非表示するときにフェードイン・フェードアウトさせるかどうかを設定します。trueかfalseを指定します。フェードイン・フェードアウトさせたくない場合にはfalseを指定します。デフォルトはtrueです。
                    li FadeSplashScreenDuration<br>フェードイン・フェードアウトするときのアニメーションの長さを秒数で指定します。デフォルトは2です。小数点も指定できます。
                    li ShowSplashScreenSpinner<br>表示されたスプラッシュスクリーンの上にスピナーを表示しない場合にfalseを指定します。trueかfalseを指定します。デフォルトはtrueです。
                    li MediaPlaybackRequireUserAction<br>HTML5 Videoタグの自動再生を許可しない場合にtrueを指定します。trueかfalseを指定します。デフォルトはfalseです。
                    li AllowInlineMediaPlayback<br>HTML5 Videoタグでのプレイバックを許可する場合にtrueを指定します。なお、HTML側でもVideoタグの属性にwebkit-playinlineを追加しておく必要があります。trueかfalseを指定します。デフォルトはfalseです。
                    li BackupWebStorage<br>Webストレージをどこにバックアップするかを設定します。noneとcloudとlocalのいずれかを指定します。cloudを指定した場合、ストレージはiCloudにバックアップされます。localを指定した場合、iTunes経由でバックアップされます。Webストレージをバックアップしない場合には、noneを指定します。
                    li KeyboardDisplayRequiresUserAction<br>JavaScriptのfocusメソッドを通じて、フォーム要素にフォーカスしたとき、iOSのソフトウェアキーボードを表示したい場合にはfalseを指定します。trueかfalseを指定します。デフォルトはtrueです。
                    li SuppressesIncrementalRendering<br>すべてのビューを受け取ってからアプリ内部のHTMLをレンダリングする場合にtrueを設定します。trueかfalseを指定します。デフォルトはfalseです。
                    li HideKeyboardFormAccessoryBar<br>ソフトウェアキーボードの上に表示されるツールバーを消したい場合にtrueを設定します。このツールバーには、[Prev][Next][Done]ボタンが表示されます。trueかfalseを指定します。デフォルトはfalseです。
                    li KeyboardShrinksView<br>ソフトウェアキーボードが表示されるときに、キーボードの大きさに合わせてWebViewの高さを変更する場合にtrueを設定します。falseに設定すると、WebViewのサイズは変わらず、WebView上にソフトウェアキーボードがかぶさるようになります。trueかfalseを指定します。デフォルトはfalseです。

