extends ../../layout

block link
	link(href='../../css/bootstrap.min.css',rel='stylesheet',media='screen')
	link(href='../../css/bootstrap-theme.min.css',rel='stylesheet',media='screen')
	link(href='../../js/dtree/dtree.css', rel='stylesheet', media='screen')
	link(href='../../css/style.css',rel='stylesheet',media='screen')
	link(href='../../js/google-code-prettify/prettify.css',rel='stylesheet',media='screen')

block content
	include navbar.jade
	.container
		.row
			.col-sm-3
				include left.jade
			.col-sm-9
				.panel.panel-primary
					.panel-heading
						i.glyphicon.glyphicon-book
						| &nbsp;Matcher
					.panel-body
						p 以下のようなディレクトリ構成になっています。
						p: u アプリのルートディレクトリ
						pre
							:code
								/.
								/specRunnder.html
						p: u srcディレクトリ
						pre
							:code
								/src/.
								/src/index.html
								/src/js/main.js
						p: u specディレクトリ
						pre
							:code
								/spec/.
								/spec/mainSpec.js
						p
							a.btn.btn-default(href='/specRunner.html',target='_blank')
								i.glyphicon.glyphicon-play
								| デモ
						p /src/index.html
						p /src/js/main.js
						pre(class='prettyprint linenums:1')
							:code
								var str = function(str){
									return str;
								};

								var different = function(num){
									return num + 1;
								};

								var bool = function(a){
									var b = 'hoge'
									return b == a
								};

								var add = function(a, b){
									return +(a + b);
								};

								var multiply = function(a, b){
									return a * b;
								};

								var compare = function(a, b){
									return a;
								};

								var ary = function(ary){
									return ary
								}
						p /specRunner.html
						p /spec/mainSpec.js
						.alert.alert-info toBeDefined()
						pre(class='prettyprint linenums:1')
							:code
								describe('str', function() {
									it('引数が渡されればundefinedを返すべきではない', function() {
										var result = str('hoge');
										expect(result).toBeDefined();

										//以下のようにまとめて記述できます。
										//expect(str('hoge')).toBeDefined();
									});
								});
						.alert.alert-info toBeUndefined()
						pre(class='prettyprint linenums:1')
							:code
								describe('str', function() {
									it('引数が渡されなければundefinedを返すべき', function() {
										var result = str();
										expect(result).toBeUndefined();

										//以下のようにまとめて記述できます。	
										//expect(str()).toBeUndefined();
									});
								});
						.alert.alert-info toBeNull()
						pre(class='prettyprint linenums:1')
							:code
								describe('str', function() {
									it('引数にnullが指定されたらnullを返すべき', function() {
										var result = str(null);
										expect(result).toBeNull();

										//以下のようにまとめて記述できます。
										//expect(str(null)).toBeNull();
									});
								});
						.alert.alert-info toBe(expected)
						pre(class='prettyprint linenums:1')
							:code
								describe('str', function() {
									it('引数に与えられたものと同じものを返すべき', function() {
										var result = str('hoge')
										expect(result).toBe('hoge');

										//以下のようにまとめて記述できます。
										//expect(str('hoge')).toBe('hoge');
									});
								});
						.alert.alert-info not.toBe(expected)
						pre(class='prettyprint linenums:1')
							:code
								describe('different', function() {
									it('引数に与えられた数値と違う数値を返すべき', function() {
										var result = different(1);
										expect(result).not.toBe(1);

										//以下のようにまとめて記述できます。
										//expect(different(1)).not.toBe(1);
									});
								});
						.alert.alert-info toEqual(expected)
						pre(class='prettyprint linenums:1')
							:code
								describe('add', function() {
									it('足し算の合計をかえすべき', function() {
										var result = add(1, 2);
										expect(result).toEqual(3);

										//以下のようにまとめて記述できます。
										exprect(add(1, 2)).toEqual(3);
									});
								});
						.alert.alert-info not.toEqual(expected)
						pre(class='prettyprint linenums:1')
							:code
								describe('multiply', function() {
									it('負の数どうしをかけると正の数になるべき', function() {
										var result = multiply(-1, -2);
										expect(result).not.toEqual(-2);

										//以下のようにまとめて記述できます。
										//expect(multiply(-1, -2)).not.toEqual(-2);
									});
								});
						.alert.alert-info toBeTruthy()
						pre(class='prettyprint linenums:1')
							:code
								describe('bool', function() {
									xit('trueを返すべき', function() {
										var reslut = bool('hoge');
										expect(reslut).toBeTruthy();
										
										//以下のようにまとめて記述できます。
										expect(bool('hoge')).toBeTruthy();
									});
								});
						.alert.alert-info toBeFalsy()
						pre(class='prettyprint linenums:1')
							:code
								describe('bool', function() {
									it('falseを返すべき', function() {
										expect(bool('foo')).toBeFalsy();
									});
								});
						.alert.alert-info toBeGreaterThan(expedted)
						pre(class='prettyprint linenums:1')
							:code
								describe('compare', function() {
									it('aがbより大きいべき', function() {
										expect(compare(2, 1)).toBeGreaterThan(1);
									});
								});
						.alert.alert-info toBeLessThan(expected)
						pre(class='prettyprint linenums:1')
							:code
								describe('compare', function() {
									it('aがbより小さいべき', function() {
										expect(compare(1, 2)).toBeLessThan(2);
									});
								});
						.alert.alert-info toContain(expected)
						pre(class='prettyprint linenums:1')
							:code
								describe('ary', function() {
									it('配列の要素に0を含むべき', function() {
										expect(ary([0,1,2,3])).toContain(0);
									});
								});	
						.alert.alert-info not.toContain(expected)
						pre(class='prettyprint linenums:1')
							:code
								describe('ary', function() {
									it('配列の要素に0を含まないべき', function() {
										expect(ary([1,2,3,4])).not.toContain(0);
									});
								});	
						.alert.alert-info toMatch(expected)
						pre(class='prettyprint linenums:1')
							:code
								describe('str', function() {
									it('引数に文字が与えられるべき', function() {
										expect(str('hoge')).toMatch(/^[\D]+$/);
									});
								});
						.alert.alert-info toNotMatch(expected)
						pre(class='prettyprint linenums:1')
							:code
								describe('str', function() {
									it('引数に文字以外が与えられるべきではない', function() {
										expect(str('1')).not.toMatch(/^[\D]+$/);
									});
								});
						p 以下のようにまとめて記述できます。
						pre(class='prettyprint linenums:1')
							:code
								describe('str', function() {
									it('引数が渡されればundefinedを返すべきではない', function() {
										expect(str('hoge')).toBeDefined();
									});
									it('引数が渡されなければundefinedを返すべき', function() {
										expect(str()).toBeUndefined();
									});
									it('引数にnullが指定されたらnullを返すべき', function() {
										expect(str(null)).toBeNull();
									});
									it('引数に与えられたものと同じものを返すべき', function() {
										expect(str('hoge')).toBe('hoge');
									});
									it('引数に文字が与えられるべき', function() {
										expect(str('hoge')).toMatch(/^[\D]+$/);
									});
									it('引数に文字以外が与えられるべきではない', function() {
										expect(str('1')).not.toMatch(/^[\D]+$/);
									});
								});

								describe('different', function() {
									it('引数に与えられたものと違うものを返すべき', function() {
										expect(different(1)).not.toBe(1);
									});
								});

								describe('add', function() {
									xit('足し算の合計をかえすべき', function() {
										expect(add(1, 2)).toEqual(3);
									});
									it('引数が数値ではない場合はNaNを返すべき',function(){
										expect(add('hoge', 2) !== add('hoge', 2)).toBeTruthy();
									});
								});

								describe('multiply', function() {
									xit('負の数どうしをかけると正の数になるべき', function() {
										expect(multiply(-1, -2)).not.toEqual(-2);
									});
								});
								describe('bool', function() {
									xit('trueを返すべき', function() {
										expect(bool('hoge')).toBeTruthy();
									});
								});

								describe('bool', function() {
									it('falseを返すべき', function() {
										expect(bool('foo')).toBeFalsy();
									});
								});

								describe('compare', function() {
									it('aがbより大きいべき', function() {
										expect(compare(2, 1)).toBeGreaterThan(1);
									});
									it('aがbより小さいべき', function() {
										expect(compare(1, 2)).toBeLessThan(2);
									});
								});

								describe('ary', function() {
									it('配列の要素に0を含むべき', function() {
										expect(ary([0,1,2,3])).toContain(0);
									});
									it('配列の要素に0を含まないべき', function() {
										expect(ary([1,2,3,4])).not.toContain(0);
									});
								});	