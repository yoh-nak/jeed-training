include ../../head.jade
    body
        include navbar.jade
        div.container
            div.row
                div.col-sm-3
                    div.list-group
                        a.list-group-item(href='canvas27.jade')
                              i.badge.badge-info
                              | 準備
                        a.list-group-item(href='canvas28.jade')
                              i.badge.badge-info
                              | 速度
                        a.list-group-item(href='canvas29.jade')
                              i.badge.badge-info
                              | 境界
                        a.list-group-item(href='canvas30.jade')
                              i.badge.badge-info
                              | 加速度
                        a.list-group-item(href='canvas31.jade')
                              i.badge.badge-info
                              | 摩擦
                        a.list-group-item(href='canvas32.jade')
                              i.badge.badge-info
                              | 衝突
                        a.list-group-item(href='canvas33.jade')
                              i.badge.badge-info
                              | 跳ね返り
                        a.list-group-item(href='canvas34.jade')
                              i.badge.badge-info
                              | 運動量保存
                div.col-sm-9
                    div.panel.panel-primary
                        div.panel-heading 運動量保存
                        div.panel-body
                            h4 運動量を保存する
                            p
                                a.btn.btn-default(href='demo/canvas/exercise5/index8.html',target='_blank')
                                    i.glyphicon.glyphicon-play
                                    | デモ
                            p 前のサンプルでは、アステロイドは衝突前と同じ速度で跳ね返っていました。跳ね返っても、速度の向きが逆になるだけだったのです。これでもすばらしいことですが、ついさき触れたように、このままでは衝突、跳ね返りのエフェクトとしてとてもリアルだとは言いがたいものがあります。リアルな動きを得るためには、アステロイドの運動量を保存するプロセスが必要です。
                            p 運動量の保存とは、両方のアステロイドの速度値とともに、衝突後の個々のアステロイドの速度を計算するプロセスです。このプロセスが入ると、速度が速く質量の大きいアステロイドは、小さいアステロイドをはじき出すことができます。また、速度と質量が同じようなアステロイドが正面衝突すると、ビリヤードのボールが正面衝突したときのように、互いに相手を止めてしまうようにもなります。
                            p しかし、先に進む前に、運動量を計算するための基本要件である質量というプロパティを、アステロイドに追加しなければなりません。
                            p Asteroidクラスのコードを次のものに置き換えて、質量を追加しましょう。
                            pre.prettyprint.linenums

                            p 次に、アステロイド作成ループを次のように書き換えて、作成時にアステロイドに質量を与えます。
                            pre.prettyprint.linenums

                            p mass変数が宣言され、新しいアステロイドオブジェクトを作るときにmass引数が追加されていることに注意してください。
                            p 個々のアステロイドに質量を与えたので、質量に速度を掛ければ運動量を計算できます。これにそれほどしっかりしとした意味があるとは考えられませんが、すくなくとも運動量の概念を意識するということが大切です。
                            p 運動量は複雑なテーマであり、完全に消化するためにはそれなりの時間がかかることがわかっているので、私は1つの項で運動量のすべてを説明しようとして立ち往生するつもりはありません。ここでは、方程式の仕組みをていねいに説明していくのではなく、このリアルなエフェクトの実現方法を示すことに主眼を置いています。
                            p 以上の方針のもとで、運動量を実際に保存してみましょう。
                            p 次に、衝突後に個々のアステロイドの速度を反転するコードをコメントアウトするか取り除いて、代わりに次のコードを挿入します。
                            pre.prettyprint.linenums

                            p 少し頭がおかしくなってきそうですが、これはまともなコードです。 ブラウザをリフレッシュして、動きを見てみましょう。ずいぶんとリアルになったような気がしませんか?
                            p ここで行っていることは、2つのアステロイドの速度を計算することです。第2のアステロイドの新しい速度は、以前計算した 相対速度に第1のアステロイドの新しい速度を加えれば計算できます。
                            p みなさんが本当にそうしたいと思うのなら止めませんが、私はこのコードを完全に理解しようとは思っていません。私はこのコードを長い間使っていていますが、完全に理解しているふりをするつもりもありません。面倒な数学は、賢い人達に任せたいと思います。
                            pre.prettyprint.linenums
        div#footer=title
        script(src='http://code.jquery.com/jquery.js')
        script(src='js/google-code-prettify/prettify.js')
        script.
            prettyPrint();
        script(src='js/bootstrap.min.js')
        script(src='js/list-counter.js')