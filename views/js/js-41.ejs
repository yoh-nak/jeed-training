<%- include ../head %>
  <body>
 
    <%- include navbar %>

    <div class="container">
      <div class="row">
        <div class="col-sm-3">

        <%- include left %>

        </div>
        <div class="col-sm-9">
          <div class="panel panel-primary">
          <div class="panel-heading">
            <i class="glyphicon glyphicon-book"></i> JavaScript資料</div>
          <div class="panel-body">

<pre>

繰り返し



for(初期化の式;繰り返し条件の式;加算の式){
     繰り返す処理
}


var a = 0;
for(var i = 1; i <= 10; i++){
     a = a + i;
}
document.writeln(a);


while(繰り返し条件の式){
     繰り返す処理
}

var a = 3;
while(a < 10){
     a = a + 3;
}


do{
     繰り返す処理
}while(繰り返し条件の式);


var a = 10;
do{
     a = a + 3;
}while(a < 10);
document.writeln(a);



var a = 0;
for(var i = 0; i , 10; i++){
     if(a >= 10) break;
     if(i % 2 == 0) continue;
     a = a + i;
}
document.writeln(a);




配列

var 配列名 = [初期値, 初期値, 初期値, ….];

配列名[添え字]


var a = [10, 20, 30];
for(var i = 0; i < 3; i++){
     document.writeln(a[i]);
}



var 配列名 = new Array(要素の数);


var a = new Array(3);
a[0] = 10;
a[1] = 20;
a[2] = 30;
for(var i = 0; i < 3; i++){
     document.writeln(a[i]);
}




連想配列



var 連想配列名 = {添え字:初期値, 添え字:初期値, 添え字:初期値, …};



var a = {"dragon":"りゅう", "sword":"つるぎ", "egg":"たまご"}
document.writeln(a["dragon"]);
document.writeln(a["sword"]);
document.writeln(a["egg"]);


var 連想配列名  = new Object();


var a = new Object(3);
a["dragon"] = "りゅう";
a["sword"] = "つるぎ";
a["egg"] = "たまご";
document.writeln(a["dragon"]);
document.writeln(a["sword"]);
document.writeln(a["egg"]);




関数



function 関数名(引数1, ….) {
     関数内で実行したい処理
     return 返り値;
}


返り値を返さない関数

function writeStar(num){
     for(var i = 0; i < num; i++){
          document.writeln('☆');
     }
}
document.writeln('星が1個');
writeStar(1);
document.writeln('星が3個');
writeStar(3);


返り値を返す関数

function writeStar(num){
     var str = '';
     for(var i = 0; i < num; i++) str += '☆');
     return str;
}
document.writeln('星が1個' + writeStar(1));
document.writeln('星が3個' + writeStar(3));


変数とスコープ


リテラル = 変化しない数
プログラムに直接書き込んだデータ、数字や文字のこと


document.writeln('こんにちは')
document.writeln(123)
document.writeln(3.14)


種類書式例数値リテラル（NumericLiteral）数字を指定する1234文字列リテラル（StringLiteral）ダブルクォーテーション（"）で囲む"hello, World"論理値リテラル（BooleanLiteral）trueまたはfalseを指定するtrueNullリテラル（NullLiteral）nullを指定するnull正規表現リテラル（RegularExpressionLiteral）スラッシュ（/）で囲む/I love Java.*/


配列リテラル //=> 後述
オブジェクトリテラル //=> 後述
関数リテラル //=> 後述






代入演算

数式例省略例説明a = a + 10a += 10変数の値に10を足すa = a - 10a -= 10変数の値から10を引くa = a * 10a *= 10変数の値に10を掛けるa = a / 10a /= 10変数の値を10で割るa = a + 1a++変数の値に1を足すa = a - 1a--変数の値から1を引く





単項演算子
演算子名前式名例と結果++増分演算子（Increment Operator）単項式（UnaryExpression）++1; //=> 2--減分演算子（Decrement Operator）同上--1; //=> 0+単項+演算子（Unary + Operator）同上+ 1; //1-単項-演算子（Unary - Operator）同上- 1; // -1


インクリメント・デクリメント



【JavaScript】単項 + 演算子で数値にする
http://www.softel.co.jp/blogs/tech/archives/4396



条件分岐


if(条件式){

}


var a = 12;
if(a > 10){
     document.writeln('でっかいぞ');
}


var a = 8;
if(a > 10){
     document.writeln('でっかいぞ');
}else{
     document.writeln('ちっちゃいぞ');
}


比較（関係）演算子
演算子名前式名例と結果<小なり演算子（Less-than Operator）関係式（RelationExpression）1 < 2; //=>true>大なり演算子（Greater-than Operator）同上1 > 2;
//=>false<=小なりイコール演算子（Less-than-or-equal Operator）同上1 <= 1;
//=>true>=大なりイコール演算子（Greater-than-or-equal Operator）同上1 >= 1;
//=>true==等価演算子（Equals Operator）等価式1 == 1;
//=>true===厳密等価演算子（Strict Equals Operator）同上1 === "1";
//=>false!=不等価演算子（Does-not-equals Operator）同上1 != 2; //=>true!==厳密不等価演算子（Strict Does-not-equals Operator）同上1 !== "1";
//=>true






</pre>
          </div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <div id="footer"><%= title %></div>
 
    <script src="http://code.jquery.com/jquery.js"></script>
    <script src="js/google-code-prettify/prettify.js"></script>
    <script>prettyPrint();</script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/list-counter.js"></script>
  </body>
</html>