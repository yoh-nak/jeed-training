include ../../head.jade
    body
        include navbar.jade
        div.container
            div.row
                div.col-sm-3
                    div.list-group
                        a.list-group-item(href='canvas27.jade')
                              i.badge.badge-info
                              | 準備
                        a.list-group-item(href='canvas28.jade')
                              i.badge.badge-info
                              | 速度
                        a.list-group-item(href='canvas29.jade')
                              i.badge.badge-info
                              | 境界
                        a.list-group-item(href='canvas30.jade')
                              i.badge.badge-info
                              | 加速度
                        a.list-group-item(href='canvas31.jade')
                              i.badge.badge-info
                              | 摩擦
                        a.list-group-item(href='canvas32.jade')
                              i.badge.badge-info
                              | 衝突
                        a.list-group-item(href='canvas33.jade')
                              i.badge.badge-info
                              | 跳ね返り
                        a.list-group-item(href='canvas34.jade')
                              i.badge.badge-info
                              | 運動量保存
                div.col-sm-9
                    div.panel.panel-primary
                        div.panel-heading 跳ね返り
                        div.panel-body
                            h4 ぶつかったオブジェクトを跳ね返させる
                            p
                                a.btn.btn-default(href='demo/canvas/exercise5/index7.html',target='_blank')
                                    i.glyphicon.glyphicon-play
                                    | デモ
                            p 正直に言って、この項は少し複雑になりますが、我慢してください。跳ね返りに関連する概念を全部詳しく説明するために章をいくつも費やすこともやぶさかではないのですが、そうするとキャンバスについて何も説明できなくなってしまうので、ほどほどで我慢しなければなりません。とは言え、必要ならほかの本でもっと詳しく学べる程度の基礎はしっかりと身につけられるようにするので安心してください。細部はざっくり問しか説明できなくても、跳ね返りという運動の重要な概念を実現するための方法は取り上げるつもりです。
                            p すでに真っ平らな面にオブジェクトを跳ね返らせる方法は学んでいます。しかし、この方法は、まちまちな速度でまちまちな角度で動いている丸いオブジェクトでは通用しません。平面にぶつけるときには、面に垂直な速度成分を反転させてオブジェクトを跳ね返らせることができます。上下の面にぶつけたときにはy軸、左右の面にぶつけたときはx軸を反転すればよいわけです。
                            canvas#fig1(width='400',height='300')
                            p 問題は、このような処理方法では、非常に特殊な状況にしか対応できないことです。実際、2つの円がぶるかる場面でこのように速度を反転させるという方法が使える状況はほとんど考えられません。この方法が使えるのは、たとえば2つの円が完全に同一線上でぶつかっており、2つの中心を結ぶ線とx軸またはy軸の間に角度がないときだけです。ほとんどの場合、2つの円は角度のついた位置でぶつかりますので、速度を単純に反転するわけにはいきません。このような場合、2つの円は適切な角度をつけた形で跳ね返るはずです（図3の左側の円の場合は真下）。しかし、現在の方法のままでは、2つの円は非常におかしな角度で跳ね返ります。図3の場合、左側の円が反対方向に跳ね返るような非常に違和感のある跳ね返り方をします。実際にはもう少し複雑な話ですが、ここでの説明はできる限り単純にし、必要なことに限り取り上げるという方法で進めていきます。
                            canvas#fig2(width='400',height='300')
                            canvas#fig3(width='400',height='300')
                            p この問題を解決するには、任意の角度でほかの円と衝突したあとの位置と速度を計算するための手段が必要です。答えは、一見単純そうに見えますが、コードの形で理解するには少し時間がかかります。それでは説明に移りましょう。
                            p 2つの円が衝突したら、まず何よりも先に2つの円の中心を結んだ線が作る角度を調べなければなりません。そのためには、以前計算した2つの距離（dxとdy）を使い、三角関数に当てはめます。この関数は、直角三角形の対辺と隣辺の長さ（それぞれdxとdyに対応しています）がわかっているときに、求める角度を導き出せます。
                            canvas#fig4(width='400',height='300')
                            p JavaScriptには逆正接関数がありますが、この関数は偽陽性の結果を導き出すことがあるので使いません。それよりも少し堅牢にできているMath.atan2関数なら、求めていることをしてくれます。
                            p では、説明と同時にコードを書いていきましょう。先ほど作った円が衝突しているかどうかをチェックしている空の条件分のなかに、次のコードを追加します。
                            pre.prettyprint.linenums
                              | var angel = Math.atan2(dY, dX);
                              | var sine = Math.sin(angle);
                              | var cosine = Math.cos(angle);
                            p 先行行は2つの円の角度を計算し、その後の2行は、対辺の長さとdX、dYの長さの比を求めます。これらの値はすぐあとで何度も使うので、先に計算しておくと便利です。
                            p 2つの円の角度がわかったら、次は個々の円の速度を回転して、先ほど触れた完全なぶつかり方をした非常に珍しい円のようにします（図2参照）。こうすると、図4の速度は図5のように変わります。こうなると、円は単純に速度を反転させたような形で跳ね返ります。言葉では簡単ですが、これをコードで表現しましょう。
                            canvas#fig5(width='400',height='300')
                            p 次の一連の式は、少し頭を使わないと理解できないものですが、個々の円の位置と速度を回転するために必要なすべてのことを行います。しかし、式を説明しようとするとかなりの時間を使った挙句、あまり大きな成果がえられないだろうと思われるので、みなだんは私の言葉を信じてついてきてください。コードがどのような仕組みになっているのかをどうしても知りたいなら、後日もと詳しく調べてみるといいでしょう。しかし、何も注意してくれなかったとは言わないでください。
                            p 先ほど宣言したcosine変数の下に次のコードを挿入してください。
                            pre.prettyprint.linenums
                              | var x = 0;
                              | var y = 0;
                              | 
                              | var xB = dX * cosine + dY * sine;
                              | var yB = dY * cosine - dX * sine;
                              | 
                              | var vX = tmpAsteroid.vX * cosine + tmpAsteroid.vY * sine;
                              | var vY = tmpAsteroid.vY * cosine - tmpAsteroid.vX * sine;
                              | 
                              | var vXb = tmpAsteroidB.vX * cosine + tmpAsteroidB.vY * sine;
                              | var vYb = tmpAsteroidB.vY * cosine - tmpAsteroidB.vX * sine;
                            p 得られた値は、2つの円の角度がなくなるように回転したあとのそれぞれ円の位置と速度です。と言われてもなかなかぴんと来ないのはわかりますが、あと少しで完成なので、もう少しがんばってください。
                            p 個々のアステロイドの速度を反転するのは簡単な処理です。vYb変数の宣言の下に次のコードを挿入してください。
                            pre.prettyprint.linenums
                              | vX *= -1;
                              | vXb *= -1;
                            P 次に、アステロイドがくっつかず跳ね返るようにしたいので、速度反転のコードの下に次のコードを挿入します。
                            pre.prettyprint.linenums
                              | xB = x + (tmpAsteroid.radius + tmpAsteroidB.radius);
                            p 最後に、新しい速度を与えた2つのアステロイドを元の位置に戻るように回転します。基本的に、最初にアステロイドを回転するために使ったコードの逆を行います。
                            p 位置と速度の反転コードの後ろに、次のコードを挿入してください。
                            pre.prettyprint.linenums
                              | tmpAsteroid.x = tmpAsteroid.x + (x * cosine - y * sine);
                              | tmpAsteroid.y = tmpAsteroid.y + (y * cosine + x * sine);
                              | 
                              | tmpAsteroidB.x = tmpAsteroid.x + (xB * cosine - yB * sine);
                              | tmpAsteroidB.y = tmpAsteroid.y + (yB * cosine + xB * sine);
                              | 
                              | tmpAsteroid.vX = vX * cosine - vY * sine;
                              | tmpAsteroid.vY = vY * cosine + vX * sine;
                              | 
                              | tmpAsteroidB.vX = vXb * cosine - vYb * sine;
                              | tmpAsteroidB.vY = vYb * cosine + vXb * sine;
                            p これで完成です。ページをリフレッシュし、ダイナミックなアステロイドの世界を見てください。私がみなさんの立場だったら、自分を大いに誇りに思うはずです。この項だけでこれだけのことができたのですから。
                            p しかし、当たったアステロイドのサイズとは無関係に、やたらと速く跳ね返っていくアステロイドがあることに気づくかもしれません。これは、ビリヤードの2個のボールが互いに跳ね返るのと同じような効果をえるために速度を反転させているからです。ここでさらに一歩先に進み、個々のアステロイドの運動量を保存する方法を簡単に取り入れ、今よりもはるかにリアルなスピードで跳ね返るようにしましょう。
                            pre.prettyprint.linenums
                              | $(function() {  
                              |   var canvas = $('#myCanvas');
                              |   var context = canvas.get(0).getContext('2d');
                              |   
                              |   var canvasWidth = canvas.width();
                              |   var canvasHeight = canvas.height();
                              |   
                              |   $(window).resize(resizeCanvas);
                              |   
                              |   function resizeCanvas() {
                              |     canvas.attr('width', $(window).get(0).innerWidth);
                              |     canvas.attr('height', $(window).get(0).innerHeight);
                              |     
                              |     canvasWidth = canvas.width();
                              |     canvasHeight = canvas.height();
                              |   };
                              |   
                              |   resizeCanvas();
                              |   
                              |   var playAnimation = true;
                              |   
                              |   var startButton = $('#startAnimation');
                              |   var stopButton = $('#stopAnimation');
                              |   
                              |   startButton.hide();
                              |   startButton.click(function() {
                              |     $(this).hide();
                              |     stopButton.show();
                              |     
                              |     playAnimation = true;
                              |     animate();
                              |   });
                              |   
                              |   stopButton.click(function() {
                              |     $(this).hide();
                              |     startButton.show();
                              |     
                              |     playAnimation = false;
                              |   });
                              |   
                              |   var Asteroid = function(x, y, radius, vX, vY, ax, ay) {
                              |     this.x = x;
                              |     this.y = y;
                              |     this.radius = radius;
                              | 
                              |     this.vX = vX;
                              |     this.vY = vY;
                              |     this.aX = aX;
                              |     this.aY = aY;
                              |   }
                              |   
                              |   var asteroids = new Array();
                              |   
                              |   for (var i = 0; i &lt; 10; i++) {
                              |     var x = 20+(Math.random()*(canvasWidth-40));
                              |     var y = 20+(Math.random()*(canvasHeight-40));
                              |     
                              |     var radius = 5+Math.random()*10;
                              | 
                              |     var vX = Math.random()*4-2;
                              |     var vY = Math.random()*4-2;
                              | 
                              |     var aX = Math.random()*0.2-0.1;
                              |     var aY = Math.random()*0.2-0.1;
                              |     
                              |     asteroids.push(new Asteroid(x, y, radius, vX, vY, aX, aY));
                              |   }
                              | 
                              |   function animate() {          
                              | 
                              |     context.clearRect(0, 0, canvasWidth, canvasHeight);
                              |     
                              |     context.fillStyle = 'rgb(255, 255, 255)';
                              |     
                              |     var asteroidsLength = asteroids.length;
                              |     for (var i = 0; i &lt; asteroidsLength; i++) {
                              |       var tmpAsteroid = asteroids[i];
                              | 
                              |       for (var j = i+1; j &lt; asteroidsLength; j++) {
                              |         var tmpAsteroidB = asteroids[j];
                              |         
                              |         var dX = tmpAsteroidB.x - tmpAsteroid.x;
                              |         var dY = tmpAsteroidB.y - tmpAsteroid.y;
                              |         var distance = Math.sqrt((dX*dX)+(dY*dY));
                              |         
                              |         
                              |         if(distance &lt; tmpAsteroid.radius + tmpAsteroidB.radius){ 
                              |                     
                              |           var angle = Math.atan2(dY, dX);
                              |           var sine = Math.sin(angle);
                              |           var cosine = Math.cos(angle);
                              |           
                              |           var x = 0;
                              |           var y = 0;
                              |           
                              |           var xB = dX * cosine + dY * sine;
                              |           var yB = dY * cosine - dX * sine;
                              |           
                              |           var vX = tmpAsteroid.vX * cosine + tmpAsteroid.vY * sine;
                              |           var vY = tmpAsteroid.vY * cosine - tmpAsteroid.vX * sine;
                              |           
                              |           var vXb = tmpAsteroidB.vX * cosine + tmpAsteroidB.vY * sine;
                              |           var vYb = tmpAsteroidB.vY * cosine - tmpAsteroidB.vX * sine;
                              |           
                              |           vX *= -1;
                              |           vXb *= -1;
                              | 
                              |           xB = x + (tmpAsteroid.radius + tmpAsteroidB.radius);
                              |         
                              |           tmpAsteroid.x = tmpAsteroid.x + (x * cosine - y * sine);
                              |           tmpAsteroid.y = tmpAsteroid.y + (y * cosine + x * sine);
                              |           
                              |           tmpAsteroidB.x = tmpAsteroid.x + (xB * cosine - yB * sine);
                              |           tmpAsteroidB.y = tmpAsteroid.y + (yB * cosine + xB * sine);
                              |           
                              |           tmpAsteroid.vX = vX * cosine - vY * sine;
                              |           tmpAsteroid.vY = vY * cosine + vX * sine;
                              |           
                              |           tmpAsteroidB.vX = vXb * cosine - vYb * sine;
                              |           tmpAsteroidB.vY = vYb * cosine + vXb * sine;
                              |           
                              |         }
                              |       }
                              | 
                              |       tmpAsteroid.x += tmpAsteroid.vX;
                              |       tmpAsteroid.y += tmpAsteroid.vY;
                              | 
                              |       if (Math.abs(tmpAsteroid.vX) &lt; 10) {
                              |         tmpAsteroid.vX += tmpAsteroid.aX;
                              |       };
                              |       
                              |       if (Math.abs(tmpAsteroid.vY) &lt; 10) {
                              |         tmpAsteroid.vY += tmpAsteroid.aY;
                              |       };
                              | 
                              |       if (tmpAsteroid.x-tmpAsteroid.radius &lt; 0) {
                              |         tmpAsteroid.x = tmpAsteroid.radius;
                              |         tmpAsteroid.vX *= -1;
                              |         tmpAsteroid.aX *= -1;
                              |       } else if (tmpAsteroid.x+tmpAsteroid.radius &gt; canvasWidth) {
                              |         tmpAsteroid.x = canvasWidth-tmpAsteroid.radius;
                              |         tmpAsteroid.vX *= -1;
                              |         tmpAsteroid.aX *= -1;
                              |       }
                              |       
                              |       if (tmpAsteroid.y-tmpAsteroid.radius &lt; 0) {
                              |         tmpAsteroid.y = tmpAsteroid.radius;
                              |         tmpAsteroid.vY *= -1;
                              |         tmpAsteroid.aY *= -1;
                              |       } else if (tmpAsteroid.y+tmpAsteroid.radius &gt; canvasHeight) {
                              |         tmpAsteroid.y = canvasHeight-tmpAsteroid.radius;
                              |         tmpAsteroid.vY *= -1;
                              |         tmpAsteroid.aY *= -1;
                              |       }
                              | 
                              |       /*
                              |       if (Math.abs(tmpAsteroid.vX) &gt; 0.1) {
                              |         tmpAsteroid.vX *= 0.9;
                              |       } else {
                              |         tmpAsteroid.vX = 0;
                              |       };
                              |       
                              |       if (Math.abs(tmpAsteroid.vY) &gt; 0.1) {
                              |         tmpAsteroid.vY *= 0.9;
                              |       } else {
                              |         tmpAsteroid.vY = 0;
                              |       };
                              |       */
                              |       
                              |       context.beginPath();
                              |       context.arc(tmpAsteroid.x, tmpAsteroid.y, tmpAsteroid.radius, 0, Math.PI*2);
                              |       context.closePath();
                              |       context.fill();
                              |     }
                              |     
                              |     if (playAnimation) {
                              |       setTimeout(animate, 33);
                              |     }
                              |   }
                              |   animate();
                              | });
        div#footer=title
        script(src='http://code.jquery.com/jquery.js')
        script(src='js/google-code-prettify/prettify.js')
        script.
            prettyPrint();
        script(src='js/bootstrap.min.js')
        script(src='js/list-counter.js')