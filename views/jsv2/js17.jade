extends ../layout

block link
    include ../link1

block content
    include navbar
    .container
        .row
            .col-sm-3
                include left
            .col-sm-9
                .panel.panel-primary
                    .panel-heading
                        i.glyphicon.glyphicon-book
                        |  オブジェクトの拡張とオーバーライド
                    .panel-body
                        h4 動的にメソッドを追加する
                        p いったん定義したコンストラクタをnew演算子でインスタンス化した後、後からメソッドを追加することもできます。
                        pre(class='prettyprint linenums:1')
                            :code
                                var MemberClass = function(firstName, lastName){
                                    this.firstName = firstName;
                                    this.lastName = lastName;
                                };

                                var mem = new MemberClass('ようすけ','なかの');
                                mem.getName = function(){
                                    return this.lastName + ' ' + this.firstName;
                                };

                                document.writeln(mem.getName());
                        p しかしながら、memインスタンスに対してメソッドが追加されていることに注意しましょう。以下の例ではmem2に対してはgetNameメソッドは追加されていないのでエラーになります。プロトタイプベースのオブジェクト指向言語では同じオブジェクト（クラス）をインスタンス化しても常に同じメンバを持つとは限りません。
                        pre(class='prettyprint linenums:1')
                            :code
                                var MemberClass = function(firstName, lastName){
                                    this.firstName = firstName;
                                    this.lastName = lastName;
                                };

                                var mem = new MemberClass('ようすけ','なかの');
                                mem.getName = function(){
                                    return this.lastName + ' ' + this.firstName;
                                };

                                document.writeln(mem.getName());

                                var mem2 = new MemberClass('はるか','あやせ');
                                document.writeln(mem2.getName());
                        hr
                        h4 別のオブジェクトのメソッドを利用する
                        p メソッドはオブジェクト固有のものですが、callメソッドやapplyメソッドを使ってメソッドの貸し借りができます。
                        h4 callメソッド
                        p
                            a.btn.btn-default(href='https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call', target='_blank')
                                i.glyphicon.glyphicon-info-sign
                                | 参考: call
                        p 借りたメソッドに引数がない場合は以下のようになります。
                        pre(class='prettyprint linenums:1')
                            :code
                                var obj1 = {
                                    name: 'よしお',
                                    greet: function(){
                                        console.log(this.name + 'です、はじめまして');
                                    }
                                };

                                var obj2 = {
                                    name: 'ユリ子'
                                };

                                obj.greet.call(obj2); //=> obj2がobjのgreetメソッド借りて実行しています。
                        p 借りたメソッドに引数がある場合は、callメソッドの2つ目移行の引数に順番に指定します。
                        pre(class='prettyprint linenums:1')
                            :code
                                var obj1 = {
                                    name: 'よしお',
                                    greet: function(age, from){
                                        console.log(this.name + 'です、はじめまして');
                                        console.log('年齢は' + age + 'です');
                                        console.log('出身地は' + from + 'です');
                                    }
                                };

                                var obj2 = {
                                    name: 'ユリ子'
                                };

                                obj1.greet.call(obj2, 6, 'アメリカ');
                        h4 apllyメソッド
                        p applyメソッドはcallメソッドと使い方はほとんど同じですが、借りたメソッドに引数がある場合、引数を配列にまとめて渡します。
                        p
                            a.btn.btn-default(href='https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply', target='_blank')
                                i.glyphicon.glyphicon-info-sign
                                | 参考: apply
                        pre(class='prettyprint linenums:1')
                            :code
                                var obj1 = {
                                    name: 'よしお',
                                    greet: function(age, from){
                                        console.log(this.name + 'です、はじめまして');
                                        console.log('年齢は' + age + 'です');
                                        console.log('出身地は' + from + 'です');
                                        }
                                };

                                var obj2 = {
                                    name: 'ユリ子'
                                };

                                var param = [6, 'アメリカ'];
                                obj1.greet.apply(obj2, param);
                        hr
                        h4 callメソッドで継承
                        p JavaScriptではクラスベースのオブジェクト指向言語の継承の仕組みはありませんが、callメソッドを使って継承に近い働きをさせることができます。これは継承元のオブジェクト（スーパークラス）の機能をそのままコピーしているわけではなく、prototypeという仕組みによって実現されてます。
                        pre.
                            function コンストラクタ(引数){
                                継承するコンストラクタ.call(this, 引数);
                                ...処理を記述...
                            }
                        pre(class='prettyprint linenums:1')
                            :code
                                //スーパークラス
                                function SeisekiClass(name){
                                    this.name = name;

                                    this.setTensu = function(a, b, c, d, e){
                                        this.kokugo = a;
                                        this.sansu = b;
                                        this.rika = c;
                                        this.syakai = d;
                                        this.eigo = e;
                                    };

                                    this.goukei = function(){
                                        var total = 0;
                                        total += this.kokugo;
                                        total += this.sansu;
                                        total += this.rika;
                                        total += this.syakai;
                                        total += this.eigo;
                                        return total;
                                    };

                                    this.heikin = function(){
                                        var total = this.goukei();
                                        return total / 5;
                                    };

                                    this.showMsg = function(){
                                        var msg = this.name + 'さんの成績\n';
                                        msg += '合計：' + this.goukei() + '\n';
                                        msg += '平均：' + this.heikin();
                                        alert(msg);
                                    };
                                }

                                //サブクラス
                                function PowerSeisekiClass(name){
                                    SeisekiClass.call(this, name);

                                    this.showMsg = function(){
                                        var msg = name + 'さんの成績\n';
                                        msg += '国語: ' + this.kokugo + '\n';
                                        msg += '算数: ' + this.sansu + '\n';
                                        msg += '理科: ' + this.rika + '\n';
                                        msg += '社会: ' + this.syakai + '\n';
                                        msg += '英語: ' + this.eigo + '\n';
                                        msg += '合計: ' + this.goukei() + '\n';
                                        msg += '平均: ' + this.heikin() + '\n';
                                        alert(msg)
                                    };
                                }

                                var taro = new PowerSeisekiClass('太郎');
                                taro.setTensu(75, 58, 69, 81, 47);
                                taro.showMsg();
                        hr
                        h4 オーバーライド
                        p JavaScriptでは、callメソッドを使うことで、オブエジェクト指向言語でいうオーバーライドに似た働きをすることができます。継承元のオブジェクト（スーパークラス）に含まれるメソッドと全く同じメソッドを、利用するオブジェクト（サブクラス）でも定義すると、新たに定義したメソッドに上書きされます。
                        pre(class='prettyprint linenums:1')
                            :code
                                //スーパークラス
                                function SeisekiClass(name){
                                    this.name = name;

                                    this.setTensu = function(a, b, c, d, e){
                                        this.kokugo = a;
                                        this.sansu = b;
                                        this.rika = c;
                                        this.syakai = d;
                                        this.eigo = e;
                                    };

                                    this.goukei = function(){
                                        var total = 0;
                                        total += this.kokugo;
                                        total += this.sansu;
                                        total += this.rika;
                                        total += this.syakai;
                                        total += this.eigo;
                                        return total;
                                    };

                                    this.heikin = function(){
                                        var total = this.goukei();
                                        return total / 5;
                                    };

                                    this.showMsg = function(){
                                        var msg = this.name + 'さんの成績\n';
                                        msg += '合計：' + this.goukei() + '\n';
                                        msg += '平均：' + this.heikin();
                                        alert(msg);
                                    };
                                }

                                //サブクラス
                                function PowerSeisekiClass(name){
                                    SeisekiClass.call(this, name);

                                    this.showMsg = function(){
                                        var msg = name + 'さんの成績\n';
                                        msg += '国語: ' + this.kokugo + '\n';
                                        msg += '算数: ' + this.sansu + '\n';
                                        msg += '理科: ' + this.rika + '\n';
                                        msg += '社会: ' + this.syakai + '\n';
                                        msg += '英語: ' + this.eigo + '\n';
                                        msg += '合計: ' + this.goukei() + '\n';
                                        msg += '平均: ' + this.heikin() + '\n';
                                        alert(msg);
                                    };
                                }

                                var taro = new PowerSeisekiClass('太郎');
                                taro.setTensu(75, 58, 69, 81, 47);
                                taro.showMsg();

                        p 以下のようにshowMsgメソッドを定義した後でcallメソッドを記述すると、再度スーパークラスのshowMsgメソッドに上書きされるので意味がありません。
                        pre(class='prettyprint linenums:1')
                            :code
                                //サブクラス
                                function PowerSeisekiClass(name){

                                    this.showMsg = function(){
                                        var msg = name + 'さんの成績\n';
                                        msg += '国語: ' + this.kokugo + '\n';
                                        msg += '算数: ' + this.sansu + '\n';
                                        msg += '理科: ' + this.rika + '\n';
                                        msg += '社会: ' + this.syakai + '\n';
                                        msg += '英語: ' + this.eigo + '\n';
                                        msg += '合計: ' + this.goukei() + '\n';
                                        msg += '平均: ' + this.heikin() + '\n';
                                        alert(msg);
                                    };

                                    SeisekiClass.call(this, name);
                                }

                                var taro = new PowerSeisekiClass('太郎');
                                taro.setTensu(75, 58, 69, 81, 47);
                                taro.showMsg();