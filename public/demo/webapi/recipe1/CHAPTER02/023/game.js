// enchant.js本体やクラスをエクスポートする
enchant();

// コインを作成するクラス
var Coin = enchant.Class.create(enchant.Sprite, {
  initialize: function(x, y) {
    enchant.Sprite.call(this, 32, 32);
    this.x = x;
    this.y = y;
    this.image = core.assets['piece.png'];
    this.tick = 0;
    // アニメーションパターン
    this.anime = [8, 9, 10, 11];
    // アニメーション表示する処理
    this.addEventListener('enterframe', function() {
      if (this.tick <= 8) {
        this.frame = this.tick;
      } else {
        this.frame = this.anime[this.tick % 4];
      }
      this.tick++;
    });
  }
});

// プレイヤーキャラクターを作成するクラス
// 「Sprite」クラスを継承
var Player = enchant.Class.create(enchant.Sprite, {
  initialize: function(x, y, map) {
    // 「Sprite」クラスのコンストラクタをコール
    enchant.Sprite.call(this, 48, 48);
    
    // スプライトで表示する画像を設定する
    this.image = core.assets['betty.png'];
    // 表示するフレームの番号を設定する
    this.frame = 3;
    // 表示位置のx座標を設定する
    this.x = x;
    // 表示位置のy座標を設定する
    this.y = y;
    // フレーム数をカウントするプロパティを追加する
    this.tick = 0;
    // プレイヤーのHP(ヒットポイント)を格納するプロパティを追加する
    this.hp = 1000;

    // 「enterframe」イベントが発生したときに実行するリスナを登録する
    this.addEventListener('enterframe', function(e) {

      // 左ボタンが押されたら、スプライトをx方向に「-4」ピクセル移動する
      if (core.input.left) {
        this.x -= 4
        // マップ上に当たり判定がある場合は移動しない
        if(map.hitTest(this.x + 16, this.y + 40)) this.x += 4;
        // スプライトのフレーム番号を切り替えてアニメーション表示する
        this.frame = this.tick % 4 * 4 + 1;
        // フレーム数をインクリメントする
        this.tick ++;
      }

      // 右ボタンが押されたら、スプライトをx方向に「4」ピクセル移動する
      if (core.input.right) {
        this.x += 4;
        if(map.hitTest(this.x + 24 , this.y + 40)) this.x -= 4;
        this.frame = this.tick % 4 * 4 + 3;
        this.tick ++;
      }

      // 上ボタンが押されたら、スプライトをy方向に「-4」ピクセル移動する
      if (core.input.up) {
        this.y -= 4;
        if(map.hitTest(this.x + 24, this.y + 40)) this.y += 4;
        this.frame = this.tick % 4 * 4 + 2;
        this.tick ++;
      }

      // 下ボタンが押されたら、スプライトをy方向に「4」ピクセル移動する 
      if (core.input.down) {
        this.y += 4;
        if(map.hitTest(this.x + 24, this.y + 40)) this.y -= 4;
        this.frame = this.tick % 4 * 4;
        this.tick ++;
      }
      
    });

    // 「touchmove」イベントが発生したときに実行するリスナを登録する
    this.addEventListener('touchmove', function(e) {
      // スプライトをタッチして移動した場所、またはドラッグした場所に移動する
      this.x = e.x - this.width / 2;
      this.y = e.y - this.height / 2;
    });

   }
});

// ページが読み込まれたときに実行される関数
window.onload = function() {

  // コアオブジェクトを作成する
  core = new Core(320, 320);
  
  // 1秒あたりの画面の描画回数を設定する(省略時は「30」)
  core.fps = 16;
  
  
  // スコアを保持するプロパティを追加する
  core.score = 0;
 
  // 経過時間を保持するプロパティを追加する
  core.time = 0;

  // ライフを保持するプロパティを追加する
  core.life = 3;
  
  // ゲームで使用する画像ファイル、サウンドファイルを読み込む
  // mp3形式のサウンドファイルはプリロードする(FireFox,Safari対応)
  core.preload('betty.png', 'map1.png',  'piece.png', 'flowers.png', 'one_0.mp3');

  // BGM用のサウンドファイルを読み込む
  core.bgm = Sound.load('one_0.mp3');
  // SE用のサウンドファイルを読み込む
  core.se = Sound.load('Ready.wav');

  // ファイルのプリロードが完了したときに実行される関数
  core.onload = function() {
 
    // BGMのボリュームを設定する(0~1)
    core.bgm.volume = 0.5;
    // BGMを再生する
    core.bgm.play();
    // SEを再生する
    core.se.play();
 
    // マップを作成する
    var map = new Map(16, 16);
    // マップで使用するタイルセット画像を設定する
    map.image = core.assets['map1.png'];
    
    // マップデータ(タイルの並びを表す2次元配列)
    map.loadData([
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,83,84,84,84,84,84,84,84,84,84,84,84],
      [1,1,1,1,1,1,1,1,99,100,116,116,116,116,116,116,116,116,116,116],
      [1,1,1,1,1,16,17,18,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,32,33,34,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,48,49,50,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,20,20,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,16,18,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,48,50,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1]
    ],
    [
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,23,23,23,23,23,-1,-1,-1],
      [-1,23,23,23,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1],
      [-1,-1,-1,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1],
      [-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
    ]);
    // マップの当たり判定データ(タイルが当たり判定を持つかを表す2次元配列)
    map.collisionData = [
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0],
      [0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ]
 
    // rootSceneにマップを追加する
    core.rootScene.addChild(map);

 /*   
    // サーフィスを作成する
    var image = new Surface(320, 320);
    // 「flowers.png」の(0, 96)の位置から幅「126」ピクセル、高さ「64」ピクセルの領域を
    // サーフィスの(64, 64)の位置に幅「126」ピクセル、高さ「64」ピクセルで描画する
    image.draw(core.assets['flowers.png'], 0, 96, 126, 64, 64, 64, 126, 64);
    
    // サーフィスを表示するためのスプライトを作成する
    var bg = new Sprite(320, 320);
    // スプライトにサーフィスを設定する
    bg.image = image;
    
    core.rootScene.addChild(bg);
*/   
 
    // トラップのスプライトを作成する
    var trap = new Sprite(16, 16);
    trap.image = core.assets['map1.png'];
    trap.frame = 43;
    trap.x = 136;
    trap.y = 152;
    core.rootScene.addChild(trap);
    
    // プレイヤーのスプライトを作成する
    // 引数は、x座標、y座標、マップオブジェクト
    var player = new Player(120, 50, map);
    // rootSceneにプレイヤーのスプライトを追加する
    core.rootScene.addChild(player);

    // rootSceneの「enterframe」イベントが発生したときに実行するリスナ
    core.rootScene.addEventListener('enterframe', function(e) {
      // プレイヤーのx座標が「300」以上なら、シーンを切り替える
      if (player.x > 300) {
        core.pushScene(core.field(player.x, player.y));
        // pop時のためにx座標を少し戻しておく
        player.x = 280;
      }
      
      //  トラップに当たったら、
      if (player.within(trap, 30)) {
        // ライフを1つ減らして、表示を更新する
        lifeLabel.life = -- core.life;
        
        // プレイヤーは初期位置に移動する
        player.x = 120;
        player.y = 50;
        // 点滅表示する
        player.tl.fadeOut(1).fadeIn(5).fadeOut(1).fadeIn(5);
        
        if (core.life == 0) {
          // 30フレームでフェードアウトしながら回転、縮小する
          player.tl.rotateBy(360, 30)
                   .and().fadeOut(30)
                   .and().scaleTo(0.2, 30, enchant.Easing.BOUNCE_EASEOUT)
                   // 10フレーム後にゲームオーバー画面を表示する
                   .cue({10: function(){
                         // ゲームオーバー
                         core.end();
                         // 9leapのデータベースに保存する場合は、以下のように記述する
                         // core.end(score, result);
                       }});
        } 
      }
    });

    // ラベルを作成する
    var infoLabel = new Label('enchant.js サンプル');
    // 表示位置のx座標を設定する
    infoLabel.x = 16;
    // 表示位置のy座標を設定する
    infoLabel.y = 0;
    // 文字色を設定する
    infoLabel.color = '#0000FF';
    // フォントサイズとフォントの種類を指定する
    infoLabel.font ='14px sens-serif';
    
    // rootSceneにラベルを追加する
    core.rootScene.addChild(infoLabel);


    // ライフをアイコンで表示するラベルを作成する
    // 引数はラベル表示位置のxy座標とライフ数の初期値  
    var lifeLabel = new LifeLabel(180, 0, core.life);
    // rootSceneにライフラベルを追加する
    core.rootScene.addChild(lifeLabel);
    
    // バーチャルパッドを作成する
    var pad = new Pad();
    pad.x = 220; // 表示位置のx座標を設定する
    pad.y = 220; // 表示位置のy座標を設定する
    // rootSceneにバーチャルパッドをを追加する
    core.rootScene.addChild(pad);

  }
  
  core.field = function(px, py){
    
    var scene = new Scene();
    
    // マップを作成する
    var map = new Map(16, 16);
    map.image = core.assets['map1.png'];
    map.loadData([
      [37,37,37,37,37,37,37,37,37,19,19,19,32,33,33,33,33,33,33,33],
      [37,37,37,37,37,37,37,37,37,20,20,20,48,49,49,49,49,49,49,49],
      [37,37,23,23,23,23,23,23,23,23,7,37,37,37,37,37,37,37,37,37],
      [84,84,84,84,84,84,84,84,84,84,7,37,37,37,37,37,37,37,37,37],
      [116,116,116,116,116,116,116,116,100,100,7,37,37,20,37,37,37,37,37,37],
      [37,37,23,23,23,23,23,7,100,100,7,37,37,37,37,37,37,37,37,37],
      [37,37,37,37,37,37,37,7,100,100,7,37,37,37,37,37,37,37,37,37],
      [37,37,37,37,37,37,37,7,100,100,7,37,37,37,37,37,37,37,37,37],
      [37,37,37,37,37,37,37,7,100,100,7,37,37,37,37,37,37,37,37,37],
      [37,37,37,37,37,37,37,7,100,100,23,23,23,23,23,23,23,23,37,37],
      [37,37,37,37,37,37,37,7,100,100,84,84,84,84,84,84,84,84,84,84],
      [37,37,37,23,23,23,23,23,100,100,116,116,116,116,116,116,116,116,116,116],
      [37,37,37,37,37,37,37,37,100,100,37,37,37,37,37,37,37,37,37,37],
      [37,37,37,37,37,37,37,37,100,100,37,37,37,37,37,37,37,37,37,37],
      [37,37,23,23,23,23,23,7,100,100,37,37,37,37,37,37,37,37,37,37],
      [37,37,37,37,37,37,37,7,100,100,37,37,37,37,37,37,37,37,37,37],
      [37,37,37,37,37,37,37,7,100,100,37,37,37,37,37,37,37,37,37,37],
      [37,37,37,37,37,37,37,7,100,100,37,37,37,37,37,37,37,37,37,37],
      [37,37,37,37,37,37,37,23,100,100,37,37,37,37,37,37,37,37,37,37],
      [37,37,37,37,37,37,37,37,100,100,37,37,37,37,37,37,37,37,37,37]
    ]);
    
    map.collisionData = [
      [0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
      [0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1],
      [0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
      [0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0],
      [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ];
    
    // シーンにマップを追加する
    scene.addChild(map);

    // コイン生成処理
    var coins = [];
    for (var i = 0; i < 10; i++) {
      var coin = new Coin(128, 80 + 16 *i);
      scene.addChild(coin);
      coins[i] = coin;
    }
    
   // プレイヤーキャラを作成する
    var player = new Player(0, py, map);
    // シーンにプレイヤーのスプライトを追加する
    scene.addChild(player);

    // シーンの「enterframe」イベントが発生したときに実行するリスナ
    scene.addEventListener('enterframe', function(e) {
      // 「core.time」プロパティに「timeLabel.time」プロパティを代入する
      core.time = timeLabel.time;
      // プレイヤーキャラのx座標が「-20」以下なら、前のシーンに切り替える
      if (player.x < -20) core.popScene();
      // プレイヤーキャラとコインの当たり判定
      for (var i in coins) {
        if (player.within(coins[i], 16)) {
          // コインを取ったスコアを加算して更新する
          core.score = scoreLabel.score += 100;
          // 取ったコインを削除する
          scene.removeChild(coins[i]);
          delete coins[i];
         }
      }
    });
    
    // スコアをフォントで表示するラベルを作成する
    // 引数はラベル表示位置のxy座標
    var scoreLabel = new ScoreLabel(16, 0);
    // 初期値セット
    scoreLabel.score = core.score;
    // シーンにラベルを追加する
    scene.addChild(scoreLabel);

    // 経過時間をフォントで表示するラベルを作成する
    var timeLabel = new TimeLabel(16, 304);
    // 初期値セット
    timeLabel.time = core.time;
    // シーンにラベルを追加する
    scene.addChild(timeLabel);
    
    // バーチャルパッドを作成する
    var pad = new Pad();
    pad.x = 220;
    pad.y = 220;
    // シーンにバーチャルパッドを追加する
    scene.addChild(pad);

    return scene;
  }

  // ゲームスタート
  core.start();
}
