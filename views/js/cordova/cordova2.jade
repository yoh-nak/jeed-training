include ../../head3.jade
    body
    include navbar.jade
    .container
      .row
        .col-sm-3
          include left.jade
        .col-sm-9
          .panel.panel-primary
            .panel-heading Cordovaを用いた開発環境の構築する
            .panel-body
                p Cordovaでは従来から、iOSやAndroidなどの各種プラットフォーム向けネイティブコードによる実行時のフレームワークを提供しています。Cordovaで開発したハイブリッドアプリがモバイル端末内で動作するときには、このフレームワークも同時に動いています。ここでは、このフレームワークをCordovaフレームワークと呼びます。
                p Cordova3.0から、Cordovaフレームワークとは別に、Cordovaを用いたアプリのプロジェクトを管理するためにNode.js製のコマンドラインツールが導入されるようになりました。Node.jsは非同期I/Oを特徴とするJavaScript処理系です。JavaScriptエンジンとして、Chromeがオープンソースで公開しているV8を利用しています。
                p Cordovaが提供するコマンドラインツールは、Cordovaフレームワークを用いたアプリのプロジェクトの作成・管理に利用されます。このツールをインストールすると、ターミナルでcordovaコマンドが利用できるようになります。開発者はcordovaコマンドによって開発したいアプリのプロジェクトのひな形を生成できます。AndroidとiOSなど、複数のプラットフォームに向けたアプリを開発する際にワンソースでクロスプラットフォームな構成のプロジェクトをcordovaコマンドで作成することができます。
                p 従来は、開発者は手動でCordovaフレームワークをプラットフォームごとのプロジェクトにセットアップする必要がありましたが、このコマンドラインツールにより、すばやくプロジェクトを作成して開発を始められるようになりました。また、各プラットフォーム用のプロジェクトは開発者が手動で作成する必要がありましたが、cordovaコマンドを用いることですばやくかくプラットフォームに対応するプロジェクトをセットアップできます。
                p 本書では、Cordovaが提供するNode.jsのコマンドラインツールをcordovaコマンド、各プラットフォームのOSで実行時に動作するフレームワークをCordovaフレームワークと呼びます。
                .alert.alert-info Node.jsのインストール
                p cordovaコマンドを導入するため、まずNode.jsをインストールします。下記URLからNode.jsのWebサイトにアクセスし、その表示に従って開発マシンにNode.jsをインストールしてください。
                ul
                    li URL Node.js<br><a href="http://nodejs.org/" target="_blank">http://nodejs.org</a>
                p Node.jsをインストールすると、Node.jsのパッケージマネージャーであるnpmも同時にインストールされます。ターミナルを開き、下記のようにしてNode.jsとnpmがインストールされているかどうかを確認してください。成功すれば、Node.jsとnpmのバージョンが表示されます。
                pre
                    :code
                        $ node -v
                        v0.10.2

                        $ npm -v
                        1.2.32
                p 開発者はnpmを通じて、Node.jsの様々なライブラリやツールをインストールすることができます。Cordovaのコマンドラインツールもこのnpmを用いてインストールします。
                .alert.alert-info cordovaのコマンドラインツールをインストールする
                p npmがインストールできたら、Cordovaのコマンドラインツールインターフェースであるcordovaコマンドを、npmを通じてインストールします。ターミナルを開いて、以下のようにnpmコマンドを実行してください。
                pre
                    :code
                        $ npm install cordova -g
                p 依存するライブラリがインストールされるので、完了するまで数分待ちます。インストールされたら、バージョンを確認して正しく起動できるかどうかを確かめてください。npm installコマンドに-gオプションを付けるのを忘れないでください。-gオプションは、そのマシンのグローバルな領域にインストールするという意味です。
                p また、LinuxやMac OS X環境で「npm ERR! Please try running this command again as root/Administrator.」と表示された場合は、以下のようにnpmコマンドの前にsudoコマンドを付けて管理者権限で実行してください。
                pre
                    :code
                        $ sudo npm install cordova -g
                p インストールしたら、バージョンを確認して起動できるかどうかを確かめてください。
                pre
                    :code
                        $ cordova -v
                        3.0.6
                p cordovaコマンドは、Android SDKに含まれているコマンドを内部で利用するため、Android SDKに含まれているディレクトリにパスを通す必要があります。Androd向けアプリを開発する際には、あらかじめ次のように（Android SDKを展開したディレクトリ）/sdk/tools/と/sdk/platform-toolsディレクトリにパスを追加します。ここでは、Mac OS Xのターミナルにおいてデフォルトで利用されているBashの設定ファイルである.bash_profile以下にパスを追加しています。
                p 以下のように環境に応じてパスを設定してください。
                pre
                    :code
                        $ echo "export PATH=$PATH:path/to/adt-bundle-max-x86_64-20130729/sdk/tools/" \
                          >> ~/.bash_profile
                        $ echo "export \
                          >> PATH=$PATH:path/to/adt-bundle-mac-x86_64-20130729/sdk/platform-tools/" \
                          >> ~/.bash_profile

                        $ source ~/.bash_profile
                p Android SDKのパスを追加したら、ターミナルからandroidコマンドとadbコマンドが実行できることを確認して下さい。
                pre
                    :code
                        $ android -h

                          Usage:
                          android [global options] action [action options]
                          Global options:
                          （以下略）

                        $ adb version
                        Android Debug Bridge version 1.0.31
                p 一度.bash_profile以下にPATHを設定すると、次回のターミナル実行時からはこの手順は不要になります。
                .alert.alert-info プロジェクトを作成する
                p cordovaコマンドのインストールが完了したら、次はcordovaコマンドを用いたプロジェクトを作成します。AndroidとiOSの開発ができるプロジェクトを作成します。cordova createコマンドを用いて以下のようにプロジェクトを作成します。
                pre
                    :code
                        $ cordova create hello com.example.hello HelloWorld -d
                p このコマンドは、helloディレクトリ以下にアプリの識別子としてcom.example.helloを持つ「HelloWorld」という名前のアプリのプロジェクトを作成します。-dオプションは、cordovaコマンド実行中の途中経過を表示するオプションです。
                p 次に、プロジェクトにAndroidとiOS用のファイルを追加します。以下のようにhelloディレクトリ以下に移動してcordova platformコマンドを実行します。iOSとAndroid用のプロジェクトファイルが追加されます。
                pre
                    :code
                        $ cd hello

                        $ cordova platform add ios
                        $ cordova platform add android
                p このコマンドを実行すると、iOSのためのXcodeプロジェクトが生成されます。本書では解説しませんが、webOSやWindows Phoneなどの他のプラットフォームもこのコマンドで追加できます。
                p プロジェクトが現在どのようなプラットフォームに向けて開発されているのかを知るにはcordova platform lsコマンドを実行します。
                pre
                    :code
                        $ cordova platform ls
                        ["ios"]
                p プラットフォームから外すには、次のようにcordova platform removeコマンドを用います。
                pre
                    :code
                        $ cordova platform remove ios
                .alert.alert-info Android向けのコンポーネントをインストールする
                p 対応プラットフォームにAndroidを追加すると、次のようなエラーが出る場合があります。
                pre
                    :code
                        $ cordova platform add android
                        [Error: Please install Android target 17 (the android 4.2 SKD). Make sure you have the latest Android tools installed as well. Run `android` from your command-line to install/update any missing SDKs or tools.]
                p この場合には、Android SDK Managerを起動して、エラーメッセージに該当するパッケージをインストールします。以下のようにandroidコマンドを実行すると、Android SDK Managerが立ち上がります。エラーメッセージ中に記述されているAndroid 4.2.2 SDKをインストールします。
                pre
                    :code
                        $ android
                p Android 4.2.2関連のコンポーネントにチェックを入れて、[Install Packages]ボタンを押します。すると、インストールコンポーネントのライセンスを確認する画面に移動します。すべてのコンポーネントのライセンスを確認して[Accept]にチェックを入れます。[Install]ボタンを押すと、インストールが始まります。しばらくしてAndroid SDK Managerの該当するコンポーネントの横に、インストールされている旨が表示されればインストールは完了です。完了後、再びcordova platform add androidコマンドを実行します。
                pre
                    :code
                        $ cordova platform add android
                .alert.alert-info プロジェクト構造を確認する
                p ここでいったんプロジェクトのディレクトリ構造を確認します。cordovaコマンドで作成したプロジェクトのディレクトリ構造は以下のようになります。
                pre
                    :code
                        hello/
                            .cordova   -> cordovaプロジェクト設定ファイルが格納されている
                            www        -> HTML5リソースやアプリ設定に関するファイル
                            platform   -> 各プラットフォーム特有のプロジェクトファイルが記述されている
                            merges     -> 各プラットフォーム特有のリソース
                                          wwwディレクトリがプラットフォームごとにコンパイルされる際にマージされる
                            plugins    -> Cordovaプラグインが格納されています
                p .cordovaディレクトリには、cordovaコマンドで作成したプロジェクト自体の設定が格納されます。例えば、cordova createコマンドの実行時に指定したアプリ名やアプリの識別子の情報は、このディレクトリのconfig.jsonに保管されます。cordovaコマンドは、この.cordovaディレクトリでプロジェクトを識別します。プロジェクトのサブディレクトリ以下ではcordovaコマンドを用いてプロジェクトを編集することもでき、cordovaコマンドの内部では親ディレクトリをたどって.cordovaディレクトリを探して識別します。
                p wwwディレクトリには、HTML5で記述したアプリのコードや、Cordovaフレームワークが設定ファイルとして利用するXMLファイルなどが含まれています。ハイブリッドアプリ開発者は、主にこのwwwディレクトリ以下にHTMLやCSS、JavaScriptを記述してアプリを開発することになります。
                p platformディレクトリ以下には、あるモバイルプラットフォーム特有のファイルが作成されます。例えば、Androidの場合にはAndroidアプリを作成するためのantプロジェクトが生成され、iOSの場合にはXcodeプロジェクトが生成されます。開発者は、プラットフォーム特有のカスタマイズをしたい場合、platformディレクトリ以下のファイルを編集します。
                p mergeディレクトリには、プラットフォーム特有のHTML5リソースを配置します。例えば、Androidプラットフォームだけで用いたい画像やJavaScriptをmerges/androidディレクトリ以下に配置します。アプリで利用するリソースがプラットフォームごとに違っていたり、完全にワンソースでマルチプラットフォーム対応するのが難しかったりする場合などに利用されます。
                p pluginsディレクトリ以下は、Cordovaで利用するプラグインやその設定ファイルを格納する場所です。Cordovaでは、ネイティブ機能へのアクセスをプラグインという形で管理しています。必要なネイティブ機能を使いたい場合には、該当するプラグインをプロジェクトに導入します。

            //-
                .alert.alert-info 物理とは何か
                p 一言で言えば、物理学はものとエネルギーを探求する自然科学です。具体的には、物理学は自然世界のメカニズムに注目し、ものが実際に動いているように動く理由、仕組みを理解しようとします。みなさんが今関心を持っているのは、物理学の中でもものの動きに直接関係している分野であり、ものの動きに影響を及ぼすさまざまなものです。物理学には、ほかにも探求すべき分野が無数にありますが、お互いのために、今日のところは基礎だけを見ていくことにしましょう。
                hr
                .alert.alert-info 物理がアニメーションで役に立つのはなぜか
                p 当たり前といえば当たり前のことですが、物理が理解できていれば、よりリアルでダイナミックなアニメーションを作れるようになります。速度や加速度の概念を応用するのであれ、あらゆるタイプの反発力を考慮に入れた本格的なシステムを作るのであれ、物理を学べば、アニメーションの可能性が大きく広がります。物理の概念が優れたアニメーションを作り出すということは、単に私が信じているというだけのことではありません。ゲームのデータや可視化からマンガ、映画に至るまで、あらゆるアニメーションで、物理概念の有用性は試され、実証されているのです。
                hr
                .alert.alert-info いくつかの基本用語について
                p 複雑な概念のなかで使われる基本的な用語や単位を意識することは、物理を理解する上で重要です。実際にこれらの概念をすべて使うというわけではありませんが、知識を持っているだけでも、よいスタートを切れます。
                .well.well-sm 力
                p 押したり引いたりというものへの作用のことです。ものがスピード、移動方向、形などを変える原因になります。力には度合い（大きさ）と向きがあるので、ベクトルとして可視化できます。力の単位はニュートン（N）です。
                .well.well-sm ベクトル
                p 力のように大きさと向きを持つもののことです。ベクトルは原点からデスティネーションまでを結ぶ直線によってグラフィカルに表現できます。長さはベクトルの大きさを表します。そして、移動の向きを表すために、一般に矢印が使われます。
                .well.well-sm 質量
                p 力によって加速がつくことに対する抵抗のことです。慣性とも呼ばれます。質量は、力がものに作用するときに生じる加速度の大きさに直接的な影響を与えます。たとえば、質量の異なる2つのものに対して同じ力を作用させると、質量が小さいものよりも質量が大きいものの方が加速度がつきません。質量の単位はキログラム（kg）です。
                .well.well-sm 重量
                p ものの質量がほかのものの引力によって影響を受けたときに発生する力です。ものを重く感じるもとがこれです。重量は、ものの質量に引力を掛けて計算します。地球上のものが宇宙空間の同じものよりも重いのはそのためです。宇宙空間では、地球上と比べてかかってくる引力ははるかに小さくなります。地球上では、重量は質量の単位（kg）で表現されますが、本来なら力の単位（N）で表現すべきものです。
                .well.well-sm 摩擦
                p ものが別のものの表面を移動するときにその移動を阻止しようとする力です。氷の上の方がカーペットなどのものの上より滑りやすいのは、摩擦力の差のためです。
                .well.well-sm 速度
                p ものが移動する向きと速さです。速度はベクトルであり、通常はメートル/秒（m/s）を単位として向き（たとえば西）を付け加えた形で表現されます。平均速度は、ものの速さを経過時間で割って計算します。
                .well.well-sm 速さ
                p 速度の大きさでもあり、ものが時間あたりどれだけの距離を移動したかを表します。速さは向きのない（スカラー）であり、通常はメートル/秒（m/s）、キロメートル/時間（km/h）、マイル/時間（mph）で表現されます。平均の速さは、ものが移動した距離を移動にかかった時間で割ると計算できます。
                .well.well-sm 加速度
                p
                    | 加速度は、時間の経過とともにものの速度（大きさと向きの両方）が変化する割合です。一般的に、加速度という言葉は速度が上がって行くときに使い、速度が下がっていくときには減速度という言葉を使います。ものには速さがあっても加速度がないという状態があり得ます。加速度は、ものの直前の速度との割合だからです。たとえば、ものが一定の速度で移動しているときには、加速している（だんだん速くなっている）わけではありませんが、速さはあります。加速度はベクトルであり、メートル/秒/秒（m/s
                    span(style='vertical-align:super;') 2
                    | ）によって表されます。加速度はニュートンの運動の第2法則によって計算されます。
                hr
                .alert.alert-info ニュートンの運動法則
                p アイザック・ニュートンという天才は、3つの単純な法則でものの動きを表現できればすばらしいだろうと考えました。これらの法則を使えば、力がものの動きに与える影響を計算できます。自然でダイナミックなアニメーションを作りたいときには、この3つの法則がとても役に立ちます。ありがとう、ニュートン。
                .well.well-sm 第1法則
                p ものに作用している力がなければ、ものは一定の速度で直線上を移動します。ものが静止している場合は、そのまま静止し続けます。つまり、ものが動くのは、外からの力が作用したときだけです。
                .well.well-sm 第2法則
                p 質量をもつものに力を作用させると、力が同じ方向に、力に比例し、質量に反比例する大きさで加速度がつきます。これは、有名なF=maという方程式によって表現されます。力は質量と加速度の積に等しいということです。この方程式は、質量や加速度の計算にも使えます。
                .well.well-sm 第3法則
                p すべての作用には、同じ大きさで向きが逆の反作用があります。聞いたことがありますか?おそらく、これはニュートンの3つの法則の中でももっとも有名なものでしょう。これは、ものAが別のものBに力を作用させると、ものBが同じ大きさで逆向きの力をものAに作用させるということです。だからと言って、2つのものが同じように加速していくわけではありません。ニュートンの第2法則ですでに明らかなように、同じように加速するのは、2つのものの質量が同じときだけです。
                                
    #footer
    script(src='http://code.jquery.com/jquery-1.10.2.min.js')
    script(src='js/bootstrap.min.js')
