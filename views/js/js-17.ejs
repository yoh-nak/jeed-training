<%- include ../head %>
  <body>
 
    <%- include navbar %>

    <div class="container">
      <div class="row">
        <div class="col-sm-3">

        <%- include left %>

        </div>
        <div class="col-sm-9">
          <div class="panel panel-primary">
          <div class="panel-heading">
            <i class="glyphicon glyphicon-book"></i> オブジェクトの拡張とオーバーライド</div>
          <div class="panel-body">
<h4>動的にメソッドを追加する</h4>
<p>いったん定義したコンストラクタをnew演算子でインスタンス化した後、後からメソッドを追加することもできます。</p>
<pre class="prettyprint">
var MemberClass = function(firstName, lastName){
  this.firstName = firstName;
  this.lastName = lastName;
};

var men = new MemberClass('洋介','中野');
mem.getName = function(){
  return this.lastName + ' ' + this.firstName;
};

document.writeln(mem.getName());
</pre>

<p>しかしながら、memインスタンスに対してメソッドが追加されていることに注意しましょう。以下の例ではmem2に対してはgetNameメソッドは追加されていないのでエラーになります。プロトタイプベースのオブジェクト指向言語では同じオブジェクト（クラス）をインスタンス化しても常に同じメンバを持つとは限りません。</p>
<pre>
var MemberClass = function(firstName, lastName){
  this.firstName = firstName;
  this.lastName = lastName;
};

var men = new MemberClass('洋介','中野');
<mark>mem.getName</mark> = function(){
  return this.lastName + ' ' + this.firstName;
};

document.writeln(mem.getName());

var mem2 = new MemberClass('弘','藤岡');
document.writeln(<mark>mem2.getName()</mark>);
</pre>

<hr>
<h4>別のオブジェクトのメソッドを利用する</h4>
<p>メソッドはオブジェクト固有のものですが、callメソッドやapplyメソッドを使ってメソッドの貸し借りができます。</p>
<h4>callメソッド</h4>
<p>
<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" class="btn btn-default">
<i class="glyphicon glyphicon-info-sign"></i> 参考: call
</a>
</p>

<p>借りたメソッドに引数がない場合は以下のようになります。</p>
</p>
<pre class="prettyprint">
var obj1 = {
  name: 'よしお',
  greet: function(){
    console.log(this.name + 'です、はじめまして');
  }
};

var obj2 = {
  name: 'ユリ子'
};

obj.greet.call(obj2); //=> obj2がobjのgreetメソッド借りて実行しています。
</pre>
<p>借りたメソッドに引数がある場合は、callメソッドの2つ目移行の引数に順番に指定します。</p>
<pre class="prettyprint">
var obj1 = {
  name: 'よしお',
  greet: function(<mark>age, from</mark>){
    console.log(this.name + 'です、はじめまして');
    console.log('年齢は' + age + 'です');
    console.log('出身地は' + from + 'です');
  }
};

var obj2 = {
  name: 'ユリ子'
};

obj1.greet.call(obj2, <mark>6, 'アメリカ'</mark>);
</pre>

<h4>apllyメソッド</h4>
<p>applyメソッドはcallメソッドと使い方はほとんど同じですが、借りたメソッドに引数がある場合、引数を配列にまとめて渡します。</p>
<p>
<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" class="btn btn-default">
<i class="glyphicon glyphicon-info-sign"></i> 参考: apply
</a>
</p>

<pre class="prettyprint">
var obj1 = {
  name: 'よしお',
  greet: function(<mark>age, from</mark>){
    console.log(this.name + 'です、はじめまして');
    console.log('年齢は' + age + 'です');
    console.log('出身地は' + from + 'です');
  }
};

var obj2 = {
  name: 'ユリ子'
};

<mark>var param = [6, 'アメリカ']</mark>;
obj1.greet.apply(obj2, <mark>param</mark>);
</pre>
<hr>

<h4>callメソッドで継承</h4>
<p>JavaScriptではクラスベースのオブジェクト指向言語の継承の仕組みはありませんが、callメソッドを使って継承に近い働きをさせることができます。これは継承元のオブジェクト（スーパークラス）の機能をそのままコピーしているわけではなく、prototypeという仕組みによって実現されてます。</p>
<pre>
function コンストラクタ(引数){
  継承するコンストラクタ.call(this, 引数);
  ...処理を記述...
}
</pre>

<pre class="prettyprint">
//スーパークラス
function SeisekiClass(name){
  this.name = name;

  this.setTensu = function(a, b, c, d, e){
    this.kokugo = a;
    this.sansu = b;
    this.rika = c;
    this.syakai = d;
    this.eigo = e;
  };

  this.goukei = function(){
    var total = 0;
    total += this.kokugo;
    total += this.sansu;
    total += this.rika;
    total += this.syakai;
    total += this.eigo;
    return total;
  };

  this.heikin = function(){
    var total = this.goukei();
    return total / 5;
  };

  this.showMsg = function(){
    var msg = this.name + 'さんの成績\n';
    msg += '合計：' + this.goukei() + '\n';
    msg += '平均：' + this.heikin();
    alert(msg);
  };
}

//サブクラス
function PowerSeisekiClass(name){
  <mark>SeisekiClass</mark>.call(this, <mark>name</mark>);
  
  this.showMsg = function(){
    var msg = name + 'さんの成績\n';
    msg += '国語: ' + this.kokugo + '\n';
    msg += '算数: ' + this.sansu + '\n';
    msg += '理科: ' + this.rika + '\n';
    msg += '社会: ' + this.syakai + '\n';
    msg += '英語: ' + this.eigo + '\n';
    msg += '合計: ' + this.goukei() + '\n';
    msg += '平均: ' + this.heikin() + '\n';
    alert(msg)
  };
}

var taro = new PowerSeisekiClass('太郎');
taro.setTensu(75, 58, 69, 81, 47);
taro.showMsg();
</pre>


<hr>
<h4>オーバーライド</h4>
<p>JavaScriptでは、callメソッドを使うことで、オブエジェクト指向言語でいうオーバーライドに似た働きをすることができます。継承元のオブジェクト（スーパークラス）に含まれるメソッドと全く同じメソッドを、利用するオブジェクト（サブクラス）でも定義すると、新たに定義したメソッドに上書きされます。</p>
<pre class="prettyprint">
//スーパークラス
function SeisekiClass(name){
  this.name = name;

  this.setTensu = function(a, b, c, d, e){
    this.kokugo = a;
    this.sansu = b;
    this.rika = c;
    this.syakai = d;
    this.eigo = e;
  };

  this.goukei = function(){
    var total = 0;
    total += this.kokugo;
    total += this.sansu;
    total += this.rika;
    total += this.syakai;
    total += this.eigo;
    return total;
  };

  this.heikin = function(){
    var total = this.goukei();
    return total / 5;
  };

  <mark>this.showMsg = function(){
    var msg = this.name + 'さんの成績\n';
    msg += '合計：' + this.goukei() + '\n';
    msg += '平均：' + this.heikin();
    alert(msg);
  };</mark>
}

//サブクラス
function PowerSeisekiClass(name){
  SeisekiClass.call(this, name);
  
  <mark>this.showMsg = function(){
    var msg = name + 'さんの成績\n';
    msg += '国語: ' + this.kokugo + '\n';
    msg += '算数: ' + this.sansu + '\n';
    msg += '理科: ' + this.rika + '\n';
    msg += '社会: ' + this.syakai + '\n';
    msg += '英語: ' + this.eigo + '\n';
    msg += '合計: ' + this.goukei() + '\n';
    msg += '平均: ' + this.heikin() + '\n';
    alert(msg)
  };</mark>
}

var taro = new PowerSeisekiClass('太郎');
taro.setTensu(75, 58, 69, 81, 47);
taro.showMsg();
</pre>
<p>以下のようにshowMsgメソッドを定義した後でcallメソッドを記述すると、再度スーパークラスのshowMsgメソッドに上書きされるので意味がありません。</p>

<pre class="prettyprint">
//サブクラス
function PowerSeisekiClass(name){

  this.showMsg = function(){
    var msg = name + 'さんの成績\n';
    msg += '国語: ' + this.kokugo + '\n';
    msg += '算数: ' + this.sansu + '\n';
    msg += '理科: ' + this.rika + '\n';
    msg += '社会: ' + this.syakai + '\n';
    msg += '英語: ' + this.eigo + '\n';
    msg += '合計: ' + this.goukei() + '\n';
    msg += '平均: ' + this.heikin() + '\n';
    alert(msg)
  };

  <mark>SeisekiClass.call(this, name);</mark>
}

var taro = new PowerSeisekiClass('太郎');
taro.setTensu(75, 58, 69, 81, 47);
taro.showMsg();
</pre>

<h4>オブジェクトの改変</h4>
<p>JavaScriptではオブジェクトを作成後に、インスタンスごとにオブジェクトに不足した機能を追加して実行することができます。</p>
<pre class="prettyprint">
function SeisekiClass(name){
  this.name = name;

  this.setTensu = function(a, b, c, d, e){
    this.kokugo = a;
    this.sansu = b;
    this.rika = c;
    this.syakai = d;
    this.eigo = e;
  };

  this.showMsg = function(){
    alert(this.name + 'さんの成績オブジェクトです。');
  };
}

var taro = new SeisekiClass('太郎');
taro.setTensu(75, 58, 69, 81, 47);
var hanako = new SeisekiClass('花子');
hanako.setTensu(98, 79, 81, 93, 85);

taro.showMsg();
hanako.showMsg();

taro.goukei = function(){
  var total = 0;
  total += this.kokugo;
  total += this.sansu;
  total += this.rika;
  total += this.syakai;
  total += this.eigo;
  return total;
};

taro.showMsg = function(){
  var msg = this.name + 'さんの成績合計: ' + this.goukei();
  alert(msg);
};

hanako.heikin = function(){
  var total = 0;
  total += this.kokugo;
  total += this.sansu;
  total += this.rika;
  total += this.syakai;
  total += this.eigo;
  return total/5;
};

hanko.showMsg = function(){
  var msg = this.name + 'さんの成績平均: ' + this.heikin();
  alert(msg);
};

taro.showMsg();
hanako.showMsg();
</pre>

          </div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <div id="footer"><%= title %></div>
 
    <script src="http://code.jquery.com/jquery.js"></script>
    <script src="js/google-code-prettify/prettify.js"></script>
    <script>prettyPrint();</script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/list-counter.js"></script>
  </body>
</html>