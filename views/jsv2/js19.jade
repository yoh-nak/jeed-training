extends ../layout

block link
    include ../link1

block content
    include navbar
    .container
        .row
            .col-sm-3
                include left
            .col-sm-9
                .panel.panel-primary
                    .panel-heading
                        i.glyphicon.glyphicon-book
                        |  高度な関数の使い方
                    .panel-body
                        h4 名前付き引数
                        p 名前付き引数とは、呼び出し時に名前を明示的に指定できる引数のことです。引数が多くなっても、コートの意味がわかりやすく、省略可能な引数を表現しやすくなります。また引数の順番を自由に変更できます。
                        p 引数の数の多い関数や、省略可能な引数が多く、いろいろなパターンがある場合に有効です。
                        pre(class='prettyprint linenums:1')
                            :code
                                function triangle(args){
                                    if(args.base == undefined) {args.base = 1;}
                                    if(args.height == undefined) {args.height = 1;}

                                    return args.base * args.height / 2;
                                }

                                document.writeln(triangle(<mark>{base:5, height:4}));
                        hr
                        h4 高階関数
                        p JavaScriptの関数はデータ型の一種であり、数値型や文字列型の値と同様、関数の引数として渡したり、戻り値として返したりすることができます。関数を引数、戻り値として扱う関数のことを高階関数と呼びます。
                        pre(class='prettyprint linenums:1')
                            :code
                                function arrayWalk(data, f){
                                    for(var key in data){
                                        f(key, data[key]);
                                    }
                                }

                                function showElement(key, value){
                                    document.writeln(key + ': ' + value);
                                }

                                var ary = [1, 2, 4, 8, 16];
                                arrayWalk(ary, showElement);
                        p 無名関数でシンプルに記述すると以下のようになります。
                        pre(class='prettyprint linenums:1')
                            :code
                                function arrayWalk(data, f){
                                    for(var key in data){
                                        f(key, data[key]);
                                    }
                                }

                                var ary = [1, 2, 4, 8, 16];
                                arrayWalk(ary, function(key, value){
                                    document.writeln('key + ': ' + value);
                                });
                        hr
                        h4 クロージャー
                        p クロージャーとは関数内のローカル変数を参照している関数内の関数のことです。関数の中で使われたローカル変数は、関数が終了した時点で破棄されるはずですが、closure関数から返された無名関数がローカル変数counterを参照し続けているので、closure関数終了後もローカル変数counterの値が保持され続けます。
                        pre(class='prettyprint linenums:1')
                            :code
                                function closure(init){
                                    var counter = init;

                                    return function(){
                                        return ++counter;
                                    }
                                }

                                var myClosure = closure(1);
                                document.writeln(myClosure()); //=> 2
                                document.writeln(myClosure()); //=> 3
                                document.writeln(myClosure()); //=> 4
                        pre(class='prettyprint linenums:1')
                            :code
                                function closure(init){
                                    var counter = init;

                                    return function(){
                                        return ++counter;
                                    }
                                }

                                var myClosure1 = closure(1);
                                var myClosure2 = closure(100);
                                document.writeln(myClosure1()); //=> 2
                                document.writeln(myClosure2()); //=> 101
                                document.writeln(myClosure1()); //=> 3
                                document.writeln(myClosure2()); //=> 102
                        p クロージャーは処理を1つしかもたないシンプルなオブジェクトのように動作します。簡単な処理であれば、オブジェクトよりもクロージャーのほうがシンプルに記述できるため、変数に伴う処理がひとつしかない場合はクロージャーが便利です。それに対して、複数の処理を必要とする場合はオブジェクトを使うとよいでしょう。
                        pre.
                            function クロージャー関数(引数[, 引数, ...]){
                                var プロパティ = 引数から受け取った値;
                                var プロパティ = 引数から受け取った値;
                                var プロパティ = 引数から受け取った値;
                                ...

                                //ひとつのメソッド
                                return function(){
                                    メソッドの処理
                                }
                            }