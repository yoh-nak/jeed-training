<%- include ../head %>
  <body>
 
    <%- include navbar %>

    <div class="container">
      <div class="row">
        <div class="col-sm-3">

        <%- include left %>

        </div>
        <div class="col-sm-9">
          <div class="panel panel-primary">
          <div class="panel-heading">
            <i class="glyphicon glyphicon-book"></i> コンストラクタ</div>
          <div class="panel-body">
<h4>コンストラクタ</h4>
<p>一般的に、クラスベースのオブジェクト指向言語ではクラスと呼ばれる、プロパティ、メソッドのグループがオブジェクトの単位になっていますが、JavaScriptではクラスという概念は存在しません。その代わりに、関数がオブジェクトの単位になっています。</p>
<p>オブジェクトリテラル（{...}）は、Objectオブジェクトのプロパティ、メソッドを生成するリテラルとして存在します。その場で作成するには便利ですが、プログラムが大規模になってくると、管理が大変です。</p>
<p>JavaScriptでは、独自のオブジェクト（クラス）を生成するのに関数を使用します。自作関数の定義しているようですが、実は自作関数そのものがJavaScriptではオブジェクト（クラス）の単位として動作します。</p>
<p>関数の中に変数を用意することがオブジェクトのプロパティとなり、関数の中に関数を定義することがオブジェクトのメソッドとなります。thisは自分自身のオブジェクトを指します。</p>
<pre>
function オブジェクトの名前(引数){
  this.プロパティ = 値;
  this.メソッド = function(){ ... }
  ...以下略...
}
</pre>
<pre>
var 変数  = function(引数){
  this.プロパティ = 値;
  this.メソッド = function(){ ... }
  ...以下略...
}
</pre>
<p>実際にオブジェクトを定義すると、以下のようになります。JavaScriptでは慣例的に関数名は、「myFunction」のように小文字で始めますが、オブジェクトとして関数を定義する場合は、「MyClass」のように大文字で始めます。</p>
<p>自作のオブジェクトには引数を渡すことができます。その場合、そのオブジェクトを使用（インスタンス化）するときに、「new オブジェクト名(引数)」のように記述できます。</p>
<p>
<pre class="prettyprint">
function SeisekiClass(name){
  this.name = name; // SeisekiClassのnameプロパティ

  // SeisekiClassのsetTensuメソッド
  this.setTensu = function(a, b, c, d, e){
    this.kokugo = a;
    this.sansu = b;
    this.rika = c;
    this.syakai = d;
    this.eigo = e;
  }

  // SeisekiClassのgoukeiメソッド
  this.goukei = function(){
    var total = 0;
    total += this.kokugo;
    total += this.sansu;
    total += this.rika;
    total += this.syakai;
    total += this.eigo;
    return total;
  }

  // SeisekiClassのheikinメソッド
  this.heikin = function(){
    var total = this.goukei();
    return total / 5;
  }

  // SeisekiClassのshowMsgメソッド
  this.showMsg = function(){
    var msg = this.name + 'さんの成績\n';
    msg += '合計：' + this.goukei() + '\n';
    msg += '平均：' + this.heikin();
    alert(msg);
  }
}
</pre>
<p>オブジェクトを作成した後は、既存のオブジェクトと同様に使用することができます。「new SeisekiClass('引数')」のことをコンストラクタと呼びます。コンストラクタを変数に格納することを、オブジェクトのインスタンス（実体）化と呼びます。</p>
<pre class="prettyprint">
var taro = new SeisekiClass('太郎'); //=> インスタンス化
taro.setTensu(75, 58, 69, 81, 47);
taro.showMsg();

var hanako = new SeisekiClass('花子');
hanako.setTensu(98, 79, 81, 93, 85);
hanako.showMsg();
</pre>

<h4>callメソッド</h4>
<pre>

</pre>

<h4>applyメソッド</h4>
<pre>

</pre>
          </div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <div id="footer"><%= title %></div>
 
    <script src="http://code.jquery.com/jquery.js"></script>
    <script src="js/google-code-prettify/prettify.js"></script>
    <script>prettyPrint();</script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/list-counter.js"></script>
  </body>
</html>