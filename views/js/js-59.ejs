<%- include ../head %>
  <body>
 
    <%- include navbar %>

    <div class="container">
      <div class="row">
        <div class="col-sm-3">

        <%- include left %>

        </div>
        <div class="col-sm-9">
          <div class="panel panel-primary">
          <div class="panel-heading">
            <i class="glyphicon glyphicon-book"></i> ブラウザでCookieを扱う</div>
          <div class="panel-body">
            <h4>cookieを確認する</h4>
            <p>Cookieとは、Webサイトの提供者が、Webブラウザを通じて訪問者のコンピュータに一時的にデータを書き込んで保存させるしくみのこと。Cookieにはユーザに関する情報や最後にサイトを訪れた日時、そのサイトの訪問回数などを記録しておくことができます。</p>
            <p>JavaScrpiptでは「document.cookieプ」ロパティでWebサイト提供者が残したCookieを確認することができます。</p>
<pre class="prettyprint">
document.cookie;
</pre>
<p>
<a href="https://developer.mozilla.org/ja/docs/DOM/document.cookie" target="_blank" class="btn btn-default">
<i class="glyphicon glyphicon-info-sign"></i> 参考：cookieプロパティ
</a>
</p>
            <p>以下の例は「Yahoo! Japan」にアクセスした後に、コンソールで「document.cookie」を実行しCookieに記録されたデータを確認した例です。</p>
<pre class="prettyprint">
B=8vt1li993h6uo&b=3&s=ka; YABW=v=1&b=363&c=1&i4=MYWoUQ--&t4=1379441608&i6=&t6=&e=1380072948"
</pre>
<p>
Cookieは「キー=値; キー=値; キー=値; ...」のように、キーと値がセットに成って格納されますが、「; 」のように、1つのセットがセミコロンと半角スペースで区切られているだけで 、データは1つの文字列として記録されています。したがってJavaScriptでCookieを処理するためには「; 」で切り離した後「=」でキーと値をさらに切り離して、データを処理しなければなりません。以下、CookieをJavaScriptの文法でセットする方法と、Cookieからデータを取得する方法を紹介します。
</p>
<hr>
<h4>Cookieをセットする</h4>
<pre class="prettyprint">
var key = "キー";
var value = "値";
var date = new Date();
date.setTime(date.getTime() + (3 * 24 * 60 * 60 * 1000));   //3日×24時間×60分×60秒×1000ミリ秒
var expires = 'expires=' + date.toGMTString();
document.cookie = encodeURIComponent(key) + "=" + encodeURIComponent(value) + "; " + expires + "; path=/";
</pre>
<h4>Cookieを取得する</h4>
<pre class="prettyprint">
var key = "キー";
var pattern = /([^*]+)=([^*]+)/;
var cookies = document.cookie.split('; ');
for(var i = 0; i < cookies.length; i++){
    var match = cookies[i].match(pattern);
    if(match && key == decodeURIComponent(match[1])){
        document.write(decodeURIComponent(match[2]));
    }
}
</pre>
<h4>Cookieを破棄する</h4>
<pre class="prettyprint">
var key = "キー";
document.cookie = encodeURIComponent(key) + "=;" + "expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/";
</pre>
<hr>
<h4>jQueryプラグイン「jquery.cookie.js」を利用する</h4>
<p>CookieをJavaScriptで扱う場合、処理が面倒なため、PHPなどのサーバーサイド技術でCookieを処理することが多いのですが、JavaScriptでCookieを扱うには、jQueryプラグインの「jquery.cookie.js」を使うと便利です。</p>

<p>
<a href="https://github.com/carhartl/jquery-cookie" target="_blank" class="btn btn-default">
<i class="glyphicon glyphicon-info-sign"></i> 参考：jquery.cookie.js
</a>
</p>
<hr>
<h4>日にちでCookieをセットする</h4>
<pre class="prettyprint">
&lt;script src="jquery.cookie.js"&gt;&lt;/script&gt;
&lt;script&gt;
$.cookie("キー","値",{expires:3}); //3日
&lt;/script&gt;
</pre>

<h4>時間でCookieをセットする</h4>
<pre class="prettyprint">
&lt;script src="jquery.cookie.js"&gt;&lt;/script&gt;
&lt;script&gt;
var date = new Date();
date.setTime(date.getTime()+(3 * 24 * 60 * 60 * 1000)); //3日×24時間×60分×60秒×1000ミリ秒
$.cookie("キー","値",{expires:date});
&lt;/script&gt;
</pre>

<h4>Cookieを取得する</h4>
<pre class="prettyprint">
&lt;script src="jquery.cookie.js"&gt;&lt;/script&gt;
&lt;script&gt;
$.cookie("キー");
&lt;/script&gt;
</pre>

<h4>Cookieを破棄する</h4>
<pre class="prettyprint">
&lt;script src="jquery.cookie.js"&gt;&lt;/script&gt;
&lt;script&gt;
$.cookie("キー","値",{expires:-1});
&lt;/script&gt;
</pre>
<hr>
<h4>UNIX標準時とは</h4>
<p>
UNIX時間（ユニックスじかん）またはUNIX時刻（ユニックスじこく、UNIX time、POSIX time）とはコンピューターシステム上で日時を表す単位。UTCでの1970年1月1日真夜中（0時0分0秒）からの経過秒数（閏秒を加味しない）で表される。UNIX標準時から現在までの秒数をタイムスタンプと呼びます。
</p>
<table class="table">
  <tr>
    <th>UNIX時間</th><th>UTC（協定世界時館）</th><th>JST（日本標準時）</th>
  </tr>
  <tr>
    <td>0</td><td>1970-01-01T00:00:00</td><td>1970-01-01T09:00:00</td>
  </tr>
  <tr>
    <td>100000000</td><td>1973-03-03T09:46:40</td><td>1973-03-03T18:46:40</td>
  </tr>
  <tr>
    <td>1000000000</td><td>2001-09-09T01:46:40</td><td>2001-09-09T10:46:40</td>
  </tr>
  <tr>
    <td>1234567890</td><td>2009-02-13T23:31:30</td><td>2009-02-14T08:31:30</td>
  </tr>
  <tr>
    <td>2147483647</td><td>2038-01-19T03:14:07</td><td>2038-01-19T12:14:07</td>
  </tr>
</table>
   
<hr>
<h4>dataオブジェクトのgetTimeメソッド</h4>
<p>
getTimeメソッドは、現在のタイムスタンプを取得できます。コンソールで実行してみましょう。現在までのUNIX標準時からの秒数が表示されます。
</p>
<pre class="prettyprint">
var timestamp = new Date();
timestamp.getTime();
</pre>

<p>Cookieの保存期間はタイムスタンプで格納されるため、getTimeメソッドでCookie保存開始時のタイムスタンプを取得し、その時からの秒数がCookieの保存期間となります。
</p>
<pre class="prettyprint">
&lt;script src="jquery.cookie.js"&gt;&lt;/script&gt;
&lt;script&gt;
var date = new Date();
<mark>date.setTime(date.getTime()+(3 * 24 * 60 * 60 * 1000));</mark> //3日×24時間×60分×60秒×1000ミリ秒
$.cookie("キー","値",{expires:date});
&lt;/script&gt;
</pre>
<p>ハイライト部分が保存期間の秒数で指定されているのがわかります。</p>
<p>
<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime" target="_blank" class="btn btn-default">
<i class="glyphicon glyphicon-info-sign"></i> 参考：getTimeメソッド
</a>
</p>
<hr>
<p>参考：typeof演算子で、変数timestampを確認するとobject型のデータ型であることが確認できます。しかしながら変数timestampはDateオブジェクトが格納されているかどうか確認することはできません。その場合は、instanceof演算子を使い、「timestamp instanceof Date」の結果、trueが取得されると、Dateオブジェクトが格納されていることが分かります。
<pre class="prettyprint">
typeof timestamp //=> "object"
timestamp inscanceof Date //=> true
</pre>
          </div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <div id="footer"><%= title %></div>
 
    <script src="http://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="js/google-code-prettify/prettify.js"></script>
    <script>prettyPrint();</script>
    <script src="js/bootstrap.min.js"></script>
    <script src="coffee/list-counter.js"></script>
  </body>
</html>