extends ../../layout

block link
    include ../../link2

block content
    include ../navbar
    .container
        .row
            .col-sm-3
                include ../left
            .col-sm-9
                .panel.panel-primary
                    .panel-heading
                        i.glyphicon.glyphicon-book
                        | &nbsp;MongoDBのCRUD（Create, Read, Update, Delete）
                    .panel-body
                        .alert.alert-info MongoDBの動作確認
                        p MongoDBがインストールされているか
                        pre.
                            mongo --version
                        p サービスが起動しているか（Linux）
                        pre.
                            sudo service mongod status
                        hr
                        .alert.alert-info MongoDBの開始
                        pre.
                            mongo データベース名
                        p データベース名を指定しないとtestというデータベースが作成されます。
                        pre.
                            mongo
                        hr
                        .alert.alert-info MongoDBの終了
                        pre
                            :code
                                > exit
                        pre
                            :code
                                > quit()
                        pre.
                            Ctrl + C
                        hr
                        .alert.alert-info データベースの作成
                        pre.
                            mongo mydb
                        hr
                        .alert.alert-info 全体のヘルプを表示
                        pre
                            :code
                                > help
                        hr
                        .alert.alert-info dbメソッドのヘルプ
                        pre
                            :code
                                > db.help()
                        hr
                        .alert.alert-info 使用中のデータベースの統計を表示
                        pre
                            :code
                                > db.stats()
                        hr
                        .alert.alert-info データベースの一覧を表示
                        p コレクションを作成するまでデータベースは一覧表示されません。
                        pre
                            :code
                                > show dbs
                                > db.createCollection('test');
                                > show dbs
                        hr
                        .alert.alert-info データベースの切り替え
                        p useコマンドで既存のデータベースに切り替えられます。
                        pre
                            :code
                                > use local
                        hr
                        .alert.alert-info データベースの新規作成
                        p useコマンドで存在しないデータベースを指定すると、新規作成されます。
                        pre
                            :code
                                > use mydb2
                        hr
                        .alert.alert-info データベースの削除
                        p 既存のデータベースに切り替えた後、db.dropDatabase()を実行します。
                        pre
                            :code
                                > use mydb
                                > db.dropDatabase();
                                > show dbs
                        hr
                        .alert.alert-info コレクションの新規作成
                        pre
                            :code
                                > show dbs
                                > use mydb
                                > db.createCollection('users');
                        hr
                        .alert.alert-info コレクションの一覧表示
                        pre
                            :code
                                > show collections
                        hr
                        .alert.alert-info コレクションのリネーム
                        pre
                            :code
                                > db.users.renameColection('persons');
                                > show collections
                        hr
                        .alert.alert-info コレクションの削除
                        pre
                            :code
                                > db.persons.drop();
                                > show collections
                        hr
                        .alert.alert-info ドキュメントの追加
                        pre
                            :code
                                > show dbs
                                > use mydb
                                > show collections
                                > db.createCollection('users');
                                > db.users.insert({name:"nakano",score: 30});
                        hr
                        .alert.alert-info ドキュメントの一覧表示
                        pre
                            :code
                                > db.users.find();
                        hr
                        .alert.alert-info ドキュメントをスキーマレスに追加
                        pre
                            :code
                                > db.users.insert({name:"suzuki",tags:["web","mobile"]});
                                > db.users.find();
                        hr
                        .alert.alert-info ドキュメントを数える
                        pre
                            :code
                                > db.users.count();
                        hr
                        .alert.alert-info ドキュメントを削除
                        pre
                            :code
                                > db.users.remove();
                                > db.users.find();
                        hr
                        .alert.alert-info JavaScriptで追加
                        pre
                            :code
                                > for(var i = 0; i < 4; i++){
                                    db.users.insert({
                                        name: "user-" + i,
                                        team: "team-" + (i % 3),
                                        score: Math.floor(Math.random() * 100)
                                    });
                                }
                                > db.users.find();
                        hr
                        .alert.alert-info JavaScriptでスキーマレスに追加
                        pre
                            :code
                                > for(var i = 4; i < 6; i++){
                                    db.users.insert({
                                        name: "user-" + i,
                                        team: "team-" + (i % 3)
                                    });
                                }
                                > db.users.find();
                        hr
                        .alert.alert-info 全件検索
                        pre
                            :code
                                > db.users.find({});
                        hr
                        .alert.alert-info nameが"user-1"のドキュメント
                        pre
                            :code
                                > db.users.find({name: "user-1"});
                        hr
                        .alert.alert-info nameがuser-1からuser-3のドキュメント
                        pre
                            :code
                                > db.users.find({name: /user-[1-3]/});
                                > db.users.find({num: {$regex: /[1-3]/i}});
                        hr
                        .alert.alert-info scoreが30より大きい
                        p greater than
                        pre
                            :code
                                > db.users.find({score: {$gt: 30}});
                        hr
                        .alert.alert-info scoreが30以上
                        p greater than or equal to
                        pre
                            :code
                                > db.users.find({score: {$gte: 30}});
                        hr
                        .alert.alert-info scoreが30より小さい
                        p less than
                        pre
                            :code
                                > db.users.find({score: {$lt: 30}});
                        hr
                        .alert.alert-info scoreが30以下
                        p less than or equal to
                        pre
                            :code
                                > db.users.find({score: {$lte: 30}});
                        hr
                        .alert.alert-info nameが"user-1"ではないドキュメント
                        p not equal
                        pre
                            :code
                                > db.users.find({name: {$ne: "user-1"}});
                        hr
                        .alert.alert-info and検索する
                        pre
                            :code
                                > db.users.find({
                                    team: "team-0",
                                    score: {$lt: 50}
                                });
                        hr
                        .alert.alert-info and検索する2
                        pre
                            :code
                                > db.users.find({
                                    $and: [
                                        {team: "team-0"},
                                        {score: {$lt: 50}}
                                    ]
                                });
                        hr
                        .alert.alert-info or検索する
                        pre
                            :code
                                > db.users.find({
                                    $or: [
                                        {team: "team-0"},
                                        {score: {$lt: 50}}
                                    ]
                                });
                        hr
                        .alert.alert-info $in（配列の要素が値に含まれているか）、$exists（キーが存在するか）で検索
                        pre
                            :code
                                > db.users.find({
                                    $or: [
                                        {team: {$in: ["team-0", "team-1"]}},
                                        {score: {$exists: true}}
                                    ]
                                });
                        .alert.alert-info $nin（配列の要素が値に含まれていないか）、$exists（キーが存在）で検索
                        p $nin = not in
                        pre
                            :code
                                > db.users.find({
                                    $or: [
                                        {team: {$nin: ["team-0", "team-1"]}},
                                        {score: {$exists: false}}
                                    ]
                                });
                        hr
                        .alert.alert-info 重複を削除して検索（teamにどのようなものがあるか）
                        pre
                            :code
                                > db.users.distinct('team');
                        hr
                        .alert.alert-info nameキーだけ表示
                        pre
                            :code
                                > db.users.find({},{name: 1});
                        hr
                        .alert.alert-info nameキーだけ非表示
                        pre.
                            db.users.find({},{name: 0});
                        hr
                        .alert.alert-info nameキーとscoreキーのみ表示
                        pre.
                            db.users.find({},{name: 1, score: 1});
                        hr
                        .alert.alert-info 1と0はミックスできない
                        pre.
                            db.users.find({},{name: 1, score: 0});
                        hr
                        .alert.alert-info ただしidだけ0にすることは可
                        pre.
                            db.users.find({},{name: 1, _id: 0});
                        hr
                        .alert.alert-info 1件だけ表示
                        pre.
                            db.users.findOne({}, {_id: 0});
                        hr
                        .alert.alert-info 3件表示
                        pre.
                            db.users.find({}, {_id: 0}).limit(3);
                        hr
                        .alert.alert-info 2件をスキップして3件表示
                        pre.
                            db.users.find({}, {_id: 0}).skip(2).limit(3);
                        hr
                        .alert.alert-info scoreの小さい順にソート
                        pre.
                            db.users.find({}, {_id: 0}).sort({score: 1});
                        hr
                        .alert.alert-info scoreの大きい順にソート
                        pre.
                            db.users.find({}, {_id: 0}).sort({score: -1});
                        hr
                        .alert.alert-info 索引を確認する
                        p 索引をつけると、そのキーでの検索が速くなりますが、追加が遅くなります。
                        pre.
                            db.users.getIndexes();
                        hr
                        .alert.alert-info 索引を昇順で追加する
                        pre.
                            db.users.ensureIndex({score: 1});
                            db.users.getIndexes();
                        hr
                        .alert.alert-info 索引を降順で追加する
                        pre.
                            db.users.ensureIndex({score: -1});
                            db.users.getIndexes
                        hr
                        .alert.alert-info 索引を削除する
                        pre.
                            db.users.dropIndex({score:1})
                            db.users.getIndexes();
                        hr
                        .alert.alert-info ユニークキーを追加する
                        p 重複するデータを追加するとエラーになります。
                        pre.
                            db.users.ensureIndex({name:1}, {unique:true})
                            db.users.insert({name: "user-0"});
                        hr
                        .alert.alert-info scoreキーを更新
                        p user-0のドキュメントのがscoreキーだけに更新されます。
                        pre.
                            db.users.update({name:"user-0"},{score: 100});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info scoreキーを更新
                        p user-1のドキュメントのscoreキーの値を更新
                        pre.
                            db.users.update({name:"user-1"},{$set: {score: 100}});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info scoreキーを更新
                        p user-1のドキュメントのscoreキーを削除
                        pre.
                            db.users.update({name:"user-1"},{$unset: {score: ""}});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info scoreキーを更新
                        p user-2のドキュメントのscoreキーを10繰り上げる
                        pre.
                            db.users.update({name:"user-2"},{$inc: {score: 10}});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info scoreキーを更新
                        p user-2のドキュメントのscoreキーを10繰り下げる
                        pre.
                            db.users.update({name:"user-2"},{$inc: {score: -10}});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info scoreキーを更新
                        p user-2のドキュメントのscoreキーをmyscoreキーにリネーム
                        pre.
                            db.users.update({name:"user-2"},{$rename: {score: "myscore"}});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info 複数のドキュメントを更新
                        p データーを追加する
                        pre
                            :code
                                db.users.drop();
                                db.createCollection('users');

                                for(var i = 0; i < 6; i++){
                                    db.users.inseert({
                                        name: "user-" + i,
                                        team: "team-" + (i % 3),
                                        score: Math.floor(Math.random() * 100)
                                    });
                                }
                                db.users.find({},{_id:0});
                        p team-0が2件あっても1件だけしか10繰り上がらない
                        pre.
                            db.users.update({team: "team-0"}, {$inc: {score: 10}});
                            db.users.find({},{_id:0});
                        p team-0のキーを全件10繰り上げる
                        pre.
                            db.users.update({team: "team-0"}, {$inc: {score: 10}}, {multi: true});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info 見つかったら更新、見つからなかったら追加
                        p nameキーの値に"nakano"が見つからないので追加します。
                        pre.
                            db.users.update({name: "nakano"},{name: "nakano", team: "web", score: 200}, {upsert: true});
                            db.users.find({},{_id:0});
                        p nameキーの値に"nakano"が見つかるので更新します。
                        pre.
                            db.users.update({name: "nakano"},{name: "nakano", team: "web", score: 300}, {upsert: true});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info 特定のキー、値の含まれるドキュメントだけ削除
                        pre.
                            db.users.remove({name: "nakano"});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info データベースのバックアップ、復元
                        p mongodbを終了してから実行します。dumpディレクトリにバックアップファイルが生成されます。
                        pre.
                            mongodump -d mydb;
                        p 一度変更を加えてmongodbを終了します。
                        pre.
                            mongo mydb
                            db.users.find();
                            db.users.remove({team: "team-0"});
                            db.users.find();
                            exit
                        p mongodbを復元します。dumpディレクトリの親ディレクトリから実行します。--dropオプションで既存のデータを削除して復元します。
                        pre.
                            mongorestore --drop
                            mongo mydb
                            db.users.find({},{_id:0});
                        p --helpでヘルプを確認できます。
                        pre.
                            mongodump --help
                            mongorestore --help