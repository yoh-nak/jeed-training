extends ../../layout

block link
    include ../../link2

block content
    include ../navbar
    .container
        .row
            .col-sm-3
                include ../left
            .col-sm-9
                .panel.panel-primary
                    .panel-heading
                        i.glyphicon.glyphicon-book
                        | &nbsp;MongoDBのCRUD（Create, Read, Update, Delete）
                    .panel-body
                        .alert.alert-info MongoDBの動作確認
                        p MongoDBがインストールされているか
                        pre.
                            mongo --version
                        p サービスが起動しているか（Linux）
                        pre.
                            sudo service mongod status
                        hr
                        .alert.alert-info MongoDBの開始
                        pre.
                            mongo データベース名
                        p データベース名を指定しないとtestというデータベースが作成されます。
                        pre.
                            mongo
                        hr
                        .alert.alert-info MongoDBの終了
                        pre.
                            exit
                        pre.
                            quit()
                        pre.
                            Ctrl + C
                        hr
                        .alert.alert-info データベースの作成
                        pre.
                            mongo mydb
                        hr
                        .alert.alert-info 全体のヘルプを表示
                        pre.
                            help
                        hr
                        .alert.alert-info dbメソッドのヘルプ
                        pre.
                            db.help()
                        hr
                        .alert.alert-info 使用中のデータベースの統計を表示
                        pre.
                            db.stats()
                        hr
                        .alert.alert-info データベースの一覧を表示
                        p コレクションを作成するまでデータベースは一覧表示されません。
                        pre.
                            show dbs;
                            db.createCollection('test');
                            show dbs;
                        hr
                        .alert.alert-info データベースの切り替え
                        p useコマンドで既存のデータベースに切り替えられます。
                        pre.
                            use local
                        hr
                        .alert.alert-info データベースの新規作成
                        p useコマンドで存在しないデータベースを指定すると、新規作成されます。
                        pre.
                            use use mydb2
                        hr
                        .alert.alert-info データベースの削除
                        p 既存のデータベースに切り替えた後、db.dropDatabase()を実行します。
                        pre.
                            use mydb
                            db.dropDatabase();
                            show dbs;
                        hr
                        .alert.alert-info コレクションの新規作成
                        pre.
                            show dbs;
                            use mydb;
                            db.createCollection('users');
                        hr
                        .alert.alert-info コレクションの一覧表示
                        pre.
                            show collections;
                        hr
                        .alert.alert-info コレクションのリネーム
                        pre.
                            db.users.renameColection('persons');
                            show collections;
                        hr
                        .alert.alert-info コレクションの削除
                        pre.
                            db.persons.drop();
                            show collections;
                        hr
                        .alert.alert-info ドキュメントの追加
                        pre.
                            pre.
                            show dbs;
                            use mydb;
                            show collections;
                            db.createCollection('users');
                            db.users.insert({name:"nakano",score: 30});
                        hr
                        .alert.alert-info ドキュメントの一覧表示
                        pre.
                            db.users.find();
                        hr
                        .alert.alert-info ドキュメントをスキーマレスに追加
                        pre.
                            db.users.insert({name:"suzuki",tags:["web","mobile"]})
                            db.users.find();
                        hr
                        .alert.alert-info ドキュメントを数える
                        pre.
                            db.users.count();
                        hr
                        .alert.alert-info ドキュメントを削除
                        pre.
                            db.users.remove();
                            db.users.find();
                        hr
                        .alert.alert-info JavaScriptで追加
                        pre
                            :code
                                for(var i = 0; i < 4; i++){
                                    db.users.insert({
                                        name: "user-" + i,
                                        team: "team-" + (i % 3),
                                        score: Math.floor(Math.random() * 100)
                                    });
                                }
                                db.users.find();
                        hr
                        .alert.alert-info JavaScriptでスキーマレスに追加
                        pre
                            :code
                                for(var i = 4; i < 6; i++){
                                    db.users.insert({
                                        name: "user-" + i,
                                        team: "team-" + (i % 3)
                                    });
                                }
                                db.users.find();
                        hr
                        //-
                            .alert.alert-info usersコレクションの挿入／更新
                            p _idの指定がなければusersコレクションにinsert
                            pre
                                :code
                                    db.users.save({username: 'jones'})
                            p _idの指定があればusersコレクションのうち、指定した_idのusernameドキュメントをupdate
                            pre
                                :code
                                    db.users.save({_id: ObjectId('52fdd2ebc5976a3f2d4cdab', 'username': 'nakano'})
                            hr
                        .alert.alert-info 全件検索
                        pre.
                            db.users.find({});
                        hr
                        .alert.alert-info nameが"user-1"のドキュメント
                        pre.
                            db.users.find({name: "user-1"});
                        hr
                        .alert.alert-info nameがuser-1からuser-3のドキュメント
                        pre.
                            db.users.find({name: /user-[1-3]/});
                        hr
                        .alert.alert-info scoreが30より大きい
                        p greater than
                        pre.
                            db.users.find({score: {$gt: 30}});
                        hr
                        .alert.alert-info scoreが30以上
                        p greater than or equal to
                        pre.
                            db.users.find({score: {$gte: 30}});
                        hr
                        .alert.alert-info scoreが30より小さい
                        p less than
                        pre.
                            db.users.find({score: {$lt: 30}});
                        hr
                        .alert.alert-info scoreが30以下
                        p less than or equal to
                        pre.
                            db.users.find({score: {$lte: 30}});
                        hr
                        .alert.alert-info nameが"user-1"ではないドキュメント
                        p not equal
                        pre.
                            db.users.find({name: {$ne: "user-1"}});
                        hr
                        .alert.alert-info and検索する
                        pre.
                            db.users.find({
                                team: "team-0",
                                score: {$lt: 50}
                            });
                        hr
                        .alert.alert-info and検索する2
                        pre.
                            db.users.find({
                                $and: [
                                    {team: "team-0"},
                                    {score: {$lt: 50}}
                                ]
                            });
                        hr
                        .alert.alert-info or検索する
                        pre.
                            db.users.find({
                                $or: [
                                    {team: "team-0"},
                                    {score: {$lt: 50}}
                                ]
                            });
                        hr
                        .alert.alert-info $in（配列に含まれているか）、$exists（キーが存在するか）で検索
                        pre.
                            db.users.find({
                                $or: [
                                    {team: {$in: ["team-0", "team-1"]}},
                                    {score: {$exists: true}}
                                ]
                            });
                        hr
                        .alert.alert-info 重複を削除して検索（teamにどのようなものがあるか）
                        pre.
                            db.users.distinct('team');
                        hr
                        //-
                            .alert.alert-info usersコレクションの検索
                            pre
                                :code
                                    db.users.find();
                                    db.users.find({username:'jones'});
                                    db.users.find({_id:ObjectId('518869be37d5684f207935ae')})
                            hr
                        .alert.alert-info nameキーだけ表示
                        pre.
                            db.users.find({},{name: 1});
                        hr
                        .alert.alert-info nameキーだけ非表示
                        pre.
                            db.users.find({},{name: 0});
                        hr
                        .alert.alert-info nameキーとscoreキーのみ表示
                        pre.
                            db.users.find({},{name: 1, score: 1});
                        hr
                        .alert.alert-info 1と0はミックスできない
                        pre.
                            db.users.find({},{name: 1, score: 0});
                        hr
                        .alert.alert-info ただしidだけ0にすることは可
                        pre.
                            db.users.find({},{name: 1, score: 0, _id: 0});
                        hr
                        .alert.alert-info 1件だけ表示
                        pre.
                            db.users.findOne({}, {_id: 0});
                        hr
                        .alert.alert-info 3件表示
                        pre.
                            db.users.find({}, {_id: 0}).limit(3);
                        hr
                        .alert.alert-info 2件をスキップして3件表示
                        pre.
                            db.users.find({}, {_id: 0}).slip(2).limit(3);
                        hr
                        .alert.alert-info scoreの小さい順にソート
                        pre.
                            db.users.find({}, {_id: 0}).sort({score: 1});
                        hr
                        .alert.alert-info scoreの大きい順にソート
                        pre.
                            db.users.find({}, {_id: 0}).sort({score: -1});
                        hr
                        .alert.alert-info 索引を確認する
                        p 索引をつけると、そのキーでの検索が速くなりますが、追加が遅くなります。
                        pre.
                            db.users.getIndexes();
                        hr
                        .alert.alert-info 索引を昇順で追加する
                        pre.
                            db.users.ensureIndex({score: 1});
                            db.users.getIndexes();
                        hr
                        .alert.alert-info 索引を降順で追加する
                        pre.
                            db.users.ensureIndex({score: -1});
                            db.users.getIndexes
                        hr
                        .alert.alert-info 索引を削除する
                        pre.
                            db.users.dropIndex({score:1})
                            db.users.getIndexes();
                        hr
                        .alert.alert-info ユニークキーを追加する
                        p 重複するデータを追加するとエラーになります。
                        pre.
                            db.users.ensureIndex({name:1}, {unique:true})
                            db.users.insert({name: "user-0"});
                        hr
                        .alert.alert-info scoreキーを更新
                        p user-0のドキュメントのがscoreキーだけに更新されます。
                        pre.
                            db.users.update({name:"user-0"},{score: 100});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info scoreキーを更新
                        p user-1のドキュメントのscoreキーの値を更新
                        pre.
                            db.users.update({name:"user-1"},{$set: {score: 100}});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info scoreキーを更新
                        p user-1のドキュメントのscoreキーを削除
                        pre.
                            db.users.update({name:"user-1"},{$unset: {score: ""}});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info scoreキーを更新
                        p user-2のドキュメントのscoreキーを10繰り上げる
                        pre.
                            db.users.update({name:"user-2"},{$inc: {score: 10}});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info scoreキーを更新
                        p user-2のドキュメントのscoreキーを10繰り下げる
                        pre.
                            db.users.update({name:"user-2"},{$inc: {score: -10}});
                            db.users.find({},{_id:0});
                        hr
                        .alert.alert-info scoreキーを更新
                        p user-2のドキュメントのscoreキーをmyscoreキーにリネーム
                        pre.
                            db.users.update({name:"user-2"},{$rename: {score: "myscore"}});
                            db.users.find({},{_id:0});
                        //-
                            .alert.alert-info ドキュメントを追加して更新
                            pre
                                :code
                                    db.users.update({username: 'smith'}, {$set: {country: 'Canada'}})
                            hr
                            .alert.alert-info usersコレクションのusernameがjonesのものからcountryだけ表示
                            pre
                                :code
                                    db.users.find({username:'jones'}, {country: true});
                            hr
                            .alert.alert-info usersコレクションのドキュメントを削除
                            pre
                                :code
                                    db.users.update({username: 'smith'},{$unset: {country: 1}}) 


                                    >db.users.update({username: 'smith'},
                                    {$set: {favorites: 
                                    {
                                    cities: ['Chicago', 'Cheyenne'],
                                    movies: ['Casablanca', 'The Sting']
                                    }
                                    }
                                    })


                                    db.users.update({username: 'jones'},
                                    {$set: {favorites:
                                    {
                                    movies: ['Casablanca', 'Rocky']
                                    }
                                    }
                                    })


                                    >db.users.find()

                        hr
                        .alert.alert-info 絞り込み検索
                        pre
                            :code
                                >db.users.find({'favorites.movies': 'Casablanca'}) 

                                複数行update（4つ目の引数がtrueで複数行更新）
                                >db.users.update({'favorites.movies': 'Casablanca'},
                                {$addToSet: {'favorites.movies': 'The Maltese Falcon'}},
                                false,
                                true)

                        hr
                        .alert.alert-info コレクションのドキュメントの削除
                        pre
                            :code
                                >db.users.remove({'favorites.cities': 'Cheyenne'})
                        hr
                        .alert.alert-info コレクションの削除
                        pre
                            :code
                                >db.users.drop()
                        hr
                        .alert.alert-info データベースの一覧表示
                        pre.
                            show dbs
                        hr
                        .alert.alert-info コレクションの一覧表示
                        pre
                            :code
                                >show collections
                        hr
                        .alert.alert-info データベースの削除
                        pre
                            :code
                                >use tutorial

                                >db.dropDatabase()

                                >use tutorial

                                >for(var i=0; i<200000; i++){
                                db.numbers.save({num: i});
                                }

                                >db.numbers.find()


                                >db.numbers.find({num: 500})


                                199995件目より後を表示（gt = greater than）
                                >db.numbers.find({num: {'$gt': 199995}})


                                20件目以降25件目より前を表示（lt = less than）
                                >db.numbers.find({num: {'$gt': 20, '$lt': 25}})


                                $gte（greater than or equal to 以上）
                                $lte（less than or equal to 以下）


                                $regex（正規表現）
                                >db.numbers.find({num: {$regex: /[0-2][0-9]/i}})


                                昇順にソートする
                                >db.numbers.find().sort({num: 1);


                                降順にソートする
                                >db.numbers.find().sort({num: -1);


                                1件だけ表示
                                >db.numbers.findOne();


                                3件だけ表示
                                >db.numbers.find().limit(3);




                                2件目（0件目あり）のドキュメントから3件表示
                                >db.numbers.find().slip(2).limit(3);


                                絞り込んだドキュメントの件数を表示
                                >db.numbers.fine().count();


                                一意の値を表示
                                >db.numbers.distinct('num');


                                100件目、200件目、300件目を抽出
                                >db.numbers.find({'num': {$in: [100, 200, 300]});
                        hr
                        .alert.alert-info 100件目、200件目、300件目以外を抽出（nin = not in）
                        pre
                            :code
                                >db.numbers.find({'num': {$nin: [100, 200, 300]});
                        hr
                        .alert.alert-info numbersコレクションにemailがあるドキュメントを抽出
                        pre
                            :code
                                >db.numbers.find({'email': {$exits: true});
                        hr
                        .alert.alert-info numbersコレクションにemailがないドキュメントを抽出
                        pre
                            :code
                                >db.numbers.find({'email': {$exits: false});
                        hr
                        .alert.alert-info 数値を5繰り上げる（inc = increment）
                        pre
                            :code
                                >db.numbers.update({'num': 100}, {$inc: {'num': 5}})
                        hr
                        .alert.alert-info 数値を20繰り下げる
                        pre
                            :code
                                >db.numbers.update({'num': 100}, {$inc: {'num': -20}})
                        hr
                        .alert.alert-info リネームする
                        pre
                            :code
                                >db.numbers.update({'num': 100}, {$rename: {'num': 'number'}})
                        hr
                        .alert.alert-info データがあったら更新、なかったらインサート（3つ目の引数upsert）
                        pre
                            :code
                                >db.numbers.update({'num': 100}, {$inc: {'num': 5}}, true);
                        hr
                        .alert.alert-info １件しか更新されない
                        pre
                            :code
                                >db.numbers.update({}, {$inc: {'num': 5}});
                        hr
                        .alert.alert-info 全件更新される（4つ目の引数multi）
                        pre
                            :code
                                >db.numbers.update({}, {$inc: {'num': 5}}, false, true);
                        hr
                        .alert.alert-info 構造の確認
                        pre
                            :code
                                >db.numbers.find({num: {'$gt': 199995}}).explain()
                        hr
                        .alert.alert-info インデックスをつける（昇順のインデックスをnumキーにつける）
                        pre
                            :code
                                >db.numbers.ensureIndex({num: 1})
                        hr
                        .alert.alert-info インデックスをつける（降順のインデックスをnumキーにつける）
                        pre
                            :code
                                >db.numbers.ensureIndex({num: -1})
                        hr
                        .alert.alert-info インデックスの確認
                        pre
                            :code
                                >db.numbers.getIndexes() 
                        hr
                        .alert.alert-info クエリのレスポンスが上がっている
                        pre
                            :code
                                >db.numbers.find({num: {'$gt': 199995}}).explain() 
                        hr
                        .alert.alert-info インデックスの削除
                        pre
                            :code
                                >db.numbers.dropIndex({num: 1})
                        hr
                        .alert.alert-info ユニークキーをつける
                        pre
                            :code
                                >db.numbers.ensureIndex({num: 1}, {'uniquie': true})


                                command.jsで保存
                                db.numbers.remove({'num': 100);

                        hr
                        .alert.alert-info 外部ファイルを実行
                        pre
                            :code
                                mongo tutorial command.js

                                load('commands.js');
                        hr
                        .alert.alert-info バックアップをとる
                        pre
                            :code
                                mongodump --db tutorial
                        hr
                        .alert.alert-info バックアップの復元
                        pre
                            :code
                                mongorestore
                        hr
                        .alert.alert-info もとのデータベースを削除して復元
                        pre
                            :code
                                mongorestore --drop

                                >db.stats()
                                >db.runCommand({dbstats: 1})
                                >db.runCommand({collstats: 'numbers'})
                                >db.runCommand()
                                >db.runCommand
                                >db.$cmd.findOne({collstats: 'numbers'})
