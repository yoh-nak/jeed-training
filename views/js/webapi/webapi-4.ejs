<%- include ../../head %>
  <body>
 
    <%- include navbar %>

    <div class="container">
      <div class="row">
        <div class="col-sm-3">

        <%- include left %>
        
        </div>
        <div class="col-sm-9">
          <div class="panel panel-primary">
          <div class="panel-heading">JSONPの概要</div>
          <div class="panel-body">

<h4>JSONP（JSON with padding）の仕組み</h4>

<p>JavaScriptでは、sript要素にsrc属性を指定して外部ファイルを読み込みますが、このsrc属性には、別のドメインのURLを指定できます。つまり、script要素のsrc属性として外部のドメインのURLを指定できます。script要素のsrc属性として外部ドメインのWebサーバーと通信を行えば、クロスドメインの制約を受けずにデータ受信が可能です。</p>
<p>そこで、JSON形式のデータを引数として受け取ることができる関数を定義しておき、src属性に指定するURLに「callback」パラメーターを追加して受け取る関数を定義しておき、値としてこの関数名を指定します。たとえば、関数名を「foo」とすると次のような記述になります。</p>

<pre class="prettyprint">
&lt;script src="http://sample-api.com/api.php?id=xxx&<mark>callback=foo</mark>"&gt;&lt;/script&gt;
</pre>

<p>このリクエストに対して、Webサーバーからは、JSON形式に関数名「foo」を追加したデータが返されます。データ受信と同時にfoo関数に引数が渡されて処理が行われます。ここでは、foo関数に引数として連想配列が渡されてます。</p>

<pre class="prettyprint">
<mark>foo(</mark>{"category":"history", "code":200}<mark>);</mark>
</pre>

<p>XMLHttpRequestで同様の機能を実現するには、JavaScriptによって動的に、上記のようなscriptタグを作成できるようにすればよいことになります。</p>

<pre class="prettyprint">
&lt;script&gt;
//データを受信したいときに実行する関数
function getJSONP(){
  //script要素のキャシュを生成
  var elem = document.createElement('script');
  //script要素にsrc属性を付加
  elem.src = 'http://sample-api.com/api.json?id=xxx&<mark>callback=foo</mark>';
  //script要素にtype属性を付加
  elem.type = 'text/javascript';

  //head要素内にscript要素を適用する
  document.getElementByTagName('head')[0].appendChild(elem);
}

//jsonpデータを受信したときに実行される関数の定義
function foo(json){
  //JSON形式を利用した処理
  ...
}
&lt;/script&gt;
</pre>

<p>Webサービスによっては最初からjsonpでデータを受信できる仕組みを持ったサービスがあります。jsonpでデータを受信できるサービスは、サーバーサイド技術を使うことなく、クライアントJavaScriptで受信したJSONデータを処理できることになります。</p>

<p>JSONPの仕組みが分かりにくければ以下のようなソースを見てみましょう。1つ目のscript要素内で定義されたcallback関数が、2つ目のscript要素ないで実行されています。2つ目のscript要素の処理を外部jsファイルで読み込む行為がJSONP（JSON with padding）というわけです。</p>

<pre class="prettyprint">
&lt;!DOCTYPE html&gt;
&lt;html lang="ja"&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;&lt;/title&gt;
&lt;script&gt;
function callback(data){
    document.write(data.category);
    document.write(data.code);
}
&lt;/script&gt;
&lt;script&gt;
callback({"category":"history", "code":200})
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<hr>

<h4>JSONPの問題点</h4>

<p>XMLHttpRequestと違い、JSONPではPOSTメソッドを利用できません。このため、クライアントから外部ドメインのサーバーにデータを送信するには、別の方法を使う必要があります。</p>

<p>また、JSONPはクロスドメインをあえて回避する手法であり、セキュリティに脆弱性があります。悪用されると、ユーザーが知らない間に悪意のあるWebサイトと通信が行われる可能性があります。また、Webサーバーのデータを別のドメインから勝手に利用される危険もあるため、機密情報などのデータを扱うには適していません。あくまでも外部サービスから利用されても構わない一般公開目的のデータに限定して活用する仕組みと言えます。</p>

<hr>

<h4>jQueryでJSONPを取得</h4>
<p>jQueryでJSONPを取得するには、$.getJSONや$.ajaxメソッドを使ことができます。callback関数名は「?」と指定することにより、$.getJSONや$.ajaxのコールバック関数で取得したデータの処理を記述することができます。</p>

<p>APIに指定するGETのクエリ文字列に日本語を使う場合はエンコードする必要があります。</p>
<pre class="prettyprint">
$(function(){
  //日本語をエンコード
  var q = encodeURIComponent('キーワード');
  $.getJSON('http://sample-api.com/api.json?callback=<mark>?</mark>&query=' + q),
    function(data){
      //取得したJSONPデータをJSON形式で表示
      console.log(data);
    }
  );
});
</pre>

          </div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <div id="footer"><%= title %></div>
 
    <script src="http://code.jquery.com/jquery-1.11.0.min.js"></script>
    <script src="js/google-code-prettify/prettify.js"></script>
    <script>prettyPrint();</script>
    <script src="js/bootstrap.min.js"></script>
    <script src="coffee/list-counter.js"></script>

  </body>
</html>