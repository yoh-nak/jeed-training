extends ../../layout

block link
    link(href='../../css/bootstrap.min.css',rel='stylesheet',media='screen')
    link(href='../../js/dtree/dtree.css', rel='stylesheet', media='screen')
    link(href='../../css/style.css',rel='stylesheet',media='screen')
    link(href='../../js/google-code-prettify/prettify.css',rel='stylesheet',media='screen')

block body
    include navbar
    .container
      .row
        .col-sm-3
          include left
        .col-sm-9
          .panel.panel-primary
            .panel-heading Cordovaを用いた開発環境の構築する
            .panel-body
                p Cordovaでは従来から、iOSやAndroidなどの各種プラットフォーム向けネイティブコードによる実行時のフレームワークを提供しています。Cordovaで開発したハイブリッドアプリがモバイル端末内で動作するときには、このフレームワークも同時に動いています。ここでは、このフレームワークをCordovaフレームワークと呼びます。
                p Cordova3.0から、Cordovaフレームワークとは別に、Cordovaを用いたアプリのプロジェクトを管理するためにNode.js製のコマンドラインツールが導入されるようになりました。Node.jsは非同期I/Oを特徴とするJavaScript処理系です。JavaScriptエンジンとして、Chromeがオープンソースで公開しているV8を利用しています。
                p Cordovaが提供するコマンドラインツールは、Cordovaフレームワークを用いたアプリのプロジェクトの作成・管理に利用されます。このツールをインストールすると、ターミナルでcordovaコマンドが利用できるようになります。開発者はcordovaコマンドによって開発したいアプリのプロジェクトのひな形を生成できます。AndroidとiOSなど、複数のプラットフォームに向けたアプリを開発する際にワンソースでクロスプラットフォームな構成のプロジェクトをcordovaコマンドで作成することができます。
                p 従来は、開発者は手動でCordovaフレームワークをプラットフォームごとのプロジェクトにセットアップする必要がありましたが、このコマンドラインツールにより、すばやくプロジェクトを作成して開発を始められるようになりました。また、各プラットフォーム用のプロジェクトは開発者が手動で作成する必要がありましたが、cordovaコマンドを用いることですばやくかくプラットフォームに対応するプロジェクトをセットアップできます。
                p 本書では、Cordovaが提供するNode.jsのコマンドラインツールをcordovaコマンド、各プラットフォームのOSで実行時に動作するフレームワークをCordovaフレームワークと呼びます。
                .alert.alert-info Node.jsのインストール
                p cordovaコマンドを導入するため、まずNode.jsをインストールします。下記URLからNode.jsのWebサイトにアクセスし、その表示に従って開発マシンにNode.jsをインストールしてください。
                ul
                    li URL Node.js<br><a href="http://nodejs.org/" target="_blank">http://nodejs.org</a>
                p Node.jsをインストールすると、Node.jsのパッケージマネージャーであるnpmも同時にインストールされます。ターミナルを開き、下記のようにしてNode.jsとnpmがインストールされているかどうかを確認してください。成功すれば、Node.jsとnpmのバージョンが表示されます。
                pre
                    :code
                        $ node -v
                        v0.10.2

                        $ npm -v
                        1.2.32
                p 開発者はnpmを通じて、Node.jsの様々なライブラリやツールをインストールすることができます。Cordovaのコマンドラインツールもこのnpmを用いてインストールします。
                .alert.alert-info cordovaのコマンドラインツールをインストールする
                p npmがインストールできたら、Cordovaのコマンドラインツールインターフェースであるcordovaコマンドを、npmを通じてインストールします。ターミナルを開いて、以下のようにnpmコマンドを実行してください。
                pre
                    :code
                        $ npm install cordova -g
                p 依存するライブラリがインストールされるので、完了するまで数分待ちます。インストールされたら、バージョンを確認して正しく起動できるかどうかを確かめてください。npm installコマンドに-gオプションを付けるのを忘れないでください。-gオプションは、そのマシンのグローバルな領域にインストールするという意味です。
                p また、LinuxやMac OS X環境で「npm ERR! Please try running this command again as root/Administrator.」と表示された場合は、以下のようにnpmコマンドの前にsudoコマンドを付けて管理者権限で実行してください。
                pre
                    :code
                        $ sudo npm install cordova -g
                p インストールしたら、バージョンを確認して起動できるかどうかを確かめてください。
                pre
                    :code
                        $ cordova -v
                        3.0.6
                p cordovaコマンドは、Android SDKに含まれているコマンドを内部で利用するため、Android SDKに含まれているディレクトリにパスを通す必要があります。Androd向けアプリを開発する際には、あらかじめ次のように（Android SDKを展開したディレクトリ）/sdk/tools/と/sdk/platform-toolsディレクトリにパスを追加します。ここでは、Mac OS Xのターミナルにおいてデフォルトで利用されているBashの設定ファイルである.bash_profile以下にパスを追加しています。
                p 以下のように環境に応じてパスを設定してください。
                pre
                    :code
                        $ echo "export PATH=$PATH:path/to/adt-bundle-max-x86_64-20130729/sdk/tools/" \
                          >> ~/.bash_profile
                        $ echo "export \
                          >> PATH=$PATH:path/to/adt-bundle-mac-x86_64-20130729/sdk/platform-tools/" \
                          >> ~/.bash_profile

                        $ source ~/.bash_profile
                p Android SDKのパスを追加したら、ターミナルからandroidコマンドとadbコマンドが実行できることを確認して下さい。
                pre
                    :code
                        $ android -h

                          Usage:
                          android [global options] action [action options]
                          Global options:
                          （以下略）

                        $ adb version
                        Android Debug Bridge version 1.0.31
                p 一度.bash_profile以下にPATHを設定すると、次回のターミナル実行時からはこの手順は不要になります。                                
    .footer=title
    script(src='http://code.jquery.com/jquery-1.10.2.min.js')
    script(src='../../js/google-code-prettify/prettify.js')
    script.
        prettyPrint();
    script(src='../../js/bootstrap.min.js')
    script(src='../../coffee/list-counter.js')