include ../../head.jade
    body
        include navbar.jade
        .container
            .row
                .col-sm-3
                    .list-group
                        a.list-group-item(href='canvas27.jade')
                              i.badge.badge-info
                              | 準備
                        a.list-group-item(href='canvas28.jade')
                              i.badge.badge-info
                              | 速度
                        a.list-group-item(href='canvas29.jade')
                              i.badge.badge-info
                              | 境界
                        a.list-group-item(href='canvas30.jade')
                              i.badge.badge-info
                              | 加速度
                        a.list-group-item(href='canvas31.jade')
                              i.badge.badge-info
                              | 摩擦
                        a.list-group-item(href='canvas32.jade')
                              i.badge.badge-info
                              | 衝突
                        a.list-group-item(href='canvas33.jade')
                              i.badge.badge-info
                              | 跳ね返り
                        a.list-group-item(href='canvas34.jade')
                              i.badge.badge-info
                              | 運動量保存
                .col-sm-9
                    .panel.panel-primary
                        .panel-heading 運動量保存
                        .panel-body
                            h4 運動量を保存する
                            p
                                a.btn.btn-default(href='../demo/canvas/exercise5/index8.html',target='_blank')
                                    i.glyphicon.glyphicon-play
                                    | デモ
                            p 前のサンプルでは、アステロイドは衝突前と同じ速度で跳ね返っていました。跳ね返っても、速度の向きが逆になるだけだったのです。これでもすばらしいことですが、ついさき触れたように、このままでは衝突、跳ね返りのエフェクトとしてとてもリアルだとは言いがたいものがあります。リアルな動きを得るためには、アステロイドの運動量を保存するプロセスが必要です。
                            p 運動量の保存とは、両方のアステロイドの速度値とともに、衝突後の個々のアステロイドの速度を計算するプロセスです。このプロセスが入ると、速度が速く質量の大きいアステロイドは、小さいアステロイドをはじき出すことができます。また、速度と質量が同じようなアステロイドが正面衝突すると、ビリヤードのボールが正面衝突したときのように、互いに相手を止めてしまうようにもなります。
                            p しかし、先に進む前に、運動量を計算するための基本要件である質量というプロパティを、アステロイドに追加しなければなりません。
                            p Asteroidクラスのコードを次のものに置き換えて、質量を追加しましょう。
                            pre.prettyprint.linenums
                              | var Asteroid = function(x, y, radius, mass, vX, vY, aX, aY) {
                              |   this.x = x;
                              |   this.y = y;
                              |   this.radius = radius;
                              |   this.mass = mass;
                              | 
                              |   this.vX = vX;
                              |   this.vY = vY;
                              |   this.aX = aX;
                              |   this.aY = aY;
                              | };
                            p 次に、アステロイド作成ループを次のように書き換えて、作成時にアステロイドに質量を与えます。
                            pre.prettyprint.linenums
                              | for (var i = 0; i &lt; 10; i++) {
                              |   var x = 20+(Math.random()*(canvasWidth-40));
                              |   var y = 20+(Math.random()*(canvasHeight-40));
                              | 
                              |   var radius = 5+Math.random()*10;
                              |   var mass = radius/2;
                              | 
                              |   var vX = Math.random()*4-2;
                              |   var vY = Math.random()*4-2;
                              |   //var aX = Math.random()*0.2-0.1;
                              |   //var aY = Math.random()*0.2-0.1;
                              |   var aX = 0;
                              |   var aY = 0;
                              | 
                              |   asteroids.push(new Asteroid(x, y, radius, mass, vX, vY, aX, aY));
                              | }
                            p mass変数が宣言され、新しいアステロイドオブジェクトを作るときにmass引数が追加されていることに注意してください。
                            p 個々のアステロイドに質量を与えたので、質量に速度を掛ければ運動量を計算できます。これにそれほどしっかりしとした意味があるとは考えられませんが、すくなくとも運動量の概念を意識するということが大切です。
                            p 運動量は複雑なテーマであり、完全に消化するためにはそれなりの時間がかかることがわかっているので、私は1つの項で運動量のすべてを説明しようとして立ち往生するつもりはありません。ここでは、方程式の仕組みをていねいに説明していくのではなく、このリアルなエフェクトの実現方法を示すことに主眼を置いています。
                            p 以上の方針のもとで、運動量を実際に保存してみましょう。
                            p 次に、衝突後に個々のアステロイドの速度を反転するコードをコメントアウトするか取り除いて、代わりに次のコードを挿入します。
                            pre.prettyprint.linenums
                              | var vTotal = vX - vXb;
                              | vX = ((tmpAsteroid.mass - tmpAsteroidB.mass) * vX + 2 * tmpAsteroidB.mass * vXb) / (tmpAsteroid.mass + tmpAsteroidB.mass);
                              | vXb = vTotal + vX;
                            p 少し頭がおかしくなってきそうですが、これはまともなコードです。 ブラウザをリフレッシュして、動きを見てみましょう。ずいぶんとリアルになったような気がしませんか?
                            p ここで行っていることは、2つのアステロイドの速度を計算することです。第2のアステロイドの新しい速度は、以前計算した 相対速度に第1のアステロイドの新しい速度を加えれば計算できます。
                            p みなさんが本当にそうしたいと思うのなら止めませんが、私はこのコードを完全に理解しようとは思っていません。私はこのコードを長い間使っていていますが、完全に理解しているふりをするつもりもありません。面倒な数学は、賢い人達に任せたいと思います。
                            pre.prettyprint.linenums
                              | $(function() {  
                              |   var canvas = $('#myCanvas');
                              |   var context = canvas.get(0).getContext('2d');
                              | 
                              |   var canvasWidth = canvas.width();
                              |   var canvasHeight = canvas.height();
                              | 
                              |   $(window).resize(resizeCanvas);
                              | 
                              |   function resizeCanvas() {
                              |     canvas.attr('width', $(window).get(0).innerWidth);
                              |     canvas.attr('height', $(window).get(0).innerHeight);
                              | 
                              |     canvasWidth = canvas.width();
                              |     canvasHeight = canvas.height();
                              |   };
                              | 
                              |   resizeCanvas();
                              | 
                              |   var playAnimation = true;
                              | 
                              |   var startButton = $('#startAnimation');
                              |   var stopButton = $('#stopAnimation');
                              | 
                              |   startButton.hide();
                              |   startButton.click(function() {
                              |     $(this).hide();
                              |     stopButton.show();
                              | 
                              |     playAnimation = true;
                              |     animate();
                              |   });
                              | 
                              |   stopButton.click(function() {
                              |     $(this).hide();
                              |     startButton.show();
                              | 
                              |     playAnimation = false;
                              |   });
                              | 
                              |   var Asteroid = function(x, y, radius, mass, vX, vY, aX, aY) {
                              |     this.x = x;
                              |     this.y = y;
                              |     this.radius = radius;
                              |     this.mass = mass;
                              | 
                              |     this.vX = vX;
                              |     this.vY = vY;
                              |     this.aX = aX;
                              |     this.aY = aY;
                              |   };
                              | 
                              |   var asteroids = new Array();
                              | 
                              |   for (var i = 0; i &lt; 10; i++) {
                              |     var x = 20+(Math.random()*(canvasWidth-40));
                              |     var y = 20+(Math.random()*(canvasHeight-40));
                              | 
                              |     var radius = 5+Math.random()*10;
                              |     var mass = radius/2;
                              | 
                              |     var vX = Math.random()*4-2;
                              |     var vY = Math.random()*4-2;
                              |     //var aX = Math.random()*0.2-0.1;
                              |     //var aY = Math.random()*0.2-0.1;
                              |     var aX = 0;
                              |     var aY = 0;
                              | 
                              |     asteroids.push(new Asteroid(x, y, radius, mass, vX, vY, aX, aY));
                              |   }
                              | 
                              |   function animate(){
                              |     context.clearRect(0, 0, canvasWidth, canvasHeight);
                              | 
                              |     context.fillStyle = 'rgb(255, 255, 255)';
                              | 
                              |     var asteroidsLength = asteroids.length;
                              |     for (var i = 0; i &lt; asteroidsLength; i++) {
                              |       var tmpAsteroid = asteroids[i];
                              | 
                              |       for (var j = i+1; j &lt; asteroidsLength; j++) {
                              |         var tmpAsteroidB = asteroids[j];
                              | 
                              |         var dX = tmpAsteroidB.x - tmpAsteroid.x;
                              |         var dY = tmpAsteroidB.y - tmpAsteroid.y;
                              |         var distance = Math.sqrt((dX*dX)+(dY*dY));
                              | 
                              |         if (distance &lt; tmpAsteroid.radius + tmpAsteroidB.radius) {               
                              |           var angle = Math.atan2(dY, dX);
                              |           var sine = Math.sin(angle);
                              |           var cosine = Math.cos(angle);
                              | 
                              |           var x = 0;
                              |           var y = 0;
                              | 
                              |           var xB = dX * cosine + dY * sine;
                              |           var yB = dY * cosine - dX * sine;
                              | 
                              |           var vX = tmpAsteroid.vX * cosine + tmpAsteroid.vY * sine;
                              |           var vY = tmpAsteroid.vY * cosine - tmpAsteroid.vX * sine;
                              | 
                              |           var vXb = tmpAsteroidB.vX * cosine + tmpAsteroidB.vY * sine;
                              |           var vYb = tmpAsteroidB.vY * cosine - tmpAsteroidB.vX * sine;
                              | 
                              |           //vX *= -1;
                              |           //vXb *= -1;
                              |           var vTotal = vX - vXb;
                              |           vX = ((tmpAsteroid.mass - tmpAsteroidB.mass) * vX + 2 * tmpAsteroidB.mass * vXb) / (tmpAsteroid.mass + tmpAsteroidB.mass);
                              |           vXb = vTotal + vX;
                              | 
                              |           xB = x + (tmpAsteroid.radius + tmpAsteroidB.radius);
                              | 
                              |           tmpAsteroid.x = tmpAsteroid.x + (x * cosine - y * sine);
                              |           tmpAsteroid.y = tmpAsteroid.y + (y * cosine + x * sine);
                              | 
                              |           tmpAsteroidB.x = tmpAsteroid.x + (xB * cosine - yB * sine);
                              |           tmpAsteroidB.y = tmpAsteroid.y + (yB * cosine + xB * sine);
                              | 
                              |           tmpAsteroid.vX = vX * cosine - vY * sine;
                              |           tmpAsteroid.vY = vY * cosine + vX * sine;
                              | 
                              |           tmpAsteroidB.vX = vXb * cosine - vYb * sine;
                              |           tmpAsteroidB.vY = vYb * cosine + vXb * sine;
                              |         }
                              |       }
                              | 
                              |       tmpAsteroid.x += tmpAsteroid.vX;
                              |       tmpAsteroid.y += tmpAsteroid.vY;
                              | 
                              |       if (Math.abs(tmpAsteroid.vX) &lt; 10) {
                              |         tmpAsteroid.vX += tmpAsteroid.aX;
                              |       };
                              | 
                              |       if (Math.abs(tmpAsteroid.vY) &lt; 10) {
                              |         tmpAsteroid.vY += tmpAsteroid.aY;
                              |       };
                              | 
                              |       /*
                              |       // Friction
                              |       if (Math.abs(tmpAsteroid.vX) &gt; 0.1) {
                              |       tmpAsteroid.vX *= 0.9;
                              |       } else {
                              |       tmpAsteroid.vX = 0;
                              |       };
                              | 
                              |       if (Math.abs(tmpAsteroid.vY) &gt; 0.1) {
                              |       tmpAsteroid.vY *= 0.9;
                              |       } else {
                              |       tmpAsteroid.vY = 0;
                              |       };
                              |       */
                              | 
                              |       if (tmpAsteroid.x-tmpAsteroid.radius &lt; 0) {
                              |         tmpAsteroid.x = tmpAsteroid.radius;
                              |         tmpAsteroid.vX *= -1;
                              |         tmpAsteroid.aX *= -1;
                              |       }
                              |       else if (tmpAsteroid.x+tmpAsteroid.radius &gt; canvasWidth) {
                              |         tmpAsteroid.x = canvasWidth-tmpAsteroid.radius;
                              |         tmpAsteroid.vX *= -1;
                              |         tmpAsteroid.aX *= -1;
                              |       };
                              | 
                              |       if (tmpAsteroid.y-tmpAsteroid.radius &lt; 0) {
                              |         tmpAsteroid.y = tmpAsteroid.radius;
                              |         tmpAsteroid.vY *= -1;
                              |         tmpAsteroid.aY *= -1;
                              |       }
                              |       else if (tmpAsteroid.y+tmpAsteroid.radius &gt; canvasHeight) {
                              |         tmpAsteroid.y = canvasHeight-tmpAsteroid.radius;
                              |         tmpAsteroid.vY *= -1;
                              |         tmpAsteroid.aY *= -1;
                              |       }
                              | 
                              |       context.beginPath();
                              |       context.arc(tmpAsteroid.x, tmpAsteroid.y, tmpAsteroid.radius, 0, Math.PI*2);
                              |       context.closePath();
                              |       context.fill();
                              |     }
                              | 
                              |     if (playAnimation) {
                              |       setTimeout(animate, 33);
                              |     }
                              |   }
                              | 
                              |   animate();
                              | });
        .footer=title
        script(src='http://code.jquery.com/jquery-1.11.0.min.js')
        script(src='js/google-code-prettify/prettify.js')
        script.
            prettyPrint();
        script(src='js/bootstrap.min.js')
        script(src='coffee/list-counter.js')