include ../../head3.jade
    body
    include navbar.jade
    .container
      .row
        .col-sm-3
          include left.jade
        .col-sm-9
          .panel.panel-primary
            .panel-heading Androidの開発環境
            .panel-body
                p Androidは、Google社が提供するモバイルデバイス向けの組み込みOSです。スマートフォンやタブレットだけではなくTVのセットアップボックスやウェアラブルコンピュータであるGoogle Glassなどで利用されています。
                p Androidの歴史は、2003年にモバイル端末向けのOSを開発するAndroid社の設立によって始まりました。Androidには以下の3つの特徴があります。
                ul
                    li ソースコードがオープンソースで開発されている
                    li OSのカーネルにLinuxを採用している
                    li 端末内のアプリケーションはDalvik仮想マシン上で動く
                p 開発初期からAndroidのコードはApache 2.0ライセンスで公開されています。ソースコードは以下のWebサイトで公開されています。
                ul
                    li Android Open Source Project<br><a href="http://source.andorid.com" target="_blank">http://source.android.com/</a>
                p OSのカーネルには、Linuxを用いています。AndroidのシェルではLinuxに存在するコマンドの一部を利用できます。
                p Android内のアプリのコードは、その端末のCPUによって直接実行されず、Android内部のDalvik仮想マシン上で動作します。Dalvik仮想マシンは、.dexフォーマットにビルドされたアプリを解釈して実行します。Androidは、アプリを実行する際には新しくDalvik仮想マシンを立ち上げて、アプリケーションパッケージを読み込ませます。
                p Android社は2005年にGoogle社によって買収され、携帯電話メーカーの産業団体であるOHA（Open Handset Alliance）に所属するベンダ、ハードウェアメーカー、携帯電話のキャリアを通じて世界中に広まるようになりました。
                p Androidアプリは、プログラミング言語にJavaを用いて開発することが推奨されています。Androidを開発するためのツールであるAndroid SDKは、Javaで記述したクラスファイルを.dexフォーマットに変換してアプリとしてビルドします。したがって、Javaはプログラミング言語として利用されていますが、Android内部ではclassファイルやJava仮想マシンは用いられていません。
                p 開発したアプリは、基本的にGoogle Play Storeで配布されます。アプリ配布の条件はiOSほど厳しくなく、サードパーティ製のアプリマーケットからアプリをインストールすることもできます。
                p 対応CPUは、ARMやMIPSやx86ですが、2013年10月現在で普及しているAndroid端末のCPUの多くはARMです。Android端末にインストールされるアプリは、Dalvik仮想マシンが解釈できるバイトコードであれば問題ないため、アプリをCPUごとにビルドし直す必要はありません。
                p Androidは日本でのモバイルOSのシェアの大部分をiOSと二分しています。
                .alert.alert-info Android （Android SDK + Eclipse）の開発環境を構築する
                p さて、Androidに関する基本的な説明が終わったので、次はAndroidアプリの開発環境を構築していく手順を説明します。以下のようになります。
                ol
                    li Android SDKをインストールする
                    li EclipseでAndroidアプリのプロジェクトを作成する
                    li Androidエミュレーターを起ち上げる
                    li プロジェクトを実行してエミュレータで確認数r
                    li 実機で確認する
                p 本書では、Mac OS XからAndroidアプリの開発環境を導入する手順を紹介していきますが、WindowsでもLinuxでもその手順はほとんど変わりません。
                .alert.alert-info 必要とする環境
                p Androidアプリ開発環境に必要なものを確認していきます。以下のようになります。
                ul
                    li Linux、Windows、Mac OS XのいずれかのOS
                    li JDK（Java SE Development Kit）
                p Androidは、iOSアプリ開発とは違ってLinuxやWindowsやMac OS Xに向けてマルチプラットフォームな開発環境を提供しています。Androidアプリの開発にはJavaやそのコンパイラを部分的に利用し、開発環境の多くはJavaによって記述されています。JDKには、Javaで記述したアプリの動作に必要なJVM（Java仮想マシン）やJavaのコンパイラが含まれています。したがって、これらのOSとJDKをインストールしておけば問題ありません。
                p JDKをインストールするには、以下のURLからJDKをインストールしてください。すでにJDKをインストールしている場合には必要ありません。
                ul
                    li Java SE Development Kit 7 Download<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a>
                p iOSでは実機で開発する際には開発者ライセンスを購入する必要がありましたが、Androidではその必要はありません。
                .alert.alert-info Android SDKをインストールする
                p Androidアプリの開発環境を整えるためにAndroid SDK（Android Software Development Kit）をインストールします。この中には、起動すればすぐに利用できるAndroidの開発環境であるIDE、Android端末に関連する開発ツール・ライブラリ、Android端末をパソコン上で再現するエミュレータなど、Androidアプリを開発するためのものがすべて一式揃っています。IDEには、Androidアプリ開発用にあらかじめカスタマイズされたEclipseが収められています。
                p Android SDKは、以下のページで[Download the SDK]ボタンを押し、圧縮ファイルをダウンロードしていきます。
                ul
                    li Android SDK Download<br><a href="http://developer.android.com/sdk/index.html" target="_blank">http://developer.android.com/sdk/index.html</a>
                p 圧縮ファイルのダウンロードが終わったら、任意の場所に展開してください。
                .alert.alert-info Eclipseを起動する
                p 解凍したAndroid SDKのeclipseディレクトリに移動し、Eclipseを起動します。
                p EclipseはIBM社が開発したオープンソースのIDEです。Eclipseにプラグインを実装することで様々なプラットフォームに向けたIDEを提供できます。Androidでは、ADT（Android Development Tool）というAndroidアプリ開発用のプラグインを提供しています。
                p Android SDKにバンドルされているEclipseには、あらかじめADTが組み込まれているので、起動するとすぐにAndroidアプリ開発に移行することができます。
                .alert.alert-info Eclipseの初期設定
                p Eclipseを起動するとワークスペースの設定を求めるダイアログが表示されます。[Workspace]欄にディレクトリを指定して[OK]ボタンを押します。
                p ワークスペースとは、EclipseがプロジェクトやEclipse自体の設定ファイルを置く場所を指定します。指定したディレクトリのなかにmetadataディレクトリが作成され、その中にEclipse自体の設定が保存されます。また、新しくプロジェクトを作成する際にも指定したワークスペースのディレクトリ以下にプロジェクトが作成されます。
                p [Use this as the default and do not ask again]にチェックして入れておくと、次回の起動時にこのダイアログを表示しないようにできます。
                .alert.alert-info プロジェクトの作成
                p ワークスペースを指定してEclipseを起動すると、「Welcome!」画面が表示されます。
                p [New Android Application...]ボタンを押すと、新しく作成するプロジェクトの基本設定を行うダイアログが表示されます。[Application Name]欄にアプリケーション名、[Project Name]欄にプロジェクト名を入力します。ここでは両方とも「HelloWorldExample」と入力して「New」ボタンを押します。
                p 次のダイアログでは以下のように設定します。プロジェクトのひな形にアイコンやアクティビティのコードをいれるかどうかを選択します。[Create Ativity]にチェックを付けるのを忘れないでください。
                p 次のダイアログでは、起動アイコンについての初期設定を行います。以下のように特に設定せずにそのままにしておいて結構です。
                p 次のダイアログでは、アクティビティをあらかじめプロジェクトに作成しておくかどうかについて設定します。Androidのひな形を選択できますが、ここでは特に必要ないので空のアクティビティコードを生成する「Blank Activity」を選択します。以下のように入力します。
                p 次のダイアログでは、起動アイコンについての初期設定を行います。以下のように特に設定せずにそのままにしておいて結構です。アクティビティやレイアウトの名前を設定します。ここでは特に変える必要がないので、[Finish]ボタンをクリックするだけです。プロジェクトの作成が完了するとEclipseのAndroidアプリのプロジェクトが開きます。
                .alert.alert-info エミュレータを起動する
                p Android SDKには、Android端末をパソコン上で再現するエミュレータが付属しています。これにより、アプリの開発者は、実機を持っていなくても様々なバージョンのAndroid端末をテストすることができます。
                p Androidエミュレータを利用するには、Android Virtual Device Managerを使ってVirtual Deviceを追加します。Virtual Deviceとは、有り体に言えばAndroidエミュレータお起動設定です。
                p Eclipseの左上のメニューにあるAndrodエミュレータのアイコンをクリックすると、Android Virtual Device Managerのダイアログが表示されます。Virtual Deviceに含まれる設定とは、そのAndroid端末のOSのバージョン、解像度、メモリの大きさ、その他各種の項目です。
                p ダイアログの右上にある[New]ボタンを押すと、新しく作成するプロジェクトの基本設定を行うダイアログが表示されます。Androidのエミュレータを起動するための新しい設定を追加できます。ここでは以下のようにNexus One端末のエミュレータの起動設定を入力します。
                p 追加したNexus OneのVirtual Deviceの項目をクリックして、右側にある[Start]ボタンを押します。
                p 新しいウィンドウが表示され、Androidエミュレータが起動します。
                p Androidエミュレータは、端末のスペックやOSの挙動をすべて正確にエミュレーションします。iOSシミュレータとは違って、Androidのエミュレータの場合は、Android端末のCPUなどをまるごとエミュレーションするので動きが遅いという欠点があります。
                .alert.alert-info プロジェクトを実行する
                p Eclipseからプロジェクトを実行して実際にアプリを動かしてみます。
                p HelloWorldExampleのプロジェクトのディレクトリにフォーカスして、Eclipseの上部にある実行ボタンをクリックします。
                p しばらくすると、エミュレータ上にアプリがインストールされて実行されます。
                .alert.alert-info 実機での確認
                p エミュレータと区別する意味で、実際に手元にあるモバイル端末はしばしば「実機」と呼ばれます。ここではEclipseから実機にアプリをインストールして確認する手順を簡単に解説します。
                .alert.alert-info 開発者オプションを設定する
                p EclipseからAndroidアプリをインストールして実行するには、まず開発者オプションのUSBデバッグオプションを有効にします。Androidの設定アプリを起動してください。
                h4 1 開発者向けオプションの表示を有効にする
                p Android 4.2系以降から、デフォルトでは開発者向けオプションは表示されていません。設定画面に開発者オプションの項目を表示するために、設定アプリのタブレット情報の画面に移動してください。その画面に、Androidのビルド番号の項目があるので、タップしてください。すると、画面に「これでデベロッパーになりました！」という、開発者向けの表示が有効になった旨のメッセージが表示されます。
                p Android 4.2系より前のバージョンの場合には、最初から設定画面に開発者向けオプションの項目が表示されます。
                p その後、設定の[提供元不明のアプリ]にチェックを入れて有効にします。Android 2系と3系では、[設定画面]→[アプリケーション]の画面で有効にします。Android 4系では、[設定画面]→[セキュリティ]の画面で有効にします。
                h4 2 USBケーブルで開発マシンとAndroid端末を接続する
                p Windowsの場合には、Android端末と開発マシンを接続するためのドライバをインストールする必要があります。Android端末の種類によって、インストールするドライバは異なります。必要なドライバはそのAndroid端末を出している端末のベンダのページで探してください。
                p Mac OS Xの場合はそのままUSBケーブルでAndroid端末と開発マシンを接続します。
                p 開発用の端末として接続されているかどうかはコマンドラインからadb devicesコマンドを実行して確認します。Android SDKのディレクトリのsdk/platform-toolsディレクトリにabdコマンドがあります。このadb（Android Degug Bridge）コマンドは、Androidエミュレータや実際にUSB接続しているAndroid端末との架け橋になってくれるコマンドです。adbコマンドを通じて端末に対して命令を送ったり、端末の情報を取得したりすることができます。
                p adb devicesコマンドは、マシンに接続しているAndroid端末のリストを表示します。先ほど起動したエミュレータを閉じて、adb devicesコマンドを実行してください。
                h4 3 プロジェクトを実行する
                p Eclipseからプロジェクトを実行すると、自動的に端末にアプリがインストールされ、実行されます。  
    #footer
    script(src='http://code.jquery.com/jquery-1.10.2.min.js')
    script(src='js/bootstrap.min.js')
