extends ../layout

block link
	link(href='../css/bootstrap.min.css',rel='stylesheet',media='screen')
	link(href='../css/bootstrap-theme.min.css',rel='stylesheet',media='screen')
	link(href='../js/dtree/dtree.css', rel='stylesheet', media='screen')
	link(href='../css/style.css',rel='stylesheet',media='screen')
	link(href='../js/google-code-prettify/prettify.css',rel='stylesheet',media='screen')

block content
	include navbar.jade
	.container
		.row
			.col-sm-3
				include left.jade
			.col-sm-9
				.panel.panel-primary
					.panel-heading
						i.glyphicon.glyphicon-book
						| &nbsp;MongoDB資料
					.panel-body
						h4 公式サイト
						p
							a(href='http://www.mongodb.org/',target='_blank') http://www.mongodb.org/
						h4 APIドキュメント
						p
							a(href='http://docs.mongodb.org/manual/',target='_blank') http://docs.mongodb.org/manual/
						pre
							:code

								MongoDBの用語

								データーベス -> データベース
								テーブル -> コレクション
								レコード -> ドキュメント


								Windowsにインストール

								http://www.nilidea.com/17

								MongoDBの設置

								C:\ にダウンロードしてきたzipを展開する
								
								展開したフォルダ名を mongodb に変更する

								C:\mongodb\data フォルダを作成する
								
								C:\mongodb\logs フォルダを作成する

								コマンドプロンプトでC:\mongodb/binディレクトリにcdする

								以下のコマンドを実行してmongodbを起動
								mongod --dbpath=../data

								別のコマンドプロンプトからmongoシェルを扱う

						pre
							:code

								動作確認

								1.MongoDBサーバの起動
								c:/mongodb/bin/mongod.exe --dbpath=../data を実行
								実行するとデフォルトのポート番号 27017 で接続を待ち受ける


								2.コマンドラインクライアントの起動
								コマンドプロンプトを開き、c:/mongodb/bin/mongo.exe を実行

								MongoDB shell version: 1.6.5
								connecting to: test
								>

								上記の様に表示されていればOK

								MongoDB shell version: 1.6.5
								connecting to: test
								Tue Dec 14 18:16:17 Error: couldn't connect to server 127.0.0.1 (anon):1154
								exception: connect failed

								上記の様に表示された場合はサーバが起動しているか確認

								3.データを保存してみる

								> db.samples.save({"name": "Hoge", "email": "hoge@exsample.com"});

								4.保存したデータを取得してみる

								> db.samples.find();
								{ "_id" : ObjectId("4d07367d0205000000003130"), "name" : "Hoge", "email" : "hoge@example.com" }

								5.保存したデータを削除してみる

								> db.samples.remove();
								> db.samples.find();
								>

								6.インデックスを削除してみる

								> db.samples.dropIndexes();
								{
								"nIndexesWas" : 1,
								"msg" : "non-_id indexes dropped for collection",
								"ok" : 1
								}
								>

								7.コレクションを削除してみる

								> db.samples.drop();
								true
								>

						pre
							:code

								MongoDBのCRUD（Create, Read, Update, Delete）



								MongoDBの開始
								$ mongo
								$ mongo データベース名


								MongoDBの終了
								>exit
								>quit()
								Ctrl+「C」


								ヘルプの表示
								>help
								>db.help()
								>db.stats()




								DB「tutorial」に切り替え（ない場合は新規作成）
								>use tutorial


								コレクションの作成
								>db.createCollection('user')；


								コレクションのリネーム
								>db.user.renameCollection('users');


								usersコレクションに挿入
								>db.users.insert({username: 'smith'})


								usersコレクションの検索
								>db.users.find()


								第一引数にidの指定がなければusersコレクションにinsert（idの指定があればupdate）
								>db.users.save({username: 'jones'})


								usersコレクションの全削除
								>db.users.remove()


								usersコレクションのドキュメント数
								>db.users.count()




								>db.users.find();
								>db.users.find({username:'jones'});
								>db.users.find({_id:ObjectId('518869be37d5684f207935ae')})


								usernameがjonesではないデータを表示（ne = not equal）
								>db.users.find({username: {$ne: 'jones'}});


								usersコレクションを更新
								>db.users.update({username: 'smith'}, {$set: {country: 'Canada'}})


								usersコレクションのusernameがjonesのものからcountryだけ表示
								>db.users.find({username:'jones'}, {country: true});


								usersコレクションのドキュメントを削除
								>db.users.update({username: 'smith'},{$unset: {country: 1}}) 






								>db.users.update({username: 'smith'},
								{$set: {favorites: 
								{
								cities: ['Chicago', 'Cheyenne'],
								movies: ['Casablanca', 'The Sting']
								}
								}
								})


								db.users.update({username: 'jones'},
								{$set: {favorites:
								{
								movies: ['Casablanca', 'Rocky']
								}
								}
								})






								>db.users.find()


								絞り込み検索
								>db.users.find({'favorites.movies': 'Casablanca'}) 

								複数行update（4つ目の引数がtrueで複数行更新）
								>db.users.update({'favorites.movies': 'Casablanca'},
								{$addToSet: {'favorites.movies': 'The Maltese Falcon'}},
								false,
								true)


								コレクションのドキュメントの削除
								>db.users.remove({'favorites.cities': 'Cheyenne'})


								コレクションの削除
								>db.users.drop()


								データベースの一覧表示
								>show dbs


								コレクションの一覧表示
								>show collections


								データベースの削除
								>use tutorial

								>db.dropDatabase()






								>use tutorial


								>for(var i=0; i<200000; i++){
								db.numbers.save({num: i});
								}


								>db.numbers.find()


								>db.numbers.find({num: 500})


								199995件目より後を表示（gt = greater than）
								>db.numbers.find({num: {'$gt': 199995}})


								20件目以降25件目より前を表示（lt = less than）
								>db.numbers.find({num: {'$gt': 20, '$lt': 25}})


								$gte（greater than or equal to 以上）
								$lte（less than or equal to 以下）


								$regex（正規表現）
								>db.numbers.find({num: {$regex: /[0-2][0-9]/i}})


								昇順にソートする
								>db.numbers.find().sort({num: 1);


								降順にソートする
								>db.numbers.find().sort({num: -1);


								1件だけ表示
								>db.numbers.findOne();


								3件だけ表示
								>db.numbers.find().limit(3);




								2件目（0件目あり）のドキュメントから3件表示
								>db.numbers.find().slip(2).limit(3);


								絞り込んだドキュメントの件数を表示
								>db.numbers.fine().count();


								一意の値を表示
								>db.numbers.distinct('num');



								100件目、200件目、300件目を抽出
								>db.numbers.find({'num': {$in: [100, 200, 300]});


								100件目、200件目、300件目以外を抽出（nin = not in）
								>db.numbers.find({'num': {$nin: [100, 200, 300]});


								numbersコレクションにemailがあるドキュメントを抽出
								>db.numbers.find({'email': {$exits: true});


								numbersコレクションにemailがないドキュメントを抽出
								>db.numbers.find({'email': {$exits: false});


								数値を5繰り上げる（inc = increment）
								>db.numbers.update({'num': 100}, {$inc: {'num': 5}})


								数値を20繰り下げる
								>db.numbers.update({'num': 100}, {$inc: {'num': -20}})


								リネームする
								>db.numbers.update({'num': 100}, {$rename: {'num': 'number'}})




								データがあったら更新、なかったらインサート（3つ目の引数upsert）
								>db.numbers.update({'num': 100}, {$inc: {'num': 5}}, true);


								１件しか更新されない
								>db.numbers.update({}, {$inc: {'num': 5}});


								全件更新される（4つ目の引数multi）
								>db.numbers.update({}, {$inc: {'num': 5}}, false, true);






								構造の確認
								>db.numbers.find({num: {'$gt': 199995}}).explain()


								インデックスをつける（昇順のインデックスをnumキーにつける）
								>db.numbers.ensureIndex({num: 1})


								インデックスをつける（降順のインデックスをnumキーにつける）
								>db.numbers.ensureIndex({num: -1})


								インデックスの確認
								>db.numbers.getIndexes() 


								クエリのレスポンスが上がっている
								>db.numbers.find({num: {'$gt': 199995}}).explain() 


								インデックスの削除
								>db.numbers.dropIndex({num: 1})


								ユニークキーをつける
								>db.numbers.ensureIndex({num: 1}, {'uniquie': true})






								command.jsで保存
								db.numbers.remove({'num': 100);


								外部ファイルを実行
								mongo tutorial command.js


								load('commands.js');




								バックアップをとる
								mongodump --db tutorial


								バックアップの復元
								mongorestore


								もとのデータベースを削除して復元
								mongorestore --drop






								>db.stats()
								>db.runCommand({dbstats: 1})
								>db.runCommand({collstats: 'numbers'})
								>db.runCommand()
								>db.runCommand
								>db.$cmd.findOne({collstats: 'numbers'})

						pre
							:code
								Windows に MongoDB をインストールする

								Windows に MongoDB をサービスとしてインストールしてみます。

								MongoDB のサイトにアクセスし、環境にあったファイルをダウンロードして展開します。
								http://www.mongodb.org/downloads　（ダウンロード）
								※今回はWindows 64-bit版のバージョン2.0.2をダウンロード


								今回はプログラムもデータも「c:\mongodb」フォルダ以下に配置します。mongodbフォルダを作成し、先ほど展開した中にあるbinフォルダ以下をコピーします。
								|
								C:\mongodb\dataディレクトリを作成します。
								C:\mongodb\logsディレクトリを作成します。

								サービスとして実行したいので、サービスへ登録します。コマンドプロンプトを管理者として実行し、下記のコマンドを実行します。

								cd c:\mongodb\bin

								mongod --install --logpath C:\mongodb\log.txt --dbpath C:\mongodb\db
								log.txtを見ると下記のような感じで結果が確認できます。


								Creating service MongoDB.

								Service creation successful.

								Service can be started from the command line via 'net start "MongoDB"'.

								-- 省略 --


								後は、上記ログに書かれているように下記コマンドでサービスを開始すれば完了です。

								net start "MongoDB"




								念のため、コマンドラインクライアントから接続を確認しておきます。上記の流れだとカレントがc:\mongodb\binになっていますので、そのまま「mongo」と入力して実行すれば接続の確認ができます

						pre
							:code

								ドットインストール
								MongoDB 入門
								http://dotinstall.com/lessons/basic_mongodb

								mongod -h
								mongod --help

								mongod --version

