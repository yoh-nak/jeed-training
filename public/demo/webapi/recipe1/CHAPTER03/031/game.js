enchant();

window.onload = function() {

  core = new Core(320, 320);
  core.fps = 15;

  // ゲームで使用する画像ファイルを指定する 
  core.preload('map1.png', 'map3.png', 'chara0.png', 'clear.png');

  // ステージ(何問目か?)を管理するプロパティ
  core.stage = 0;
  // ステージクリアフラグ(問題を解いたか?を管理するプロパティ)
  core.stageClear = false;
  // 「questions」プロパティに問題の総数を代入する
  for (core.questions in Q);
  
  core.onload = function() {

    // 「makePuzzle」関数でパズルを作成する
    makePuzzle();

    // rootSceneの「enterframe」イベントリスナ
    core.rootScene.addEventListener('enterframe', function(e) {
      // ステージクリア(問題を解いた)なら、クリア画像のスプライトを表示する
      if (core.stageClear == true) clear.y = 100;
    });
  }
  core.start();
}

// パズルを作成する関数
var makePuzzle = function() {

  // 「foreground」プロパティにフォアグラウンドのデータの有(true)、無(false)を代入する
  core.foreground = Q[core.stage].foreground;
  
  // タイル(1ブロック)のサイズが16x16ピクセルのマップを作成する
  map = new Map(16, 16);
  // マップで使用するタイルセット画像に「map3.png」を設定する
  map.image = core.assets['map3.png'];
  // マップデータを読み込む
  map.loadData(Q[core.stage].tile1);
  // マップの衝突判定のデータを設定する
  map.collisionData = Q[core.stage].collision1;
  

  // 「stage」グループを作成する
  stage = new Group();
  // マップを「stage」グループに追加する
  stage.addChild(map);

  // フォアグラウンドのデータがあるなら、
  if (core.foreground) {
    // フォアグラウンド用のマップを作成する
    foregroundMap = new Map(16, 16);
    foregroundMap.image = core.assets['map1.png'];
    foregroundMap.loadData(Q[core.stage].tile2);
    foregroundMap.collisionData = Q[core.stage].collision2;
    stage.addChild(foregroundMap);
  }
  core.rootScene.addChild(stage);

  // プレイヤーを表示するスプライトを作成する 
  var player =new Player(Q[core.stage].px, Q[core.stage].py);
  // プレイヤーを「stage」グループに追加する
  stage.addChild(player);
  

  // 問題番号とスコアをフォントで表示するラベルを作成する
  // 引数はラベル表示位置のxy座標
  var info = new MutableText(110, 320 - 16);
  // 表示する文字列の初期設定
  info.text = 'QUESTION No' + (core.stage + 1);
  stage.addChild(info);

  // クリア画像を表示するスプライトを作成する
  clear = new Sprite(267, 48);
  // 画像に「clear.png」を設定する
  clear.image = core.assets['clear.png'];
  clear.x = 30;   // x座標
  clear.y = -100; // y座標
  // クリア画像の「touchstart」イベントリスナ
  clear.addEventListener('touchstart', function(e) {
    
    // クリア画像を画面外の見えない位置に移動する
    clear.y = -68;
    
    // 次の問題を作成する処理
    
    core.stageClear = false;
    core.stage ++;
    // 次の問題があるなら
    if (core.stage <= core.questions) {
      // 次の問題の番号を表示する
      info.text = 'QUESTION No' + (core.stage + 1);
      // 現在のステージを削除する
      core.rootScene.removeChild(stage);
      delete stage;
      // 新しいパズルを作成する
      makePuzzle();
    }
  });
  core.rootScene.addChild(clear);
  
  // バーチャルパッドを作成する
  var pad = new Pad();
  pad.x = 0;   // x座標
  pad.y = 220; // y座標
  core.rootScene.addChild(pad);

}

// プレイヤーのスプライトを作成するクラス
var Player = enchant.Class.create(enchant.Sprite, {
  // 「initialize」メソッド(コンストラクタ)
  initialize: function(x, y) {
    // 継承元をコール
    enchant.Sprite.call(this, 32, 32);
    this.x = x; // x座標
    this.y = y; // y座標
    
    // サーフィスを作成する(サイズ320x320)
    var image = new Surface(96, 128);
    // 「chara0.png」の(0, 0)の位置から幅96ピクセル、高さ128ピクセルの領域を、
    // (0, 0)の位置に幅96ピクセル、高さ128ピクセルで描画する
    image.draw(core.assets['chara0.png'], 0, 0, 96, 128, 0, 0, 96, 128);
    // サーフィスをスプライトの画像に設定する 
    this.image = image;
    
    // 移動フラグ(移動中なら「true」、停止中なら「false」)
    this.isMoving = false;
    // プレイヤーの向きを設定するプロパティ
    this.direction = 0;
    // 「enterframe」イベントリスナ 
    this.addEventListener('enterframe', function() {
      
      // プレイヤーの移動処理
      
      // 向きに応じたスプライト画像を表示する
      this.frame = this.direction * 3;
 
      // 当たり判定を行うマップのxy座標を求める
      var x = this.x + (this.vx ? this.vx / Math.abs(this.vx) * 16 : 0) + 16;
      var y = this.y + (this.vy ? this.vy / Math.abs(this.vy) * 16 : 0) + 24;
      // マップ上の(x, y)地点の当たり判定の有無をチェックする
      if (map.hitTest(x, y)) {
        // 当たり判定があったら、1マス移動しきってから
        if ((this.vx && (this.x-8) % 16 == 0) || (this.vy && this.y % 16 == 0)) {
          // 移動を停止する
          this.isMoving = false;
        }
      }
 
      // フォアグラウンドのマップがあるなら
      if (core.foreground) {
        // フォラグラウンドマップ上の(x, y)地点に当たり判定をの有無をチェックする
        if (foregroundMap.hitTest(x,y)) {
          // 当たり判定があったら、プレイヤーを停止する
          this.isMoving = false;
          // プレイヤーを初期位置に戻す
          this.x = Q[core.stage].px;
          this.y = Q[core.stage].py;
          this.direction = 0;
        }
      }
      
      // 移動中なら
      if (this.isMoving) {
        // 座標(this.vx, this.vy)にプレイヤーを移動する
        this.moveBy(this.vx, this.vy);
        
        // ステージクリアの処理
        
        // 出口から外に出たなら
        if (x < 0 || x > 320 || y < 0 || y > 320) {
          // プレイヤーを停止する
          this.isMoving = false;
          // ステージクリアフラグを「true」にする
          core.stageClear = true;
        }
      // 停止中なら
      } else {
        
        // キー入力に応じて移動方向と設定する処理
        
        // ｘとy方向の移動量を「0」にする
        this.vx = this.vy = 0;
        // 左ボタンが押されたら、左方向に移動するように設定する
        if (core.input.left) {
          this.direction = 1;
          this.vx = -4;
        } 
        // 右ボタンが押されたら、右方向に移動するように設定する
        if (core.input.right) {
          this.direction = 2;
          this.vx = 4;
        }
        // 上ボタンが押されたら、上方向に移動するように設定する
        if (core.input.up) {
          this.direction = 3;
          this.vy = -4;
        }
        // 下ボタンが押されたら、下方向に移動するように設定する
        if (core.input.down) {
          this.direction = 0;
          this.vy = 4;
        }
        // ｘとy方向の移動量が設定されたら、移動中にする
        if (this.vx || this.vy) this.isMoving = true;
      }
    });
   }
});


// パズルの問題を定義したJSONオブジェクト
var Q =
{ 
  // 1問目
  0: {
    px: 32 * 2, // プレイヤーの初期位置のx座標
    py: 32 * 2, // プレイヤーの初期位置のｙ座標
    foreground: false, // フォアグラウンドマップの有無
    tile1: [ // マップのタイルデータ
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,0,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,16,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]
    ],
    collision1: [ // マップの当たり判定データ
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ]
},
  // 2問目
  1: {
    px: 32 * 2,
    py: 32 * 3,
    foreground: false,
    tile1: [
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,0,0,0,0,0,0,16,16,0,0,0,0,0,0,7,7,7],
      [7,7,7,0,16,16,16,16,0,16,16,0,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,0,16,16,0,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,17,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,17,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,16,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,16,16,16,17,16,16,16,16,16,16,16,16,0,7,7,7],
      [7,7,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],
      [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7]
    ],
    collision1: [
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0],
      [0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ]
  },
  // 3問目
  2: {
    px: 32 * 5,
    py: 32 * 4,
    foreground: true,
    tile1: [
      [0,0,0,0,0,0,0,0,0,0,16,16,0,0,0,0,0,0,0,0],
      [0,16,16,16,16,0,16,16,16,16,16,16,16,16,16,0,16,16,16,0],
      [0,16,16,16,16,0,16,16,16,16,16,16,16,16,16,0,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,17,16,16,16,16,16,16,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,17,16,16,16,16,16,16,16,16,16,0],
      [0,16,16,16,17,16,16,16,16,17,17,17,17,16,16,16,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,17,16,16,17,16,16,16,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,17,16,16,17,16,16,16,16,16,16,0],
      [0,0,0,0,16,16,16,16,16,17,17,17,17,16,16,16,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,16,16,0],
      [0,16,16,16,16,16,17,16,16,16,16,16,16,16,16,16,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0],
      [0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ],
    collision1: [
      [1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1],
      [1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
      [1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1],
      [1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1],
      [1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
    ],
    tile2: [ // フォアグラウンドマップのタイルデータ
      [-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
    ],
    collision2: [ // フォアグラウンドマップの当たり判定データ
      [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ] 
  }
}

