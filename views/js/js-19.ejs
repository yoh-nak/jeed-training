<%- include ../head %>
  <body>
 
    <%- include navbar %>

    <div class="container">
      <div class="row">
        <div class="col-sm-3">

        <%- include left %>

        </div>
        <div class="col-sm-9">
          <div class="panel panel-primary">
          <div class="panel-heading">
            <i class="glyphicon glyphicon-book"></i> 高度な関数の使い方</div>
          <div class="panel-body">

<h4>名前付き引数</h4>

<p>名前付き引数とは、呼び出し時に名前を明示的に指定できる引数のことです。引数が多くなっても、コートの意味がわかりやすく、省略可能な引数を表現しやすくなります。また引数の順番を自由に変更できます。</p>
<p>引数の数の多い関数や、省略可能な引数が多く、いろいろなパターンがある場合に有効です。</p>

<pre class="prettyprint">
function triangle(<mark>args</mark>){
  if(<mark>args.base</mark> == undefined) {<mark>args.base</mark> = 1;}
  if(<mark>args.height</mark> == undefined) {<mark>args.height</mark> = 1;}

  return args.base * args.height / 2;
}

document.writeln(triangle(<mark>{base:5, height:4}</mark>));
</pre>

<hr>

<h4>高階関数</h4>
<p>JavaScriptの関数はデータ型の一種であり、数値型や文字列型の値と同様、関数の引数として渡したり、戻り値として返したりすることができます。関数を引数、戻り値として扱う関数のことを高階関数と呼びます。</p>

<pre class="prettyprint">
function arrayWalk(data, <mark>f</mark>){
  for(var key in data){
    <mark>f(key, data[key])</mark>;
  }
}

function <mark>showElement(key, value)</mark>{
  document.writeln(key + ': ' + value);
}

var ary = [1, 2, 4, 8, 16];
arrayWalk(ary, <mark>showElement</mark>);
</pre>

<p>無名関数でシンプルに記述すると以下のようになります。</p>

<pre class="prettyprint">
function arrayWalk(data, <mark>f</mark>){
  for(var key in data){
    <mark>f(key, data[key])</mark>;
  }
}

var ary = [1, 2, 4, 8, 16];
arrayWalk(ary, <mark>function(key, value)</mark>{
  document.writeln('key + ': ' + value);
});
</pre>

<hr>

<h4>クロージャー</h4>
<p>クロージャーとは関数内のローカル変数を参照している関数内の関数のことです。関数の中で使われたローカル変数は、関数が終了した時点で破棄されるはずですが、closure関数から返された無名関数がローカル変数counterを参照し続けているので、closure関数終了後もローカル変数counterの値が保持され続けます。</p>

<pre class="prettyprint">
function closure(init){
  var counter = init;

  return function(){
    return ++counter;
  }
}

var myClosure = closure(1);
document.writeln(myClosure()); //=> 2
document.writeln(myClosure()); //=> 3
document.writeln(myClosure()); //=> 4
</pre>

<pre class="prettyprint">
function closure(init){
  var counter = init;

  return function(){
    return ++counter;
  }
}

var myClosure1 = closure(1);
var myClosure2 = closure(100);
document.writeln(myClosure1()); //=> 2
document.writeln(myClosure2()); //=> 101
document.writeln(myClosure1()); //=> 3
document.writeln(myClosure2()); //=> 102
</pre>

<p>クロージャーは処理を1つしかもたないシンプルなオブジェクトのように動作します。簡単な処理であれば、オブジェクトよりもクロージャーのほうがシンプルに記述できるため、変数に伴う処理がひとつしかない場合はクロージャーが便利です。それに対して、複数の処理を必要とする場合はオブジェクトを使うとよいでしょう。</p>

<pre>
function クロージャー関数(引数[, 引数, ...]){
  var プロパティ = 引数から受け取った値;
  var プロパティ = 引数から受け取った値;
  var プロパティ = 引数から受け取った値;
  ...

  //ひとつのメソッド
  return function(){
    メソッドの処理
  }
}
</pre>

          </div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <div id="footer"><%= title %></div>
 
    <script src="http://code.jquery.com/jquery.js"></script>
    <script src="js/google-code-prettify/prettify.js"></script>
    <script>prettyPrint();</script>
    <script src="js/bootstrap.min.js"></script>
    <script src="coffee/list-counter.js"></script>
  </body>
</html>