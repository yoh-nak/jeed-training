extends ../layout

block link
    link(href='../css/bootstrap.min.css',rel='stylesheet',media='screen')
    link(href='../css/bootstrap-theme.min.css',rel='stylesheet',media='screen')
    link(href='../js/dtree/dtree.css', rel='stylesheet', media='screen')
    link(href='../css/style.css',rel='stylesheet',media='screen')
    link(href='../js/google-code-prettify/prettify.css',rel='stylesheet',media='screen')

block content
    include navbar
    .container
        .row
            .col-sm-3
                include left
            .col-sm-9
                .panel.panel-primary
                    .panel-heading
                        i.glyphicon.glyphicon-book
                        |  MongoDBと連携する①
                    .panel-body
                        .alert.alert-info MongoDBにログイン
                        pre(class='prettyprint linenums:1')
                            :code
                                mongo
                        .alert.alert-info データベースを作成する
                        pre(class='prettyprint linenums:1')
                            :code
                                > use mydb
                        .alert.alert-info ドキュメントを保存する
                        p 自動的にコレクション「mydata」が生成されている。
                        pre(class='prettyprint linenums:1')
                            :code
                                > db.mydata.save({name:'taro',mail:'taro@yamada',memo:'this is test.'})
                                > db.mydata.save({name:'hanako',mail:'hanakao@flower',memo:'my friend.'})
                        p 何故かmongooseから複数形のコレクション名で挿入される？
                        pre(class='prettyprint linenums:1')
                            :code
                                > db.mydatas.save({name:'taro',mail:'taro@yamada',memo:'this is test.'})
                                > db.mydatas.save({name:'hanako',mail:'hanakao@flower',memo:'my friend.'})
                        .alert.alert-info ドキュメントを表示する
                        pre(class='prettyprint linenums:1')
                            :code
                                > db.mydata.find()
                        .alert.alert-info ドキュメントを絞り込む
                        p nameキーがtaroのドキュメントを表示
                        pre(class='prettyprint linenums:1')
                            :code
                                > db.mydata.find({name:'taro'})
                        p nameキーにkoを含むドキュメントを表示
                        pre(class='prettyprint linenums:1')
                            :code
                                > db.mydata.find({name:/ko/})
                        .alert.alert-info Webからデータベースにデータを追加
                        pre(class='prettyprint linenums:1')
                            :code
                                $ express myapp -c stylus
                                $ cd myapp
                                $ npm install
                        pre(class='prettyprint linenums:1')
                            :code
                                $ npm install mongoose --save
                        p views/index.jade
                        pre(class='prettyprint linenums:1')
                            :code
                                extends layout

                                block content
                                    h1= title
                                    p Welcome to #{title}
                                    p#msg #{msg}

                                    form(action='/',method='post')
                                        input(type='text',name='name')
                                        br
                                        input(type='text',name='mail')
                                        br
                                        input(type='text',name='memo')
                                        br
                                        input(type='submit',value='send')
                                    hr
                                    table(border='1')
                                        tr
                                            th Name
                                            th Mail
                                            th memo
                                        -each data in datas
                                            tr
                                                td= data.name
                                                td= data.mail
                                                td= data.memo
                        p routes/index.js
                        pre(class='prettyprint linenums:1')
                            :code
                                var mongoose = require('mongoose');

                                //MongoDBにはスキーマはないが、mongooseの使用でスキーマを定義
                                var Schema = mongoose.Schema;
                                var mydataSchema = new Schema({
                                    'name' : String,
                                    'mail' : String,
                                    'memo' : String
                                });

                                //mongooseの使用で、コレクションmydataに先ほど定義したスキーマをセット
                                var MyData = mongoose.model('mydata', mydataSchema);

                                //データベースmydbに接続
                                var db = mongoose.connect('mongodb://localhost/mydb');

                                exports.index = function(req, res) {
                                    //コレクションmydataからドキュメントを検索
                                    MyData.find(function(err, docs) {
                                        if (err){
                                            console.log(err);
                                        }
                                        res.render('index', {
                                            title : 'Express',
                                            msg : 'データの一覧リスト',
                                            datas : docs
                                        });
                                    });
                                };

                                exports.index_post = function(req, res){
                                    var name = req.body.name;
                                    var mail = req.body.mail;
                                    var memo = req.body.memo;

                                    var data = new MyData({
                                        'name': name,
                                        'mail': mail,
                                        'memo': memo
                                    });
                                    data.save(function(err){
                                        if(err){
                                            console.log(err);
                                        }
                                        else{
                                            if(err){
                                                console.log(err);
                                            }
                                            res.redirect('/');
                                        }
                                    });
                                };
                        p app.js
                        pre(class='prettyprint linenums:1')
                            :code
                                /**
                                 * Module dependencies.
                                 */

                                var express = require('express');
                                var routes = require('./routes');
                                var user = require('./routes/user');
                                var http = require('http');
                                var path = require('path');

                                var app = express();

                                // all environments
                                app.set('port', process.env.PORT || 3000);
                                app.set('views', path.join(__dirname, 'views'));
                                app.set('view engine', 'jade');
                                app.use(express.favicon());
                                app.use(express.logger('dev'));
                                app.use(express.json());
                                app.use(express.urlencoded());
                                app.use(express.methodOverride());
                                app.use(app.router);
                                app.use(require('stylus').middleware(path.join(__dirname, 'public')));
                                app.use(express.static(path.join(__dirname, 'public')));

                                // development only
                                if ('development' == app.get('env')) {
                                  app.use(express.errorHandler());
                                }

                                app.get('/', routes.index);
                                <mark>app.post('/', routes.index_post);</mark>
                                app.get('/users', user.list);

                                http.createServer(app).listen(app.get('port'), function(){
                                  console.log('Express server listening on port ' + app.get('port'));
                                });
