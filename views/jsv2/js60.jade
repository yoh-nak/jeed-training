extends ../layout

block link
    include ../link1

block content
    include navbar
    .container
        .row
            .col-sm-3
                include left
            .col-sm-9
                .panel.panel-primary
                    .panel-heading
                        i.glyphicon.glyphicon-book
                        |  Web Storageの使い方
                    .panel-body
                        p Webアプリケーションのデータを保存したい場合、今まではCookieを利用したり、サーバー側でセッションを利用したりしましたが、 Web Storageを使うことで、簡単に大容量で安全に情報を保存できるように設計されています。
                        p Web Storageには2種類のストレージがあり、1つはLocal Storageで、ブラウザにデータが保存され、localStorageオブジェクトの、プロパティやメソッドでアクセスできます。Local Storageは、セキュリティ上の理由によって削除されるか、明示的に削除しない限りデータが保持されるため、ブラウザのウィンドウを閉じても、再度立ち上げるとデータにアクセスすることができます。
                        p また、同一オリジンであれば、ブラウザの別タブでデータを共有することができます。
                        p もう1つはSession Storageで、一連のページのやりとりの間データが保持され、sessionStorageオブジェクトのプロパティやメソッドでアクセスできます。タブを閉じるとSession Storageのデータは破棄されます。
                        p また、同一オリジンであっても、ブラウザの別タブでデータを共有することはできません。
                        p
                            a.btn.btn-default(href='https://developer.mozilla.org/ja/docs/DOM/Storage', target='_blank')
                                i.glyphicon.glyphicon-info-sign
                                | 参考：MDN
                        hr
                        h4 Web Storageの対応状況を調べる
                        p
                            a.btn.btn-default(href='http://caniuse.com/#search=web%20storage', target='_blank')
                                i.glyphicon.glyphicon-info-sign
                                | 参考：Can I use...
                        pre(class='prettyprint linenums:1')
                            :code
                                if(typeof(Storage) === 'undefined'){
                                    console.log('Web Storageに対応していません')
                                }
                                else{
                                    console.log('Web Storageに対応しています')
                                }
                        hr
                        h4 Local Storage
                        p コンソールからLocal Storageを扱ってみましょう。データはChrome Developer ToolsのResourcesタブのLocal Storageから確認できます。
                        p: u Local Storageに格納する
                        pre(class='prettyprint linenums:1')
                            :code
                                //メソッドで格納する
                                localStorage.setItem('MYDATA','hoge');

                                //オブジェクトに代入する
                                localStorage.MYDATA = 'hoge';
                                localStorage['MYDATA'] = 'hoge';

                        p: u Local Storageからデータをを取得する
                        pre(class='prettyprint linenums:1')
                            :code
                                //メソッドで取得する
                                var data = localStorage.getItem('MYDATA');

                                //オブジェクトで取得する
                                var data = localStorage.MYDATA;
                                var data = localStorage['MYDATA'];

                        p: u Local Storageからデータを削除する
                        pre(class='prettyprint linenums:1')
                            :code
                                //メソッドで削除する
                                localStorage.removeItem('MYDATA');

                                //delete演算子で削除する
                                delete localStorage.MYDATA;
                                delete localStorage['MYDATA'];

                        p: u Local Storageに格納されたデータ数を取得する
                        pre(class='prettyprint linenums:1')
                            :code
                                localStorage.length

                        p: u Local Storageに保存されているデータをすべて削除する
                        pre(class='prettyprint linenums:1')
                            :code
                                localStorage.clear();
                        p: u Local Storageに格納したデータをすべて取得する
                        pre(class='prettyprint linenums:1')
                            :code
                                for(var i = 0; i < localStorage.length; i++){
                                    console.log(localStorage.key(i) + ': ' + localStorage.getItem(localStorage.key(i)));
                                }
                        p: u Local Storageの変更をイベントで取得する
                        pre(class='prettyprint linenums:1')
                            :code
                                window.addEventListener('storage',function(e){
                                    //変更があったデータのキーを取得
                                    console.log(e.key);
                                    //変更があったキーの変更前の値を取得
                                    console.log(e.oldValue);
                                    //変更があったキーの変更後の値を取得
                                    console.log(e.newValue);
                                    //変更があったキーのデータをオブジェクトで取得
                                    console.log(e.storageArea);
                                    //変更があったオリジンを取得
                                    console.log(e.url);
                                });
                        p jQueryを使う場合はイベントオブジェクトの子オブジェクトにoriginalEventが必要です。
                        pre(class='prettyprint linenums:1')
                            :code
                                $(window).on('storage',function(e){
                                    //変更があったデータのキーを取得
                                    console.log(e.<mark>originalEvent</mark>.key);
                                    //変更があったキーの変更前の値を取得
                                    console.log(e.<mark>originalEvent</mark>.oldValue);
                                    //変更があったキーの変更後の値を取得
                                    console.log(e.<mark>originalEvent</mark>.newValue);
                                    //変更があったキーのデータをオブジェクトで取得
                                    console.log(e.<mark>originalEvent</mark>.storageArea);
                                    //変更があったオリジンを取得
                                    console.log(e.<mark>originalEvent</mark>.url);
                                });
                        hr
                        h4 Session Storage
                        p コンソールからSession Storageを扱ってみましょう。データはChrome Developer ToolsのResourcesタブのSession Storageから確認できます。
                        p: u Session Storageに格納する
                        pre(class='prettyprint linenums:1')
                            :code
                                //メソッドで格納する
                                sessionStorage.setItem('MYDATA','hoge');

                                //オブジェクトに格納する
                                sessionStorage.MYDATA = 'hoge';
                                sessionStorage['MYDATA'] = 'hoge';
                        p: u Session Storageからデータをを取得する
                        pre(class='prettyprint linenums:1')
                            :code
                                //メソッドで取得する
                                var data = sessionStorage.getItem('MYDATA');

                                //オブジェクトで取得する
                                var data = sessionStorage.MYDATA;
                                var data = sessionStorage['MYDATA'];

                        p: u Session Storageに格納されたデータ数を取得する
                        pre(class='prettyprint linenums:1')
                            :code
                                sessionStorage.length
                        p: u Session Storageに保存されているデータをすべて削除する
                        pre(class='prettyprint linenums:1')
                            :code
                                sessionStorage.clear();
                        p: u Session Storageに格納したデータをすべて取得する
                        pre(class='prettyprint linenums:1')
                            :code
                                for(var i = 0; i < sessionStorage.length; i++){
                                    console.log(sessionStorage.key(i) + ': ' + sessionStorage.getItem(sessionStorage.key(i)));
                                }