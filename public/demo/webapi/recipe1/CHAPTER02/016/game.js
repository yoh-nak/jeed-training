// enchant.js本体やクラスをエクスポートする
enchant();

// プレイヤーキャラクターを作成するクラス
// 「Sprite」クラスを継承
var Player = enchant.Class.create(enchant.Sprite, {
  initialize: function(x, y , map) {
    // 「Sprite」クラスのコンストラクタをコール
    enchant.Sprite.call(this, 48, 48);
    
    // スプライトで表示する画像を設定する
    this.image = core.assets['betty.png'];
    // 表示するフレームの番号を設定する
    this.frame = 3;
    // 表示位置のx座標を設定する
    this.x = x;
    // 表示位置のy座標を設定する
    this.y = y;
    // フレーム数をカウントするプロパティを追加する
    this.tick = 0;
    // プレイヤーのHP(ヒットポイント)を格納するプロパティを追加する
    this.hp = 1000;

    // 「enterframe」イベントが発生したときに実行するリスナを登録する
    this.addEventListener('enterframe', function(e) {

      // 左ボタンが押されたら、スプライトをx方向に「-4」ピクセル移動する
      if (core.input.left) {
        this.x -= 4
        // マップ上に当たり判定がある場合は移動しない
        if(map.hitTest(this.x + 16, this.y + 40)) this.x += 4;
        // スプライトのフレーム番号を切り替えてアニメーション表示する
        this.frame = this.tick % 4 * 4 + 1;
        // フレーム数をインクリメントする
        this.tick ++;
      }

      // 右ボタンが押されたら、スプライトをx方向に「4」ピクセル移動する
      if (core.input.right) {
        this.x += 4;
        if(map.hitTest(this.x + 24 , this.y + 40)) this.x -= 4;
        this.frame = this.tick % 4 * 4 + 3;
        this.tick ++;
      }

      // 上ボタンが押されたら、スプライトをy方向に「-4」ピクセル移動する
      if (core.input.up) {
        this.y -= 4;
        if(map.hitTest(this.x + 24, this.y + 40)) this.y += 4;
        this.frame = this.tick % 4 * 4 + 2;
        this.tick ++;
      }

      // 下ボタンが押されたら、スプライトをy方向に「4」ピクセル移動する 
      if (core.input.down) {
        this.y += 4;
        if(map.hitTest(this.x + 24, this.y + 40)) this.y -= 4;
        this.frame = this.tick % 4 * 4;
        this.tick ++;
      }
      
    });

    // 「touchmove」イベントが発生したときに実行するリスナを登録する
    this.addEventListener('touchmove', function(e) {
      // スプライトをタッチして移動した場所、またはドラッグした場所に移動する
      this.x = e.x - this.width / 2;
      this.y = e.y - this.height / 2;
    });

   }
});

// ページが読み込まれたときに実行される関数
window.onload = function() {

  // コアオブジェクトを作成する
  core = new Core(320, 320);
  
  // 1秒あたりの画面の描画回数を設定する(省略時は「30」)
  core.fps = 16;
  
  // ゲームで使用する画像ファイル、サウンドファイルを読み込む
  // mp3形式のサウンドファイルはプリロードする(FireFox,Safari対応)
  core.preload('betty.png', 'map1.png', 'flowers.png', 'one_0.mp3');

  // BGM用のサウンドファイルを読み込む
  core.bgm = Sound.load('one_0.mp3');
  // SE用のサウンドファイルを読み込む
  core.se = Sound.load('Ready.wav');
  
  // ファイルのプリロードが完了したときに実行される関数
  core.onload = function() {
 
    // BGMのボリュームを設定する(0~1)
    core.bgm.volume = 0.5;
    // BGMを再生する
    core.bgm.play();
    // SEを再生する
    core.se.play();
 
    // マップを作成する
    map = new Map(16, 16); // グローバル変数にする
    // マップで使用するタイルセット画像を設定する
    map.image = core.assets['map1.png'];
    
    // マップデータ(タイルの並びを表す2次元配列)
    map.loadData([
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,83,84,84,84,84,84,84,84,84,84,84,84],
      [1,1,1,1,1,1,1,1,99,100,116,116,116,116,116,116,116,116,116,116],
      [1,1,1,1,1,16,17,18,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,32,33,34,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,48,49,50,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,20,20,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,16,18,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,48,50,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,99,101,1,1,1,1,1,1,1,1,1,1]
    ],
    [
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,23,23,23,23,23,23,-1,-1,-1],
      [-1,23,23,23,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1],
      [-1,-1,-1,-1,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1,-1,-1,-1,28,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,28,-1],
      [-1,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
    ]);
    // マップの当たり判定データ(タイルが当たり判定を持つかを表す2次元配列)
    map.collisionData = [
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0],
      [0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ]
 
    // rootSceneにマップを追加する
    core.rootScene.addChild(map);
 
 /* サーフィスの部分はコメントアウトまたは削除してください。
    // サーフィスを作成する
    var image = new Surface(320, 320);
    // 「flowers.png」の(0, 96)の位置から幅「126」ピクセル、高さ「64」ピクセルの領域を
    // サーフィスの(64, 64)の位置に幅「126」ピクセル、高さ「64」ピクセルで描画する
    image.draw(core.assets['flowers.png'], 0, 96, 126, 64, 64, 64, 126, 64);
    
    // サーフィスを表示するためのスプライトを作成する
    var bg = new Sprite(320, 320);
    // スプライトにサーフィスを設定する
    bg.image = image;
    
    core.rootScene.addChild(bg);
*/   

    // プレイヤーのスプライトを作成する
    var player = new Player(120, 50, map);
    // rootSceneにプレイヤーのスプライトを追加する
    core.rootScene.addChild(player);

    // ラベルを作成する
    var infoLabel = new Label('enchant.js サンプル');
    // 表示位置のx座標を設定する
    infoLabel.x = 16;
    // 表示位置のy座標を設定する
    infoLabel.y = 0;
    // 文字色を設定する
    infoLabel.color = '#0000FF';
    // フォントサイズとフォントの種類を指定する
    infoLabel.font ='14px sens-serif';
    
    // rootSceneにラベルを追加する
    core.rootScene.addChild(infoLabel);


  }
  // ゲームスタート
  core.start();
}

