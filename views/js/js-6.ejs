<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta charset="utf-8">
    <title><%= title %></title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="./css/bootstrap.min.css" rel="stylesheet" media="screen">
  </head>
  <body>
 
    <%- include navbar %>

    <div class="container">
      <div class="row">
        <div class="col-sm-3">

        <div class="list-group">
          <a href="js-1" class="list-group-item">
          コアリファレンス[A]
          </a>
          <a href="js-2" class="list-group-item">
          コアリファレンス[B]
          </a>
          <a href="js-3" class="list-group-item">
          コアリファレンス[D]
          </a>
          <a href="js-4" class="list-group-item">
          コアリファレンス[E]
          </a>
          <a href="js-5" class="list-group-item">
          コアリファレンス[F]
          </a>
          <a href="js-6" class="list-group-item active">
          コアリファレンス[G]
          </a>
          <a href="js-7" class="list-group-item">
          コアリファレンス[I]
          </a>
          <a href="js-8" class="list-group-item">
          コアリファレンス[J]
          </a>
          <a href="js-9" class="list-group-item">
          コアリファレンス[M]
          </a>
          <a href="js-10" class="list-group-item">
          コアリファレンス[N]
          </a>
          <a href="js-11" class="list-group-item">
          コアリファレンス[O]
          </a>
          <a href="js-12" class="list-group-item">
          コアリファレンス[P]
          </a>
          <a href="js-13" class="list-group-item">
          コアリファレンス[R]
          </a>
          <a href="js-14" class="list-group-item">
          コアリファレンス[S]
          </a>
          <a href="js-15" class="list-group-item">
          コアリファレンス[T]
          </a>
          <a href="js-16" class="list-group-item">
          コアリファレンス[U]
          </a>
        </div>
        <div class="list-group">
        <a href="js-17" class="list-group-item">
        クライアントリファレンス[A]
        </a>
        <a href="js-18" class="list-group-item">
        クライアントリファレンス[B]
        </a>
        <a href="js-19" class="list-group-item">
        クライアントリファレンス[C]
        </a>
        <a href="js-20" class="list-group-item">
        クライアントリファレンス[D]
        </a>
        <a href="js-21" class="list-group-item">
        クライアントリファレンス[E]
        </a>
        <a href="js-22" class="list-group-item">
        クライアントリファレンス[F]
        </a>
        <a href="js-23" class="list-group-item">
        クライアントリファレンス[G]
        </a>
        <a href="js-24" class="list-group-item">
        クライアントリファレンス[H]
        </a>
        <a href="js-25" class="list-group-item">
        クライアントリファレンス[I]
        </a>
        <a href="js-26" class="list-group-item">
        クライアントリファレンス[J]
        </a>
        <a href="js-27" class="list-group-item">
        クライアントリファレンス[K]
        </a>
        <a href="js-28" class="list-group-item">
        クライアントリファレンス[L]
        </a>
        <a href="js-29" class="list-group-item">
        クライアントリファレンス[M]
        </a>
        <a href="js-30" class="list-group-item">
        クライアントリファレンス[N]
        </a>
        <a href="js-31" class="list-group-item">
        クライアントリファレンス[O]
        </a>
        <a href="js-32" class="list-group-item">
        クライアントリファレンス[P]
        </a>
        <a href="js-33" class="list-group-item">
        クライアントリファレンス[S]
        </a>
        <a href="js-34" class="list-group-item">
        クライアントリファレンス[T]
        </a>
        <a href="js-35" class="list-group-item">
        クライアントリファレンス[U]
        </a>
        <a href="js-36" class="list-group-item">
        クライアントリファレンス[V]
        </a>
        <a href="js-37" class="list-group-item">
        クライアントリファレンス[W]
        </a>
        <a href="js-38" class="list-group-item">
        クライアントリファレンス[X]
        </a>
        </div>


        </div>
        <div class="col-sm-9">
          <div class="panel panel-primary">
          <div class="panel-heading">JavaScriptコアリファレンス[G]</div>
          <div class="panel-body">
<pre>
Global
グローバルオブジェクト

コーディング形式

     this

グローバルプロパティ

     グローバルオブジェクトはクラスではないため、以下の各グローバルプロパティはそれぞれの名前の項目で参照できます。つまり、undefinedプロパティに関する詳細は、Global.undefinedではなく、undefinedという名前で列挙されています。すべての最上位レベルの変数もグローバルオブジェクトのプロパティであることに注意してください。

     Infinity

         正の無限大を表す数値。

     NaN

          数値ではない値（Not-a-Number）。

     undefined

          undefined値


グローバル関数

     グローバルオブジェクトは、クラスではなくオブジェクトです。以下に列挙したグローバル関数はオブジェクトのメソッドではないため、それぞれの関数名の項目で参照できます。例えば、parseInt()関数の詳細はGlobal.parseInt()ではなくparseInt()の項目に記述されています。


     decodeURI()

          encodeURI()でエスケープされた文字列をデコードします。

     decodeURIComponent()

          encodeURIComponent()でエスケープされた文字をデコードします。

     encodeURI()

          特定の文字をエスケープすることでURIをエンコードします。

     encodeURIComponent()

          特定の文字をエスケープすることでURIコンポーネントをエンコードします。

     escape()

          特定の文字をエスケープシーケンスで置換することで文字列をエンコードします。

     eval()

          JavaScriptの文字列を評価し、その結果を返します。

     isFinite()

          値が有限値かどうかを検査します。

     isNaN()

          値が非数かどうかを検査します。

     parseFloat()

          文字列から数値を解析します。

     parseInt()

          文字列から整数を解析します。

     unescape()

          escape()でエンコードされた文字列をデコードします。


グローバルオブジェクト

     前述のグローバルプロパティとグローバル関数に加えて、グローバルオブジェクトは定義済みのその他のすべてのJavaScriptオブジェクトを参照するプロパティも定義しています。これらのプロパティのほとんどはコンストラクタ関数です。

     Array

          Array()コンストラクタ。

     Boolean

          Boolean()コンストラクタ。

     Date

          Date()コンストラクタ。

     Error

          Error()コンストラクタ。

     EvalError

          EvalError()コンストラクタ。

     Function

          Function()コンストラクタ。

     JSON

          JSON解析と直列化関数を定義するオブジェクトとの参照。

     Math

          数学関数を定義するオブジェクトへの参照。

     Number

          Number()コンストラクタ。

     Object

          Object()コンストラクタ。

     RangeError

          RangeError()コンストラクタ。

     ReferenceError

          ReferenceError()コンストラクタ。

     RegExp

          RegExp()コンストラクタ。

     String

          String()コンストラクタ。

     SyntaxError

          SyntaxError()コンストラクタ。

     TypeError

          TypeError()コンストラクタ。

     URIError

          URIError()コンストラクタ。


解説

     グローバルオブジェクトは、JavaScriptのグローバルプロパティやグローバル関数のプレースホルダとして働く、定義済みのオブジェクトです。定義済みのその他のすべてのオブジェクト、関数、プロパティは、グローバルオブジェクトを介してアクセスできます。グローバルオブジェクトはその他のオブジェクトのプロパティではないため、名前を持ちません（このリファレンスページの項目名は単に本書の構成上の便宜のために付けられており、グローバルオブジェクトが「Global」という名前であるわけではありません）。最上位レベルのJavaScriptコードでは、グローバルオブジェクトはスコープチェーンの最上位として働くため、グローバルオブジェクトをこのように参照する必要はほとんどありません。つまり、非修飾変数名や非修飾関数名はparseInt()関数を参照している場合、グローバルオブジェクトのparseIntプロパティを参照していることになります。グローバルオブジェクトがスコープチェーンの最上位であるということは、JavaScriptコーデで宣言されたすべての変数がグローバルオブジェクトのプロパティになるということも意味しています。
     グローバルオブジェクトは、クラスではなく単なるオブジェクトです。Global()コンストラクタは存在しないため、新しいグローバルオブジェクトをインスタンス化する方法はありません。
     JavaScriptがある特定の環境に埋め込まれていると、通常、グローバルオブジェクトにはその環境に固有のプロパティが追加されます。実際に、グローバルオブジェクトの型はECMAScriptで規定されておらず、JavaScript実装や埋め込みJavaScriptは、オブジェクトがここに列挙した基本的なプロパティと関数を定義している限り、任意の型のオブジェクトをグローバルオブジェクトとして使えます。例えば、クライアントサイドJavaScriptでは、グローバルオブジェクトはWindowオブジェクトであり、JavaScriptコードが動作しているWebブラウザウィンドウを表します。


使用例

     コアJavaScriptでは、グローバルオブジェクトの定義済みプロパティには列挙可能なものはないので、以下のようにfor/inグループを使うと、明示的および暗黙的に宣言されたすべてのグローバル変数を列挙できます。

var variables = '';
for(var name in this){
     variables += name + '\n';
}

関連項目

     「クライアントサイドJavaScriptリファレンス」のwindow。『JavaScript第6版』（オライリー）の3章。






</pre>
          </div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <div id="footer"><%= title %></div>
 
    <script src="http://code.jquery.com/jquery.js"></script>
    <script src="js/bootstrap.min.js"></script>

  </body>
</html>