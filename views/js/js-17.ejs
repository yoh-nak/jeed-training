<%- include ../head %>
  <body>
 
    <%- include navbar %>

    <div class="container">
      <div class="row">
        <div class="col-sm-3">

        <%- include left %>

        </div>
        <div class="col-sm-9">
          <div class="panel panel-primary">
          <div class="panel-heading">
            <i class="glyphicon glyphicon-book"></i> オブジェクトの拡張とオーバーライド</div>
          <div class="panel-body">
<h4>動的にメソッドを追加する</h4>
<p>いったん定義したコンストラクタをnew演算子でインスタンス化した後、後からメソッドを追加することもできます。</p>
<pre class="prettyprint">
var MemberClass = function(firstName, lastName){
  this.firstName = firstName;
  this.lastName = lastName;
};

var men = new MemberClass('洋介','中野');
mem.getName = function(){
  return this.lastName + ' ' + this.firstName;
};

document.writeln(mem.getName());
</pre>

<p>しかしながら、memインスタンスに対してメソッドが追加されていることに注意しましょう。以下の例ではmem2に対してはgetNameメソッドは追加されていないのでエラーになります。プロトタイプベースのオブジェクト指向言語では同じオブジェクト（クラス）をインスタンス化しても常に同じメンバを持つとは限りません。</p>
<pre>
var MemberClass = function(firstName, lastName){
  this.firstName = firstName;
  this.lastName = lastName;
};

var men = new MemberClass('洋介','中野');
<mark>mem.getName</mark> = function(){
  return this.lastName + ' ' + this.firstName;
};

document.writeln(mem.getName());

var mem2 = new MemberClass('弘','藤岡');
document.writeln(<mark>mem2.getName()</mark>);
</pre>

<h4>callメソッド</h4>
<pre>

<pre class="prettyprint">
var obj1 = {
  name: 'よしお',
  greet: function(){
    console.log(this.name + 'です、はじめまして');
  }
};

var obj2 = {
  name: 'ユリ子'
};

obj.greet.call(obj2);
</pre>

<pre class="prettyprint">
var obj1 = {
  name: 'よしお',
  greet: function(age, from){
    console.log(this.name + 'です、はじめまして');
    console.log('年齢は' + age + 'です');
    console.log('出身地は' + from + 'です');
  }
};

var obj2 = {
  name: 'ユリ子'
};

obj1.greet.call(obj2, 6, 'アメリカ');
</pre>

<pre>
function コンストラクタ(引数){
  継承するコンストラクタ.call(this, 引数);
  ...処理を記述...
}
</pre>

<pre class="prettyprint">
function SeisekiClass(name){
  ...
}

function PowerSeisekiClass(name){
  SeisekiClass.call(this, name);
  
  this.showMsg = function(){
    var msg = name + 'さんの成績\n';
    msg += '国語: ' + this.kokugo + '\n';
    msg += '算数: ' + this.sansu + '\n';
    msg += '理科: ' + this.rika + '\n';
    msg += '社会: ' + this.syakai + '\n';
    msg += '英語: ' + this.eigo + '\n';
    msg += '合計: ' + this.goukei() + '\n';
    msg += '平均: ' + this.heikin() + '\n';
    alert(msg)
  };
}

var taro = new PowerSeisekiClass('太郎');
taro.setTensu(75, 58, 69, 81, 47);
taro.showMsg();
</pre>

<h4>apllyメソッド</h4>

<pre class="prettyprint">
var obj1 = {
  name: 'よしお',
  greet: function(age, from){
    console.log(this.name + 'です、はじめまして');
    console.log('年齢は' + age + 'です');
    console.log('出身地は' + from + 'です');
  }
};

var obj2 = {
  name: 'ユリ子'
};

var param = [6, 'アメリカ'];
obj1.greet.apply(obj2, param);
</pre>
<h4>オーバーライド</h4>
<pre>

</pre>
<h4>オブジェクトの改変</h4>
<pre>

</pre>

          </div>
          </div>
        </div>
      </div>
    </div>
    </div>

    <div id="footer"><%= title %></div>
 
    <script src="http://code.jquery.com/jquery.js"></script>
    <script src="js/google-code-prettify/prettify.js"></script>
    <script>prettyPrint();</script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/list-counter.js"></script>
  </body>
</html>