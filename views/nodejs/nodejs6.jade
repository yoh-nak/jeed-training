extends ../layout

block link
	link(href='../css/bootstrap.min.css',rel='stylesheet',media='screen')
	link(href='../css/bootstrap-theme.min.css',rel='stylesheet',media='screen')
	link(href='../js/dtree/dtree.css', rel='stylesheet', media='screen')
	link(href='../css/style.css',rel='stylesheet',media='screen')
	link(href='../js/google-code-prettify/prettify.css',rel='stylesheet',media='screen')

block content
	include navbar.jade
	.container
		.row
			.col-sm-3
				include left.jade
			.col-sm-9
				.panel.panel-primary
					.panel-heading
						i.glyphicon.glyphicon-book
						| &nbsp;便利なグローバルパッケージ
					.panel-body
						.alert.alert-info hotnode
						p Node.jsのソースが編集されたら自動的にサーバーを再起動します。
						p: u インストール
						pre
							:code
								(sudo )npm install -g hotnode
						p: u 使い方
						p サーバーを起動する際に、「node サーバー」の代わりに「hotnode サーバー」で起動します。
						pre
							:code
								hotnode サーバー
						hr
						.alert.alert-info forever
						p Node.jsのサーバーがクラッシュしたとき自動的に再起動します。Windowsは非対応です。
						p /etc/rc.localファイルにコマンドを記述すればサーバの起動時にforeverが実行されます。
						p: u インストール
						pre
							:code
								(sudo )npm install -g forever
						p: u 使い方
						p 自動起動する場合は/etc/rc.localに、以下のように記述します。サーバーが80番ポートの場合はsudoが必要です。
						pre
							:code
								(sudo )forever /フルパス/サーバー
						p 手動で起動する場合はターミナルから以下のコマンドを実行します。
						pre
							:code
								(sudo )foever サーバー
						hr
						.alert.alert-info http-proxy
						p 80番ポートを使って複数のNode.jsのプロセスにホスト名、ドメイン名を割り当てます。
						p /etc/rc.localファイルにコマンドを記述すればサーバの起動時にhttp-proxyが実行されます。
						p: u インストール
						pre
							:code
								(sudo )npm install -g http-proxy
						p: u 使い方
						p proxy.jsを記述します。
						pre(class='prettyprint linenums:1')
							:code
								require('http-proxy').createServer({
									router: {
										'login.nodecookbook.com': 'localhost:3000',
										'nodecookbook.com': 'localhost:8080'
									}
								}).listen(80, function(){
									process.setuid('www-data');
								});
						p windowsの場合は「process.setuid('www-data');」を無効にします。
						pre(class='prettyprint linenums:1')
							:code
								require('http-proxy').createServer({
									router: {
										'login.nodecookbook.com': 'localhost:3000',
										'nodecookbook.com': 'localhost:8080'
									}
								}).listen(80, function(){
									//process.setuid('www-data');
								});
						p 本番環境（Linuxの場合）では/etc/rc.localに追記します。
						pre(class='prettyprint linenums:1')
							:code
								sudo node /フルパス/login/app.js
								sudo node /フルパス/server.js
								sudo node /フルパス/proxy.js
						p foreverを使う場合は/etc/rc.localに以下のように記述します。
						pre(class='prettyprint linenums:1')
							:code
								sudo forever /フルパス/login/app.js
								sudo forever /フルパス/server.js
								sudo forever /フルパス/proxy.js
						.alert.alert-info winser
						pre
							:code
								node.js用に書かれたプログラムを、Windowsでサービス登録してバックグラウンドで自動実行します。

								WinSer: node.js applications as windows services
								http://joseoncode.com/2012/04/06/winser-node-dot-js-applications-as-windows-services/

								npmコマンドでインストールできます。

								npm install winser

								実際のプログラムをサービス化するにあたって、package.jsonを作成しておく必要があります。package.jsonのnameがそのままサービス名として登録されます。他の項目はどうでもいいです。

								コマンドプロンプトを管理者権限で実行します。

								C:\> chcp 437

								日本語環境の場合、chcpコマンドでコマンドプロンプトを英語モードにしないと、 
								You must run this tool as an administrator 
								というエラーが出ます。

								そして、自分の作ったプログラムのディレクトリに移動して、 
								C:\path\to\node_modules\.bat\winser.cmd -i 
								でサービスに登録されます。

								cmdファイル経由ではなく、 
								node.exe C:\path\to\winser\winser -i 
								でもOKです。

								ちなみに、サービス自体はnssmが登録します。

								NSSM – the Non-Sucking Service Manager
								http://nssm.cc/

								ファイアウォールを通す場合は、nssmを指定します。